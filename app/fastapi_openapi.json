{"openapi":"3.1.0","info":{"title":"Parco RTLS API","version":"0P.10B.10"},"paths":{"/api/get_all_devices":{"get":{"tags":["devices"],"summary":"Get All Devices","description":"Retrieve a list of all devices in the ParcoRTLS system, including their associated zone IDs.\n\nThis endpoint fetches all devices (e.g., tags, beacons) from the `devices` table using a raw SQL query. It is used to provide a comprehensive overview of devices for monitoring, reporting, or populating UI elements in the React frontend.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing device details.\n        - x_id_dev (str): Device ID (e.g., \"TAG001\").\n        - i_typ_dev (int): Device type ID (e.g., 1 for Tag, 2 for Beacon).\n        - x_nm_dev (str): Device name (e.g., \"Employee Tag\").\n        - n_moe_x (float or None): X-coordinate of the device's margin of error.\n        - n_moe_y (float or None): Y-coordinate of the device's margin of error.\n        - n_moe_z (float or None): Z-coordinate of the device's margin of error.\n        - zone_id (int or None): ID of the associated zone (e.g., 1 for \"Main Lobby\").\n\nRaises:\n    None: Returns an empty list on error to prevent frontend crashes.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_all_devices\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"x_id_dev\": \"TAG001\",\n            \"i_typ_dev\": 1,\n            \"x_nm_dev\": \"Employee Tag\",\n            \"n_moe_x\": 100.5,\n            \"n_moe_y\": 200.7,\n            \"n_moe_z\": 10.0,\n            \"zone_id\": 1\n        },\n        {\n            \"x_id_dev\": \"BEACON002\",\n            \"i_typ_dev\": 2,\n            \"x_nm_dev\": \"Lobby Beacon\",\n            \"n_moe_x\": null,\n            \"n_moe_y\": null,\n            \"n_moe_z\": null,\n            \"zone_id\": 1\n        }\n    ]\n    ```\n\nUse Case:\n    - Populate a dashboard in the React frontend with all devices and their current zones for real-time monitoring.\n    - Generate a report of all devices and their locations for inventory management.\n\nHint:\n    - Use this endpoint sparingly in high-traffic scenarios, as it retrieves all devices. Consider filtering by type or zone for better performance.\n    - The `zone_id` can be cross-referenced with the `/zone_list` endpoint to get zone details.","operationId":"get_all_devices_api_get_all_devices_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/check_device_id/{device_id}":{"get":{"tags":["devices"],"summary":"Check Device Id","description":"Check if a device ID exists in the ParcoRTLS system.\n\nThis endpoint queries the database using the `usp_device_select_by_id` stored procedure to verify if a device ID is already registered. It is used to prevent duplicate device IDs during device creation.\n\nArgs:\n    device_id (str): The device ID to check (e.g., \"TAG001\"). Required.\n\nReturns:\n    dict: A JSON response indicating whether the device ID exists.\n        - exists (bool): True if the device ID exists, False otherwise.\n\nRaises:\n    HTTPException:\n        - 500: If a database or unexpected error occurs during the check.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/check_device_id/TAG001\"\n    ```\n    Response:\n    ```json\n    {\"exists\": true}\n    ```\n\nUse Case:\n    - Validate a new device ID in the React frontend before submitting a device creation form.\n    - Ensure uniqueness when registering a new tag or beacon in the system.\n\nHint:\n    - Use this endpoint before calling `/add_device` to avoid duplicate key errors.","operationId":"check_device_id_api_check_device_id__device_id__get","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/add_device":{"post":{"tags":["devices"],"summary":"Add Device","description":"Add a new device to the ParcoRTLS system using form data.\n\nThis endpoint creates a new device (e.g., tag, beacon) in the system by executing the `usp_device_add` stored procedure via a raw query. It supports associating the device with a zone and setting initial location coordinates. It is used to register devices for tracking within the ParcoRTLS system.\n\nArgs:\n    device_id (str): Unique identifier for the device (e.g., \"TAG001\"). Required.\n    device_type (int): Device type ID (e.g., 1 for Tag, 2 for Beacon). Required.\n    device_name (str, optional): Descriptive name of the device (e.g., \"Employee Tag\"). Defaults to None.\n    n_moe_x (float, optional): X-coordinate of the device's margin of error. Defaults to None.\n    n_moe_y (float, optional): Y-coordinate of the device's margin of error. Defaults to None.\n    n_moe_z (float, optional): Z-coordinate of the device's margin of error. Defaults to 0.\n    zone_id (int, optional): ID of the associated zone (e.g., 1 for \"Main Lobby\"). Defaults to None.\n\nReturns:\n    dict: A JSON response indicating success and the device ID.\n        - x_id_dev (str): The ID of the newly created device.\n        - message (str): Success message (\"Device added successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/add_device\"              -H \"Content-Type: multipart/form-data\"              -F \"device_id=TAG001\"              -F \"device_type=1\"              -F \"device_name=Employee Tag\"              -F \"n_moe_x=100.5\"              -F \"n_moe_y=200.7\"              -F \"n_moe_z=10.0\"              -F \"zone_id=1\"\n    ```\n    Response:\n    ```json\n    {\"x_id_dev\": \"TAG001\", \"message\": \"Device added successfully\"}\n    ```\n\nUse Case:\n    - Register a new employee tag (\"TAG001\") with initial location coordinates and assign it to a specific zone for real-time tracking.\n    - Add a beacon to a zone to enhance location accuracy in a hospital campus.\n\nHint:\n    - Use `/check_device_id/{device_id}` to verify the `device_id` is unique before calling this endpoint.\n    - Retrieve valid `device_type` values from `/list_device_types` and `zone_id` values from `/zone_list` to ensure accurate inputs.\n    - The `multipart/form-data` content type is used to support form submissions from the React frontend.","operationId":"add_device_api_add_device_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_add_device_api_add_device_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_device/{device_id}":{"put":{"tags":["devices"],"summary":"Edit Device","description":"Update an existing device's details in the ParcoRTLS system.\n\nThis endpoint modifies a device's attributes (e.g., ID, type, name, location, zone, service dates, logging flag) using the `usp_device_edit` stored procedure. It is used to update device information when changes occur, such as reassigning a device to a new zone or updating its location coordinates.\n\nArgs:\n    device_id (str): The current ID of the device to update (e.g., \"TAG001\"). Required.\n    new_device_id (str): The new ID for the device (e.g., \"TAG002\"). Required.\n    device_type (int, optional): Updated device type ID (e.g., 1 for Tag). Defaults to None.\n    device_name (str, optional): Updated device name (e.g., \"Updated Employee Tag\"). Defaults to None.\n    n_moe_x (float, optional): Updated X-coordinate of the device's margin of error. Defaults to None.\n    n_moe_y (float, optional): Updated Y-coordinate of the device's margin of error. Defaults to None.\n    n_moe_z (float, optional): Updated Z-coordinate of the device's margin of error. Defaults to None.\n    zone_id (int, optional): Updated zone ID (e.g., 2 for \"Ward A\"). Defaults to None.\n    d_srv_bgn (str, optional): Updated service start date in ISO format (e.g., \"2025-04-26T00:00:00Z\"). Defaults to None.\n    d_srv_end (str, optional): Updated service end date in ISO format (e.g., \"2025-12-31T00:00:00Z\"). Defaults to None.\n    f_log (bool, optional): Updated logging flag indicating whether to log device activity. Defaults to None.\n\nReturns:\n    dict: A JSON response indicating success and the updated device ID.\n        - x_id_dev (str): The updated device ID.\n        - message (str): Success message (\"Device updated successfully\").\n\nRaises:\n    HTTPException:\n        - 404: If the device is not found.\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_device/TAG001\"              -H \"Content-Type: multipart/form-data\"              -F \"new_device_id=TAG002\"              -F \"device_type=1\"              -F \"device_name=Updated Employee Tag\"              -F \"n_moe_x=150.0\"              -F \"n_moe_y=250.0\"              -F \"n_moe_z=15.0\"              -F \"zone_id=2\"              -F \"d_srv_bgn=2025-04-26T00:00:00Z\"              -F \"d_srv_end=2025-12-31T00:00:00Z\"              -F \"f_log=true\"\n    ```\n    Response:\n    ```json\n    {\"x_id_dev\": \"TAG002\", \"message\": \"Device updated successfully\"}\n    ```\n\nUse Case:\n    - Update a tag's location coordinates after it moves to a new area in a Zone L1 campus.\n    - Reassign a beacon to a different zone or change its service dates after maintenance.\n\nHint:\n    - Verify the `device_id` exists using `/get_device_by_id/{device_id}` before updating.\n    - Ensure `device_type` and `zone_id` are valid by checking `/list_device_types` and `/zone_list`, respectively.\n    - The `d_srv_bgn` and `d_srv_end` parameters must be in ISO 8601 format with a 'Z' suffix for UTC.","operationId":"edit_device_api_edit_device__device_id__put","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"requestBody":{"required":true,"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_edit_device_api_edit_device__device_id__put"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_device/{device_id}":{"delete":{"tags":["devices"],"summary":"Delete Device","description":"Delete a device from the ParcoRTLS system.\n\nThis endpoint removes a device by its ID using the `usp_device_delete` stored procedure. It is used to decommission devices that are no longer in use, such as retired tags or beacons.\n\nArgs:\n    device_id (str): The ID of the device to delete (e.g., \"TAG001\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_device/TAG001\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove a tag (\"TAG001\") from the system after an employee leaves the organization.\n    - Decommission a beacon that is no longer operational.\n\nHint:\n    - Ensure all assignments for the device are removed using `/delete_all_device_assignments` or `/end_all_device_assignments` before deletion to avoid database constraints.\n    - A return value of 0 from the stored procedure indicates the device was already deleted, which is treated as success.","operationId":"delete_device_api_delete_device__device_id__delete","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_device_by_id/{device_id}":{"get":{"tags":["devices"],"summary":"Get Device By Id","description":"Retrieve details of a specific device by its ID.\n\nThis endpoint fetches a single device's details using the `usp_device_select_by_id` stored procedure. It is used to display device information or verify existence before performing operations like assignments or updates.\n\nArgs:\n    device_id (str): The ID of the device to retrieve (e.g., \"TAG001\"). Required.\n\nReturns:\n    dict: A dictionary containing device details.\n        - x_id_dev (str): Device ID.\n        - i_typ_dev (int): Device type ID.\n        - x_nm_dev (str): Device name.\n        - n_moe_x (float or None): X-coordinate of the margin of error.\n        - n_moe_y (float or None): Y-coordinate of the margin of error.\n        - n_moe_z (float or None): Z-coordinate of the margin of error.\n        - zone_id (int or None): Associated zone ID.\n        - d_srv_bgn (datetime or None): Service start date.\n        - d_srv_end (datetime or None): Service end date.\n        - f_log (bool or None): Logging flag.\n\nRaises:\n    HTTPException:\n        - 404: If the device is not found.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_device_by_id/TAG001\"\n    ```\n    Response:\n    ```json\n    {\n        \"x_id_dev\": \"TAG001\",\n        \"i_typ_dev\": 1,\n        \"x_nm_dev\": \"Employee Tag\",\n        \"n_moe_x\": 100.5,\n        \"n_moe_y\": 200.7,\n        \"n_moe_z\": 10.0,\n        \"zone_id\": 1,\n        \"d_srv_bgn\": \"2025-04-26T00:00:00\",\n        \"d_srv_end\": null,\n        \"f_log\": true\n    }\n    ```\n\nUse Case:\n    - Display detailed information about a tag (\"TAG001\") in the React frontend.\n    - Verify a device's current zone or location before reassigning it.\n\nHint:\n    - Use this endpoint to prefetch device data before rendering forms or dashboards to reduce latency.","operationId":"get_device_by_id_api_get_device_by_id__device_id__get","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_device_by_type/{device_type}":{"get":{"tags":["devices"],"summary":"Get Device By Type","description":"Retrieve all devices of a specific type.\n\nThis endpoint fetches devices of a given type (e.g., all tags or all beacons) using the `usp_device_select_by_type` stored procedure. It is useful for filtering devices by their category for reporting or UI display.\n\nArgs:\n    device_type (int): The device type ID to filter by (e.g., 1 for Tag, 2 for Beacon). Required.\n\nReturns:\n    list: A list of dictionaries, each containing device details.\n        - x_id_dev (str): Device ID.\n        - i_typ_dev (int): Device type ID.\n        - x_nm_dev (str): Device name.\n        - n_moe_x (float or None): X-coordinate of the margin of error.\n        - n_moe_y (float or None): Y-coordinate of the margin of error.\n        - n_moe_z (float or None): Z-coordinate of the margin of error.\n        - zone_id (int or None): Associated zone ID.\n        - d_srv_bgn (datetime or None): Service start date.\n        - d_srv_end (datetime or None): Service end date.\n        - f_log (bool or None): Logging flag.\n\nRaises:\n    None: Returns an empty list if no devices are found or if an error occurs, preventing frontend crashes.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_device_by_type/1\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"x_id_dev\": \"TAG001\",\n            \"i_typ_dev\": 1,\n            \"x_nm_dev\": \"Employee Tag\",\n            \"n_moe_x\": 100.5,\n            \"n_moe_y\": 200.7,\n            \"n_moe_z\": 10.0,\n            \"zone_id\": 1,\n            \"d_srv_bgn\": \"2025-04-26T00:00:00\",\n            \"d_srv_end\": null,\n            \"f_log\": true\n        }\n    ]\n    ```\n\nUse Case:\n    - List all tags (type ID 1) in a dropdown for assigning to entities in the React frontend.\n    - Generate a report of all beacons (type ID 2) for maintenance scheduling.\n\nHint:\n    - Retrieve valid `device_type` values from `/list_device_types` to ensure accurate filtering.\n    - The empty list return on error aligns with version 0.1.38 changes to improve frontend compatibility.","operationId":"get_device_by_type_api_get_device_by_type__device_type__get","parameters":[{"name":"device_type","in":"path","required":true,"schema":{"type":"integer","title":"Device Type"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_out_of_service_devices":{"get":{"tags":["devices"],"summary":"Get Out Of Service Devices","description":"Retrieve all out-of-service devices in the ParcoRTLS system.\n\nThis endpoint fetches devices marked as out-of-service (e.g., with an active end date) using the `usp_device_select_outofservice` stored procedure. It is used to identify devices that are not currently operational for maintenance or replacement purposes.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing details of out-of-service devices.\n        - x_id_dev (str): Device ID.\n        - i_typ_dev (int): Device type ID.\n        - x_nm_dev (str): Device name.\n        - n_moe_x (float or None): X-coordinate of the margin of error.\n        - n_moe_y (float or None): Y-coordinate of the margin of error.\n        - n_moe_z (float or None): Z-coordinate of the margin of error.\n        - zone_id (int or None): Associated zone ID.\n        - d_srv_bgn (datetime or None): Service start date.\n        - d_srv_end (datetime or None): Service end date.\n        - f_log (bool or None): Logging flag.\n\nRaises:\n    HTTPException:\n        - 404: If no out-of-service devices are found.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_out_of_service_devices\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"x_id_dev\": \"TAG002\",\n            \"i_typ_dev\": 1,\n            \"x_nm_dev\": \"Retired Tag\",\n            \"n_moe_x\": null,\n            \"n_moe_y\": null,\n            \"n_moe_z\": null,\n            \"zone_id\": null,\n            \"d_srv_bgn\": \"2025-01-01T00:00:00\",\n            \"d_srv_end\": \"2025-04-26T00:00:00\",\n            \"f_log\": false\n        }\n    ]\n    ```\n\nUse Case:\n    - Generate a maintenance report of all out-of-service tags for replacement.\n    - Display out-of-service beacons in the React frontend to prioritize repairs.\n\nHint:\n    - Cross-reference with `/get_device_by_id/{device_id}` to get detailed history for each out-of-service device.\n    - Use `/set_device_end_date` to mark devices as out-of-service or `/remove_device_end_date` to restore them.","operationId":"get_out_of_service_devices_api_get_out_of_service_devices_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/set_device_end_date":{"post":{"tags":["devices"],"summary":"Set Device End Date","description":"Set or update the end date for a device, marking it as out-of-service.\n\nThis endpoint updates a device's service end date using the `usp_device_set_end_date` stored procedure. It is used to indicate that a device is no longer operational, such as when a tag is retired or a beacon is taken offline for maintenance.\n\nArgs:\n    request (DeviceEndDateRequest): The request body containing device details.\n        - device_id (str): The ID of the device to update (e.g., \"TAG001\"). Required.\n        - end_date (datetime or None): The service end date in ISO format (e.g., \"2025-12-31T00:00:00\"). Optional, defaults to None (clears end date).\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device end date updated successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/set_device_end_date\"              -H \"Content-Type: application/json\"              -d '{\"device_id\": \"TAG001\", \"end_date\": \"2025-12-31T00:00:00\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device end date updated successfully\"}\n    ```\n\nUse Case:\n    - Mark a tag as out-of-service after an employee leaves the organization.\n    - Set an end date for a beacon scheduled for maintenance.\n\nHint:\n    - Verify the `device_id` exists using `/get_device_by_id/{device_id}` before updating.\n    - Setting `end_date` to null via this endpoint or using `/remove_device_end_date` can restore a device to active status.","operationId":"set_device_end_date_api_set_device_end_date_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceEndDateRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/remove_device_end_date/{device_id}":{"delete":{"tags":["devices"],"summary":"Remove Device End Date","description":"Remove the end date for a device, restoring it to active status.\n\nThis endpoint clears a device's service end date using the `usp_device_remove_end_date` stored procedure. It is used to reactivate a device that was previously marked as out-of-service.\n\nArgs:\n    device_id (str): The ID of the device to update (e.g., \"TAG001\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device end date removed successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/remove_device_end_date/TAG001\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device end date removed successfully\"}\n    ```\n\nUse Case:\n    - Reactivate a tag after it is reassigned to a new employee.\n    - Restore a beacon to service after maintenance is completed.\n\nHint:\n    - Verify the `device_id` exists and is out-of-service using `/get_out_of_service_devices` before calling this endpoint.\n    - This endpoint is equivalent to calling `/set_device_end_date` with a null `end_date`.","operationId":"remove_device_end_date_api_remove_device_end_date__device_id__delete","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/set_device_state":{"put":{"tags":["devices"],"summary":"Set Device State","description":"Update a device's state (active or inactive) in the ParcoRTLS system.\n\nThis endpoint sets a device's state by either removing its end date (for \"active\" state) or setting an end date to the current time (for any other state, e.g., \"inactive\") using the appropriate stored procedures (`usp_device_remove_end_date` or `usp_device_set_end_date`). It is used to manage device operational status.\n\nArgs:\n    device_id (str): The ID of the device to update (e.g., \"TAG001\"). Required.\n    new_state (str): The new state of the device (e.g., \"active\", \"inactive\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device state updated successfully\").\n\nRaises:\n    HTTPException:\n        - 404: If the device is not found.\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/set_device_state\"              -H \"Content-Type: multipart/form-data\"              -F \"device_id=TAG001\"              -F \"new_state=inactive\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device state updated successfully\"}\n    ```\n\nUse Case:\n    - Mark a tag as inactive when an employee is on leave.\n    - Set a beacon to active after it is redeployed post-maintenance.\n\nHint:\n    - Use `/get_device_by_id/{device_id}` to verify the device's current state before updating.\n    - The `new_state` value \"active\" clears the end date, while any other value sets it to the current time.\n    - Supports form data for compatibility with React frontend forms.","operationId":"set_device_state_api_set_device_state_put","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_set_device_state_api_set_device_state_put"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/add_device_type":{"post":{"tags":["devices"],"summary":"Add Device Type","description":"Add a new device type to the ParcoRTLS system.\n\nThis endpoint creates a new device type (e.g., Tag, Beacon) using the `usp_device_type_add` stored procedure. Device types categorize devices for organizational and filtering purposes.\n\nArgs:\n    request (DeviceTypeRequest): The request body containing the device type details.\n        - description (str): The name or description of the device type (e.g., \"Tag\"). Required.\n\nReturns:\n    dict: A JSON response indicating success and the new type ID.\n        - message (str): Success message (\"Device type added successfully\").\n        - type_id (int): The ID of the newly created device type.\n\nRaises:\n    HTTPException:\n        - 400: If the device type description already exists.\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/add_device_type\"              -H \"Content-Type: application/json\"              -d '{\"description\": \"Tag\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device type added successfully\", \"type_id\": 1}\n    ```\n\nUse Case:\n    - Add a new device type (\"Patient Tag\") to support tracking patients in a hospital campus.\n    - Create a custom device type for a specific use case (e.g., \"Vehicle Tracker\").\n\nHint:\n    - Check existing types with `/list_device_types` to avoid duplicating descriptions.\n    - The returned `type_id` is used when adding devices via `/add_device`.","operationId":"add_device_type_api_add_device_type_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceTypeRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_device_type/{type_id}":{"delete":{"tags":["devices"],"summary":"Delete Device Type","description":"Delete a device type from the ParcoRTLS system.\n\nThis endpoint removes a device type by its ID using the `usp_device_type_delete` stored procedure. It is used to remove obsolete or unused device types.\n\nArgs:\n    type_id (int): The ID of the device type to delete (e.g., 1). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device type deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_device_type/1\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device type deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove an obsolete device type (\"Temporary Tag\") that is no longer needed.\n    - Clean up unused device types during system maintenance.\n\nHint:\n    - Ensure no devices are using the `type_id` (check `/get_device_by_type/{device_type}`) before deletion to avoid database constraints.\n    - A return value of 0 from the stored procedure indicates the type was already deleted, which is treated as success.","operationId":"delete_device_type_api_delete_device_type__type_id__delete","parameters":[{"name":"type_id","in":"path","required":true,"schema":{"type":"integer","title":"Type Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_device_type":{"put":{"tags":["devices"],"summary":"Edit Device Type","description":"Update an existing device type's description.\n\nThis endpoint modifies the description of a device type using the `usp_device_type_edit` stored procedure. It is used to correct or update type names for clarity or consistency.\n\nArgs:\n    type_id (int): The ID of the device type to update (e.g., 1). Required.\n    request (DeviceTypeRequest): The request body containing the updated type details.\n        - description (str): The updated description of the device type (e.g., \"Staff Tag\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device type edited successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_device_type?type_id=1\"              -H \"Content-Type: application/json\"              -d '{\"description\": \"Staff Tag\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device type edited successfully\"}\n    ```\n\nUse Case:\n    - Rename a device type from \"Tag\" to \"Staff Tag\" for better clarity.\n    - Update a type description to reflect a new use case.\n\nHint:\n    - Verify the `type_id` exists using `/list_device_types` before updating.","operationId":"edit_device_type_api_edit_device_type_put","parameters":[{"name":"type_id","in":"query","required":true,"schema":{"type":"integer","title":"Type Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceTypeRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_device_types":{"get":{"tags":["devices"],"summary":"List Device Types","description":"Retrieve a list of all device types in the ParcoRTLS system.\n\nThis endpoint fetches all device types (e.g., Tag, Beacon) using the `usp_device_type_list` stored procedure. It is useful for populating UI elements or validating device type IDs.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing device type details.\n        - i_typ_dev (int): Device type ID.\n        - x_dsc_dev_typ (str): Device type description (e.g., \"Tag\").\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If no device types are found.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_device_types\"\n    ```\n    Response:\n    ```json\n    [\n        {\"i_typ_dev\": 1, \"x_dsc_dev_typ\": \"Tag\", \"d_crt\": \"2025-04-26T10:00:00\", \"d_udt\": \"2025-04-26T10:00:00\"},\n        {\"i_typ_dev\": 2, \"x_dsc_dev_typ\": \"Beacon\", \"d_crt\": \"2025-04-25T09:00:00\", \"d_udt\": \"2025-04-25T09:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - Populate a dropdown in the React frontend for selecting device types when adding a new device.\n    - Validate device type IDs before creating or updating devices.\n\nHint:\n    - Use this endpoint to ensure valid `device_type` values are used in `/add_device` or `/edit_device`.","operationId":"list_device_types_api_list_device_types_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/assign_device_to_zone":{"post":{"tags":["devices"],"summary":"Assign Device To Zone","description":"Assign a device to a zone or entity in the ParcoRTLS system.\n\nThis endpoint creates an assignment between a device and an entity (e.g., a zone or person) using the `usp_assign_dev_add` stored procedure. It validates the device, entity, and reason before creating the assignment, ensuring proper tracking within the system.\n\nArgs:\n    device_id (str): The ID of the device to assign (e.g., \"TAG001\"). Required.\n    entity_id (str): The ID of the entity (e.g., zone or person) to assign the device to (e.g., \"ZONE001\"). Required.\n    reason_id (int): The ID of the assignment reason (e.g., 1 for \"Location Tracking\"). Required.\n\nReturns:\n    dict: A JSON response indicating success and the assignment ID.\n        - message (str): Success message (\"Device assigned successfully\").\n        - assignment_id (str): The ID of the newly created assignment.\n\nRaises:\n    HTTPException:\n        - 400: If the reason ID is invalid.\n        - 404: If the device or entity is not found.\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/assign_device_to_zone\"              -H \"Content-Type: multipart/form-data\"              -F \"device_id=TAG001\"              -F \"entity_id=ZONE001\"              -F \"reason_id=1\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device assigned successfully\", \"assignment_id\": \"101\"}\n    ```\n\nUse Case:\n    - Assign a tag to a zone (\"ZONE001\") for location tracking in a Zone L1 campus.\n    - Link a beacon to a department entity for enhanced positioning accuracy.\n\nHint:\n    - Verify `device_id` and `entity_id` exist using `/get_device_by_id/{device_id}` and `/get_entity_by_id/{entity_id}` (from `entity.py`) before assigning.\n    - Retrieve valid `reason_id` values from `/list_assignment_reasons` (from `entity.py`).\n    - Supports form data for compatibility with React frontend forms.","operationId":"assign_device_to_zone_api_assign_device_to_zone_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_assign_device_to_zone_api_assign_device_to_zone_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_device_assignment/{assignment_id}":{"delete":{"tags":["devices"],"summary":"Delete Device Assignment","description":"Delete a specific device assignment.\n\nThis endpoint removes a device assignment (e.g., a tag's association with a zone) using the `usp_assign_dev_delete` stored procedure. It is used to dissolve assignments when they are no longer needed.\n\nArgs:\n    assignment_id (int): The ID of the assignment to delete (e.g., 101). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device assignment deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_device_assignment/101\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device assignment deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove a tag's assignment to a zone after it is reassigned to a new zone.\n    - Dissolve a beacon's assignment to an entity after it is decommissioned.\n\nHint:\n    - Verify the `assignment_id` exists using `/list_device_assignments_by_device/{device_id}` before deletion.\n    - The stored procedure may update the assignment's end date rather than deleting it, depending on implementation (see version 0.1.36 changelog).","operationId":"delete_device_assignment_api_delete_device_assignment__assignment_id__delete","parameters":[{"name":"assignment_id","in":"path","required":true,"schema":{"type":"integer","title":"Assignment Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_all_device_assignments":{"delete":{"tags":["devices"],"summary":"Delete All Device Assignments","description":"Delete all device assignments in the ParcoRTLS system.\n\nThis endpoint removes all device assignments using the `usp_assign_dev_delete_all` stored procedure. It is used to reset all device-entity associations, typically during major system maintenance or reconfiguration.\n\nArgs:\n    None\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"All device assignments deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_all_device_assignments\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"All device assignments deleted successfully\"}\n    ```\n\nUse Case:\n    - Clear all device assignments during a system-wide reset or migration.\n    - Remove all tag-zone associations before reconfiguring a campus's zone structure.\n\nHint:\n    - Use this endpoint cautiously, as it affects all devices and may disrupt tracking operations.\n    - Consider using `/end_all_device_assignments` to preserve historical data instead of deleting assignments.","operationId":"delete_all_device_assignments_api_delete_all_device_assignments_delete","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/delete_device_assignments_by_entity/{entity_id}":{"delete":{"tags":["devices"],"summary":"Delete Device Assignments By Entity","description":"Delete all device assignments for a specific entity.\n\nThis endpoint removes all device assignments associated with a given entity (e.g., a zone or person) using the `usp_assign_dev_delete_all_by_ent` stored procedure. It is used to clear assignments when an entity is decommissioned or reassigned.\n\nArgs:\n    entity_id (str): The ID of the entity whose assignments are to be deleted (e.g., \"ZONE001\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device assignments deleted successfully for entity\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_device_assignments_by_entity/ZONE001\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device assignments deleted successfully for entity\"}\n    ```\n\nUse Case:\n    - Clear all tag assignments for a zone (\"ZONE001\") that is being reconfigured.\n    - Remove device assignments for a department entity after it is dissolved.\n\nHint:\n    - Verify the `entity_id` exists using `/get_entity_by_id/{entity_id}` (from `entity.py`) before deletion.\n    - Use `/end_all_device_assignments` if historical assignment data needs to be preserved.","operationId":"delete_device_assignments_by_entity_api_delete_device_assignments_by_entity__entity_id__delete","parameters":[{"name":"entity_id","in":"path","required":true,"schema":{"type":"string","title":"Entity Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_device_assignment":{"put":{"tags":["devices"],"summary":"Edit Device Assignment","description":"Update an existing device assignment.\n\nThis endpoint modifies a device assignment (e.g., changing the device, entity, or reason) using the `usp_assign_dev_edit` stored procedure. It is used to update assignment details when reassigning devices or correcting errors.\n\nArgs:\n    request (AssignDeviceEditRequest): The request body containing updated assignment details.\n        - assignment_id (int): The ID of the assignment to update (e.g., 101). Required.\n        - device_id (str): The updated device ID (e.g., \"TAG001\"). Required.\n        - entity_id (str): The updated entity ID (e.g., \"ZONE001\"). Required.\n        - reason_id (int): The updated reason ID (e.g., 1 for \"Location Tracking\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device assignment edited successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_device_assignment\"              -H \"Content-Type: application/json\"              -d '{\"assignment_id\": 101, \"device_id\": \"TAG001\", \"entity_id\": \"ZONE002\", \"reason_id\": 1}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device assignment edited successfully\"}\n    ```\n\nUse Case:\n    - Reassign a tag from one zone (\"ZONE001\") to another (\"ZONE002\") in a Zone L1 campus.\n    - Update the reason for a beacon's assignment after a change in its purpose.\n\nHint:\n    - Verify the `assignment_id` exists using `/list_device_assignments_by_device/{device_id}` before updating.\n    - Ensure `device_id`, `entity_id`, and `reason_id` are valid using appropriate endpoints (e.g., `/get_device_by_id/{device_id}`, `/get_entity_by_id/{entity_id}`, `/list_assignment_reasons`).","operationId":"edit_device_assignment_api_edit_device_assignment_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignDeviceEditRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/end_device_assignment":{"post":{"tags":["devices"],"summary":"End Device Assignment","description":"End a specific device assignment.\n\nThis endpoint marks a device assignment as ended using the `usp_assign_dev_end` stored procedure. It is used to terminate an assignment without deleting it, preserving historical data.\n\nArgs:\n    request (AssignDeviceEndRequest): The request body containing the assignment ID.\n        - assignment_id (int): The ID of the assignment to end (e.g., 101). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Device assignment ended successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/end_device_assignment\"              -H \"Content-Type: application/json\"              -d '{\"assignment_id\": 101}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Device assignment ended successfully\"}\n    ```\n\nUse Case:\n    - End a tag's assignment to a zone when it is reassigned to a new zone.\n    - Terminate a beacon's assignment to an entity when it is taken offline.\n\nHint:\n    - Use this endpoint to maintain historical records instead of deleting assignments with `/delete_device_assignment/{assignment_id}`.\n    - Verify the `assignment_id` exists using `/list_device_assignments_by_device/{device_id}`.","operationId":"end_device_assignment_api_end_device_assignment_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignDeviceEndRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/end_all_device_assignments":{"post":{"tags":["devices"],"summary":"End All Device Assignments","description":"End all device assignments in the ParcoRTLS system.\n\nThis endpoint marks all device assignments as ended using the `usp_assign_dev_end_all` stored procedure. It is used to terminate all device-entity associations while preserving historical data, typically during system reconfiguration.\n\nArgs:\n    None\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"All device assignments ended successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/end_all_device_assignments\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"All device assignments ended successfully\"}\n    ```\n\nUse Case:\n    - End all tag assignments during a system-wide reset while retaining historical data.\n    - Terminate all beacon assignments before reconfiguring zone associations.\n\nHint:\n    - Use this endpoint instead of `/delete_all_device_assignments` if historical data needs to be retained.\n    - Ensure all affected devices are reassigned as needed after calling this endpoint.","operationId":"end_all_device_assignments_api_end_all_device_assignments_post","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/list_device_assignments":{"get":{"tags":["devices"],"summary":"List Device Assignments","description":"Retrieve a list of all device assignments.\n\nThis endpoint fetches all device assignments (active or ended) using the `usp_assign_dev_list` stored procedure. It is useful for auditing or displaying device-entity relationships in the React frontend.\n\nArgs:\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - i_asn_dev (int): Assignment ID.\n        - x_id_dev (str): Device ID.\n        - x_id_ent (str): Entity ID.\n        - i_rsn (int): Assignment reason ID.\n        - d_bgn (datetime): Assignment start date.\n        - d_end (datetime or None): Assignment end date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_device_assignments?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_asn_dev\": 101,\n            \"x_id_dev\": \"TAG001\",\n            \"x_id_ent\": \"ZONE001\",\n            \"i_rsn\": 1,\n            \"d_bgn\": \"2025-04-26T10:00:00\",\n            \"d_end\": null\n        },\n        {\n            \"i_asn_dev\": 102,\n            \"x_id_dev\": \"TAG002\",\n            \"x_id_ent\": \"ZONE002\",\n            \"i_rsn\": 2,\n            \"d_bgn\": \"2025-04-25T09:00:00\",\n            \"d_end\": \"2025-04-26T12:00:00\"\n        }\n    ]\n    ```\n\nUse Case:\n    - Display all active device assignments in the React frontend for administrative oversight.\n    - Generate a report of all assignments, including ended ones, for auditing.\n\nHint:\n    - Set `include_ended=True` to retrieve historical assignments, useful for tracking changes over time.\n    - Cross-reference `x_id_ent` with `/get_entity_by_id/{entity_id}` (from `entity.py`) for entity details.","operationId":"list_device_assignments_api_list_device_assignments_get","parameters":[{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_device_assignments_by_entity/{entity_id}":{"get":{"tags":["devices"],"summary":"List Device Assignments By Entity","description":"Retrieve all device assignments for a specific entity.\n\nThis endpoint fetches assignments where the specified entity (e.g., a zone or person) is associated with devices, using the `usp_assign_dev_list_by_entity` stored procedure. It is used to view all devices linked to an entity.\n\nArgs:\n    entity_id (str): The ID of the entity to filter by (e.g., \"ZONE001\"). Required.\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - i_asn_dev (int): Assignment ID.\n        - x_id_dev (str): Device ID.\n        - x_id_ent (str): Entity ID.\n        - i_rsn (int): Assignment reason ID.\n        - d_bgn (datetime): Assignment start date.\n        - d_end (datetime or None): Assignment end date (null if active).\n\nRaises:\n    None: Returns an empty list if no assignments are found or if an error occurs, preventing frontend crashes.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_device_assignments_by_entity/ZONE001?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_asn_dev\": 101,\n            \"x_id_dev\": \"TAG001\",\n            \"x_id_ent\": \"ZONE001\",\n            \"i_rsn\": 1,\n            \"d_bgn\": \"2025-04-26T10:00:00\",\n            \"d_end\": null\n        }\n    ]\n    ```\n\nUse Case:\n    - List all tags assigned to a zone (\"ZONE001\") in the React frontend for location tracking.\n    - View all beacons assigned to a department entity for maintenance planning.\n\nHint:\n    - Verify the `entity_id` exists using `/get_entity_by_id/{entity_id}` (from `entity.py`) before querying.\n    - The empty list return on error aligns with version 0.1.38 changes to improve frontend compatibility.","operationId":"list_device_assignments_by_entity_api_list_device_assignments_by_entity__entity_id__get","parameters":[{"name":"entity_id","in":"path","required":true,"schema":{"type":"string","title":"Entity Id"}},{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_device_assignments_by_device/{device_id}":{"get":{"tags":["devices"],"summary":"List Device Assignments By Device","description":"Retrieve all assignments for a specific device.\n\nThis endpoint fetches all assignments where the specified device is involved, using the `usp_assign_dev_list_by_id` stored procedure. It is used to view the entities (e.g., zones, people) a device is associated with.\n\nArgs:\n    device_id (str): The ID of the device to filter by (e.g., \"TAG001\"). Required.\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - i_asn_dev (int): Assignment ID.\n        - x_id_dev (str): Device ID.\n        - x_id_ent (str): Entity ID.\n        - i_rsn (int): Assignment reason ID.\n        - d_bgn (datetime): Assignment start date.\n        - d_end (datetime or None): Assignment end date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found for the device.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_device_assignments_by_device/TAG001?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_asn_dev\": 101,\n            \"x_id_dev\": \"TAG001\",\n            \"x_id_ent\": \"ZONE001\",\n            \"i_rsn\": 1,\n            \"d_bgn\": \"2025-04-26T10:00:00\",\n            \"d_end\": null\n        }\n    ]\n    ```\n\nUse Case:\n    - View all zones a tag (\"TAG001\") is assigned to for tracking purposes.\n    - Check the assignment history of a beacon to understand its usage.\n\nHint:\n    - Verify the `device_id` exists using `/get_device_by_id/{device_id}` before querying.\n    - Use `include_ended=True` for historical analysis of the device's assignments.","operationId":"list_device_assignments_by_device_api_list_device_assignments_by_device__device_id__get","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}},{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_device_assignments_by_reason/{reason_id}":{"get":{"tags":["devices"],"summary":"List Device Assignments By Reason","description":"Retrieve all device assignments for a specific reason.\n\nThis endpoint fetches assignments associated with a given reason using the `usp_assign_dev_list_by_reason` stored procedure. It is used to analyze assignments by their purpose, such as tracking or maintenance.\n\nArgs:\n    reason_id (int): The ID of the assignment reason (e.g., 1 for \"Location Tracking\"). Required.\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - i_asn_dev (int): Assignment ID.\n        - x_id_dev (str): Device ID.\n        - x_id_ent (str): Entity ID.\n        - i_rsn (int): Assignment reason ID.\n        - d_bgn (datetime): Assignment start date.\n        - d_end (datetime or None): Assignment end date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found for the reason.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_device_assignments_by_reason/1?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_asn_dev\": 101,\n            \"x_id_dev\": \"TAG001\",\n            \"x_id_ent\": \"ZONE001\",\n            \"i_rsn\": 1,\n            \"d_bgn\": \"2025-04-26T10:00:00\",\n            \"d_end\": null\n        }\n    ]\n    ```\n\nUse Case:\n    - List all assignments with reason \"Location Tracking\" for operational reporting.\n    - Analyze assignments for a specific reason to understand device usage patterns.\n\nHint:\n    - Retrieve valid `reason_id` values from `/list_assignment_reasons` (from `entity.py`) before querying.\n    - Use `include_ended=True` for comprehensive historical analysis.","operationId":"list_device_assignments_by_reason_api_list_device_assignments_by_reason__reason_id__get","parameters":[{"name":"reason_id","in":"path","required":true,"schema":{"type":"integer","title":"Reason Id"}},{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/zone_list":{"get":{"tags":["devices"],"summary":"List Zones","description":"Retrieve a list of all zones in the ParcoRTLS system.\n\nThis endpoint fetches all zones using the `usp_zone_list` stored procedure. It is used to provide a list of zones for assignment, mapping, or display in the React frontend.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing zone details.\n        - i_zn (int): Zone ID.\n        - x_nm_zn (str): Zone name (e.g., \"Main Lobby\").\n        - i_typ_zn (int): Zone type ID.\n        - i_map (int or None): Associated map ID.\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If no zones are found.\n        - 500: If a database error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/zone_list\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_zn\": 1,\n            \"x_nm_zn\": \"Main Lobby\",\n            \"i_typ_zn\": 1,\n            \"i_map\": 101,\n            \"d_crt\": \"2025-04-26T10:00:00\",\n            \"d_udt\": \"2025-04-26T10:00:00\"\n        }\n    ]\n    ```\n\nUse Case:\n    - Populate a dropdown in the React frontend for selecting zones when assigning devices.\n    - Generate a report of all zones for campus planning.\n\nHint:\n    - Use this endpoint to retrieve valid `zone_id` values for `/add_device` or `/edit_device`.\n    - The `i_map` field can be used to link zones to maps in the Build Out Tool.","operationId":"list_zones_api_zone_list_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/zones_with_maps":{"get":{"tags":["devices"],"summary":"Get Zones With Maps","description":"Retrieve all zones with their associated map IDs for the Build Out Tool.\n\nThis endpoint fetches all zones and their map IDs from the `zones` table using a raw SQL query in the `maint` schema. It is specifically designed for the Build Out Tool, which uses this data to associate zones with maps for visualization and configuration in the ParcoRTLS system. The endpoint supports campus planning and zone management by providing essential mapping information for the React frontend running at http://192.168.210.226:3000.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing zone and map details.\n        - i_zn (int): Zone ID (e.g., 1).\n        - x_nm_zn (str): Zone name (e.g., \"Main Lobby\").\n        - i_typ_zn (int): Zone type ID (e.g., 1 for indoor zone).\n        - i_map (int or None): Associated map ID (e.g., 101 for a specific map).\n\nRaises:\n    HTTPException:\n        - 404: If no zones are found in the database.\n        - 500: If a database error or unexpected error occurs during the query.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/zones_with_maps\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_zn\": 1,\n            \"x_nm_zn\": \"Main Lobby\",\n            \"i_typ_zn\": 1,\n            \"i_map\": 101\n        },\n        {\n            \"i_zn\": 2,\n            \"x_nm_zn\": \"Ward A\",\n            \"i_typ_zn\": 2,\n            \"i_map\": 102\n        }\n    ]\n    ```\n\nUse Case:\n    - Populate the Build Out Tool in the React frontend with zone and map associations for configuring campus layouts.\n    - Generate a report of all zones and their map IDs for planning Zone L1 campus expansions.\n    - Support zone visualization in the frontend by linking zones to their respective maps.\n\nHint:\n    - Use this endpoint in conjunction with `/zone_list` to get additional zone details like creation and update dates.\n    - The `i_map` field links to map data; ensure maps are configured in the system to utilize this data effectively.\n    - For Zone L1 campuses, this endpoint helps verify zone-map associations for accurate device tracking.\n    - Log errors are captured for debugging; check logs at `/var/log` if a 500 error occurs.","operationId":"get_zones_with_maps_api_zones_with_maps_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/fire_trigger/{trigger_name}":{"post":{"tags":["triggers"],"summary":"Fire Trigger","description":"Fire a trigger event by its name, publishing an MQTT message to notify the ParcoRTLS system.\n\nThis endpoint triggers an event for a specified trigger, identified by its name, ensuring it is linked to a valid region in the ParcoRTLS system. It publishes the trigger event to an MQTT topic, which can be subscribed to by other system components (e.g., for real-time alerts or actions).\n\nArgs:\n    trigger_name (str): The name of the trigger to fire (path parameter, required).\n\nReturns:\n    dict: A JSON response containing:\n        - message (str): Confirmation message indicating the trigger was fired.\n        - trigger_id (int): The ID of the fired trigger.\n\nRaises:\n    HTTPException:\n        - 404: If the trigger name is not found in the database.\n        - 400: If the trigger has no valid region assigned.\n        - 500: For database errors or unexpected issues during execution.\n\nExample:\n    To fire a trigger named \"EntryGate\":\n    ```\n    curl -X POST http://192.168.210.226:8000/fire_trigger/EntryGate\n    ```\n    Response:\n    ```json\n    {\n        \"message\": \"Trigger EntryGate fired successfully\",\n        \"trigger_id\": 123\n    }\n    ```\n\nUse Case:\n    This endpoint is used in scenarios where an external system or user action needs to manually trigger an event in the ParcoRTLS system. For example, firing a trigger when a gate is opened to log the event or notify security systems via MQTT.\n\nHint:\n    Ensure the MQTT broker (configured via MQTT_BROKER) is running and accessible at the specified hostname. Check the trigger name in the database (maint.triggers table, column x_nm_trg) to avoid 404 errors. This endpoint is useful for testing trigger integrations or simulating events.","operationId":"fire_trigger_api_fire_trigger__trigger_name__post","parameters":[{"name":"trigger_name","in":"path","required":true,"schema":{"type":"string","title":"Trigger Name"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/add_trigger":{"post":{"tags":["triggers"],"summary":"Add Trigger","description":"Add a new trigger to the ParcoRTLS system and assign it to a region with vertices. (if applicable).\nArgs:\n    request (TriggerAddRequest): A Pydantic model containing:\n        - direction (int): The trigger direction ID (required).\n        - name (str): The name of the trigger (required, must be unique).\n        - ignore (bool): Whether to ignore the trigger (required).\n        - zone_id (int): The ID of the zone to associate the trigger with.\n        - vertices (list[dict], optional): List of vertex dictionaries with x, y, z coordinates.\n\nThis endpoint creates a new trigger with the specified properties, assigns it to a zone, and defines its region using provided or default vertices. It ensures the trigger’s region is contained within the zone’s boundaries (for non-portable triggers) and stores the region and vertices in the database.\n\nArgs:\n    request (TriggerAddRequest): A Pydantic model containing:\n        - direction (int): The trigger direction ID (required, references tlktrigdirections table).\n        - name (str): The name of the trigger (required, must be unique).\n        - ignore (bool): Whether to ignore the trigger for certain operations (required).\n        - zone_id (int): The ID of the zone to associate the trigger with (required).\n        - vertices (list[dict], optional): List of vertex dictionaries with x, y, z coordinates (e.g., [{\"x\": 0.0, \"y\": 0.0, \"z\": 0.0}, ...]). Must have at least 3 vertices if provided.\n\nReturns:\n    dict: A JSON response containing:\n        - message (str): Status message indicating success or partial success (e.g., trigger added but region not assigned).\n        - trigger_id (int): The ID of the newly created trigger.\n        - region_id (int, optional): The ID of the assigned region, if created.\n\nRaises:\n    HTTPException:\n        - 400: If zone_id is missing, the trigger name already exists, vertices are insufficient, or the trigger region is not contained within the zone.\n        - 404: If no region is found for the zone.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To add a trigger named \"DoorSensor\" in zone 417 with custom vertices:\n    ```\n    curl -X POST http://192.168.210.226:8000/add_trigger              -H \"Content-Type: application/json\"              -d '{\n             \"direction\": 1,\n             \"name\": \"DoorSensor\",\n             \"ignore\": false,\n             \"zone_id\": 417,\n             \"vertices\": [\n                 {\"x\": 0.0, \"y\": 0.0, \"z\": 0.0},\n                 {\"x\": 5.0, \"y\": 0.0, \"z\": 0.0},\n                 {\"x\": 0.0, \"y\": 5.0, \"z\": 0.0}\n             ]\n         }'\n    ```\n    Response:\n    ```json\n    {\n        \"message\": \"Trigger added successfully and assigned to a region\",\n        \"trigger_id\": 124,\n        \"region_id\": 567\n    }\n    ```\n\nUse Case:\n    This endpoint is used when setting up new triggers in the ParcoRTLS system, such as defining a trigger for a specific area (e.g., a doorway) within a zone (e.g., a building). For example, a trigger can be added to detect when a tag enters a restricted area, with vertices defining the exact region.\n\nHint:\n    - Ensure the zone_id exists in the zones table (maint.zones, column i_zn) and has a valid region with at least 3 vertices.\n    - If vertices are not provided, a default triangular region is used, which may not suit all use cases. Provide custom vertices for precise trigger regions.\n    - Check the tlktrigdirections table for valid direction IDs.\n    - For non-portable triggers, the region must be fully contained within the zone’s bounding box to avoid a 400 error.","operationId":"add_trigger_api_add_trigger_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerAddRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_trigger/{trigger_id}":{"delete":{"tags":["triggers"],"summary":"Delete Trigger","description":"Delete a trigger by its ID, removing associated regions and vertices.\n\nThis endpoint deletes a trigger from the ParcoRTLS system, ensuring that any associated regions and vertices are also removed to maintain database consistency. It checks for the existence of the trigger and handles cases where the trigger or its region does not exist.\n\nArgs:\n    trigger_id (int): The ID of the trigger to delete (path parameter, required).\n\nReturns:\n    dict: A JSON response containing:\n        - message (str): Confirmation message indicating whether the trigger was deleted or did not exist.\n\nRaises:\n    HTTPException:\n        - 500: For database errors or unexpected issues during deletion.\n\nExample:\n    To delete a trigger with ID 123:\n    ```\n    curl -X DELETE http://192.168.210.226:8000/delete_trigger/123\n    ```\n    Response:\n    ```json\n    {\n        \"message\": \"Trigger 123 deleted successfully\"\n    }\n    ```\n\nUse Case:\n    This endpoint is used when removing obsolete or incorrectly configured triggers from the system, such as when a physical trigger area (e.g., a doorway sensor) is no longer needed or was set up incorrectly.\n\nHint:\n    - Verify the trigger_id exists in the triggers table (maint.triggers, column i_trg) to avoid unnecessary calls.\n    - The endpoint safely handles cases where the trigger or its region does not exist, returning an appropriate message.\n    - Ensure database permissions allow deletion of triggers, regions, and vertices.","operationId":"delete_trigger_api_delete_trigger__trigger_id__delete","parameters":[{"name":"trigger_id","in":"path","required":true,"schema":{"type":"integer","title":"Trigger Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_triggers":{"get":{"tags":["triggers"],"summary":"List Triggers","description":"List all triggers in the ParcoRTLS system.\n\nThis endpoint retrieves a list of all triggers stored in the database, including their IDs, names, and other attributes. It is useful for auditing or displaying available triggers in the system.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing trigger details (e.g., i_trg, x_nm_trg, i_dir, f_ign).\n\nRaises:\n    HTTPException:\n        - 404: If no triggers are found in the database.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To list all triggers:\n    ```\n    curl -X GET http://192.168.210.226:8000/list_triggers\n    ```\n    Response:\n    ```json\n    [\n        {\"i_trg\": 123, \"x_nm_trg\": \"EntryGate\", \"i_dir\": 1, \"f_ign\": false},\n        {\"i_trg\": 124, \"x_nm_trg\": \"DoorSensor\", \"i_dir\": 2, \"f_ign\": true}\n    ]\n    ```\n\nUse Case:\n    This endpoint is used by administrators or developers to retrieve a complete list of triggers for system monitoring, debugging, or integration with the React frontend to display trigger information.\n\nHint:\n    - The response format depends on the usp_trigger_list stored procedure output. Check the maint.triggers table schema for exact fields.\n    - Use this endpoint sparingly in high-traffic systems, as it retrieves all triggers.","operationId":"list_triggers_api_list_triggers_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/list_newtriggers":{"get":{"tags":["triggers"],"summary":"List Newtriggers","description":"List all triggers with associated zone information (experimental).\n\nThis endpoint retrieves all triggers and enriches them with zone IDs and names by joining the triggers, regions, and zones tables. It is an experimental endpoint designed for enhanced trigger management in the ParcoRTLS system.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing:\n        - i_trg (int): Trigger ID.\n        - x_nm_trg (str): Trigger name.\n        - Other trigger fields (from usp_trigger_list).\n        - zone_id (int or None): Associated zone ID, if any.\n        - zone_name (str or None): Associated zone name, if any.\n\nRaises:\n    HTTPException:\n        - 404: If no triggers are found.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To list all triggers with zone information:\n    ```\n    curl -X GET http://192.168.210.226:8000/list_newtriggers\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_trg\": 123,\n            \"x_nm_trg\": \"EntryGate\",\n            \"i_dir\": 1,\n            \"f_ign\": false,\n            \"zone_id\": 417,\n            \"zone_name\": \"2303251508CL1\"\n        },\n        {\n            \"i_trg\": 124,\n            \"x_nm_trg\": \"DoorSensor\",\n            \"i_dir\": 2,\n            \"f_ign\": true,\n            \"zone_id\": null,\n            \"zone_name\": null\n        }\n    ]\n    ```\n\nUse Case:\n    This endpoint is useful for generating reports or visualizations in the React frontend that show triggers alongside their associated zones, such as mapping triggers to specific buildings or areas.\n\nHint:\n    - This is an experimental endpoint; verify its stability before production use.\n    - Triggers without associated regions will have null zone_id and zone_name.\n    - Use the zone_id to fetch additional zone details via other endpoints (e.g., /get_zone_vertices).","operationId":"list_newtriggers_api_list_newtriggers_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/list_trigger_directions":{"get":{"tags":["triggers"],"summary":"List Trigger Directions","description":"List all available trigger directions in the ParcoRTLS system.\n\nThis endpoint retrieves a list of all trigger direction types (e.g., entry, exit) defined in the database, which are used to categorize triggers based on the direction of movement they detect.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing:\n        - i_dir (int): Direction ID.\n        - x_dir (str): Direction name (e.g., \"Entry\", \"Exit\").\n\nRaises:\n    HTTPException:\n        - 404: If no trigger directions are found.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To list all trigger directions:\n    ```\n    curl -X GET http://192.168.210.226:8000/list_trigger_directions\n    ```\n    Response:\n    ```json\n    [\n        {\"i_dir\": 1, \"x_dir\": \"Entry\"},\n        {\"i_dir\": 2, \"x_dir\": \"Exit\"}\n    ]\n    ```\n\nUse Case:\n    This endpoint is used when configuring new triggers (e.g., via /add_trigger) to select a valid direction ID. It can also be used in the React frontend to populate dropdown menus for trigger direction selection.\n\nHint:\n    - Check the tlktrigdirections table (maint.tlktrigdirections) for the full list of direction IDs and names.\n    - Cache the results in the frontend if frequently accessed to reduce database load.","operationId":"list_trigger_directions_api_list_trigger_directions_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_trigger_details/{trigger_id}":{"get":{"tags":["triggers"],"summary":"Get Trigger Details","description":"Fetch details of a specific trigger, including its region vertices.\n\nThis endpoint retrieves the vertices defining the region associated with a given trigger, allowing developers to understand the trigger’s spatial boundaries in the ParcoRTLS system.\n\nArgs:\n    trigger_id (int): The ID of the trigger to fetch details for (path parameter, required).\n\nReturns:\n    dict: A JSON response containing:\n        - vertices (list): List of dictionaries with vertex details (x, y, z, n_ord).\n\nRaises:\n    HTTPException:\n        - 404: If no region is found for the trigger.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To fetch details for trigger ID 123:\n    ```\n    curl -X GET http://192.168.210.226:8000/get_trigger_details/123\n    ```\n    Response:\n    ```json\n    {\n        \"vertices\": [\n            {\"x\": 0.0, \"y\": 0.0, \"z\": 0.0, \"n_ord\": 1},\n            {\"x\": 5.0, \"y\": 0.0, \"z\": 0.0, \"n_ord\": 2},\n            {\"x\": 0.0, \"y\": 5.0, \"z\": 0.0, \"n_ord\": 3}\n        ]\n    }\n    ```\n\nUse Case:\n    This endpoint is used to retrieve the exact geometry of a trigger’s region for visualization in the React frontend (e.g., rendering the trigger area on a map) or for debugging trigger configurations.\n\nHint:\n    - Ensure the trigger has an associated region (maint.regions, i_trg = trigger_id) to avoid a 404 error.\n    - The n_ord field indicates the order of vertices, which is important for rendering polygons correctly.","operationId":"get_trigger_details_api_get_trigger_details__trigger_id__get","parameters":[{"name":"trigger_id","in":"path","required":true,"schema":{"type":"integer","title":"Trigger Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/move_trigger/{trigger_id}":{"put":{"tags":["triggers"],"summary":"Move Trigger","description":"Move a trigger to a new position in the ParcoRTLS system.\n\nThis endpoint updates the position of a trigger by modifying its coordinates (x, y, z) in the database, typically used for adjusting the location of portable triggers or correcting trigger placements.\n\nArgs:\n    trigger_id (int): The ID of the trigger to move (path parameter, required).\n    new_x (float): The new x-coordinate (query parameter, required).\n    new_y (float): The new y-coordinate (query parameter, required).\n    new_z (float): The new z-coordinate (query parameter, required).\n\nReturns:\n    dict: A JSON response containing:\n        - message (str): Confirmation message indicating the trigger was moved.\n\nRaises:\n    HTTPException:\n        - 500: For database errors, failure to move the trigger, or unexpected issues.\n\nExample:\n    To move trigger ID 123 to position (10.0, 20.0, 0.0):\n    ```\n    curl -X PUT \"http://192.168.210.226:8000/move_trigger/123?new_x=10.0&new_y=20.0&new_z=0.0\"\n    ```\n    Response:\n    ```json\n    {\n        \"message\": \"Trigger 123 moved by (10.0, 20.0, 0.0)\"\n    }\n    ```\n\nUse Case:\n    This endpoint is used to reposition triggers, such as when a portable trigger’s associated tag moves or when a trigger’s initial placement needs correction (e.g., aligning with a new doorway location).\n\nHint:\n    - Verify the trigger_id exists and is movable (e.g., check is_portable in maint.triggers).\n    - The usp_trigger_move stored procedure handles the actual coordinate update; ensure it is correctly implemented.\n    - Coordinates should be within the zone’s boundaries for non-portable triggers to avoid logical errors.","operationId":"move_trigger_api_move_trigger__trigger_id__put","parameters":[{"name":"trigger_id","in":"path","required":true,"schema":{"type":"integer","title":"Trigger Id"}},{"name":"new_x","in":"query","required":true,"schema":{"type":"number","title":"New X"}},{"name":"new_y","in":"query","required":true,"schema":{"type":"number","title":"New Y"}},{"name":"new_z","in":"query","required":true,"schema":{"type":"number","title":"New Z"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_trigger_state/{trigger_id}/{device_id}":{"get":{"tags":["triggers"],"summary":"Get Trigger State","description":"Fetch the last known state of a device for a given trigger.\n\nThis endpoint retrieves the most recent state (e.g., inside or outside) of a device (identified by device_id) relative to a specific trigger’s region, useful for tracking device interactions with trigger areas.\n\nArgs:\n    trigger_id (int): The ID of the trigger (path parameter, required).\n    device_id (str): The ID of the device (path parameter, required).\n\nReturns:\n    dict: A JSON response containing:\n        - trigger_id (int): The ID of the trigger.\n        - device_id (str): The ID of the device.\n        - last_state (str): The last known state (e.g., \"inside\", \"outside\").\n\nRaises:\n    HTTPException:\n        - 404: If no state data is found for the trigger and device.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To fetch the state of device \"TAG001\" for trigger ID 123:\n    ```\n    curl -X GET http://192.168.210.226:8000/get_trigger_state/123/TAG001\n    ```\n    Response:\n    ```json\n    {\n        \"trigger_id\": 123,\n        \"device_id\": \"TAG001\",\n        \"last_state\": \"inside\"\n    }\n    ```\n\nUse Case:\n    This endpoint is used to monitor whether a device (e.g., a tag on a person or asset) is currently within a trigger’s region, such as checking if a worker is in a restricted area.\n\nHint:\n    - Ensure the trigger_id and device_id exist in the trigger_states table (maint.trigger_states).\n    - The last_state value depends on the system’s state tracking logic; verify the trigger_states table schema.\n    - Use this endpoint in conjunction with /trigger_contains_point for real-time position checks.","operationId":"get_trigger_state_api_get_trigger_state__trigger_id___device_id__get","parameters":[{"name":"trigger_id","in":"path","required":true,"schema":{"type":"integer","title":"Trigger Id"}},{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_triggers_by_point":{"get":{"tags":["triggers"],"summary":"Get Triggers By Point","description":"Fetch triggers whose regions contain the specified point coordinates.\n\nThis endpoint identifies triggers whose associated regions (defined by vertices) include the given (x, y, z) point. It is used to determine which triggers a device at a specific location might activate.\n\nArgs:\n    x (float): The x-coordinate of the point (query parameter, required).\n    y (float): The y-coordinate of the point (query parameter, required).\n    z (float): The z-coordinate of the point (query parameter, required).\n\nReturns:\n    list: A list of dictionaries, each containing:\n        - i_trg (int): Trigger ID.\n        - x_nm_trg (str): Trigger name.\n        - i_dir (int): Direction ID.\n        - f_ign (bool): Ignore flag.\n        - i_rgn (int): Region ID.\n        - n_x (float): Vertex x-coordinate.\n        - n_y (float): Vertex y-coordinate.\n        - n_z (float): Vertex z-coordinate.\n\nRaises:\n    HTTPException:\n        - 404: If no triggers are found for the point.\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To fetch triggers for point (0.0, 0.0, 0.0):\n    ```\n    curl -X GET \"http://192.168.210.226:8000/get_triggers_by_point?x=0.0&y=0.0&z=0.0\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"i_trg\": 123,\n            \"x_nm_trg\": \"EntryGate\",\n            \"i_dir\": 1,\n            \"f_ign\": false,\n            \"i_rgn\": 567,\n            \"n_x\": 0.0,\n            \"n_y\": 0.0,\n            \"n_z\": 0.0\n        }\n    ]\n    ```\n\nUse Case:\n    This endpoint is used to check which triggers a device at a specific location might interact with, such as determining if a tag is within a trigger region for access control or alerts.\n\nHint:\n    - The query checks exact vertex matches, which may not always return expected results for regions. Consider using /trigger_contains_point for more accurate containment checks.\n    - Ensure the point coordinates are within the system’s coordinate system (e.g., matching the units used in maint.vertices).","operationId":"get_triggers_by_point_api_get_triggers_by_point_get","parameters":[{"name":"x","in":"query","required":true,"schema":{"type":"number","title":"X"}},{"name":"y","in":"query","required":true,"schema":{"type":"number","title":"Y"}},{"name":"z","in":"query","required":true,"schema":{"type":"number","title":"Z"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_triggers_by_zone/{zone_id}":{"get":{"tags":["triggers"],"summary":"Get Triggers By Zone","description":"Fetch all triggers associated with a given zone, including direction names.\n\nThis endpoint retrieves all triggers linked to a specific zone, along with their direction names, to provide a comprehensive view of triggers within a zone (e.g., a building or area).\n\nArgs:\n    zone_id (int): The ID of the zone to fetch triggers for (path parameter, required).\n\nReturns:\n    list: A list of dictionaries, each containing:\n        - trigger_id (int): Trigger ID.\n        - name (str): Trigger name.\n        - direction_name (str): Name of the trigger direction (e.g., \"Entry\").\n        - zone_id (int): Zone ID.\n\nRaises:\n    HTTPException:\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To fetch triggers for zone ID 417:\n    ```\n    curl -X GET http://192.168.210.226:8000/get_triggers_by_zone/417\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"trigger_id\": 123,\n            \"name\": \"EntryGate\",\n            \"direction_name\": \"Entry\",\n            \"zone_id\": 417\n        }\n    ]\n    ```\n\nUse Case:\n    This endpoint is used to list all triggers in a specific zone for display in the React frontend or for zone-specific trigger management, such as configuring alerts for a building.\n\nHint:\n    - Ensure the zone_id exists in the zones table (maint.zones, i_zn).\n    - The direction_name comes from the tlktrigdirections table; verify its data for accuracy.\n    - An empty list is returned if no triggers are found, which is valid and does not raise an error.","operationId":"get_triggers_by_zone_api_get_triggers_by_zone__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_triggers_by_zone_with_id/{zone_id}":{"get":{"tags":["triggers"],"summary":"Get Triggers By Zone With Id","description":"Fetch all triggers for a given zone, including direction IDs and portable trigger details.\n\nThis endpoint retrieves triggers associated with a zone, including their direction IDs and attributes specific to portable triggers (e.g., radius, z bounds). It supports both portable and non-portable triggers.\n\nArgs:\n    zone_id (int): The ID of the zone to fetch triggers for (path parameter, required).\n\nReturns:\n    list: A list of dictionaries, each containing:\n        - trigger_id (int): Trigger ID.\n        - name (str): Trigger name.\n        - direction_id (int): Direction ID.\n        - zone_id (int): Zone ID.\n        - is_portable (bool): Whether the trigger is portable.\n        - assigned_tag_id (str or None): ID of the assigned tag (for portable triggers).\n        - radius_ft (float or None): Radius in feet (for portable triggers).\n        - z_min (float or None): Minimum z-coordinate (for portable triggers).\n        - z_max (float or None): Maximum z-coordinate (for portable triggers).\n\nRaises:\n    HTTPException:\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To fetch triggers for zone ID 417:\n    ```\n    curl -X GET http://192.168.210.226:8000/get_triggers_by_zone_with_id/417\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"trigger_id\": 123,\n            \"name\": \"EntryGate\",\n            \"direction_id\": 1,\n            \"zone_id\": 417,\n            \"is_portable\": false,\n            \"assigned_tag_id\": null,\n            \"radius_ft\": null,\n            \"z_min\": null,\n            \"z_max\": null\n        }\n    ]\n    ```\n\nUse Case:\n    This endpoint is used to retrieve detailed trigger information for a zone, including portable trigger specifics, for advanced trigger management or integration with real-time tracking systems.\n\nHint:\n    - Portable triggers may not have a region (i_zn from triggers table is used instead of regions.i_zn).\n    - An empty list is returned if no triggers are found, which is valid.\n    - Use this endpoint when you need direction_id instead of direction_name (unlike /get_triggers_by_zone).","operationId":"get_triggers_by_zone_with_id_api_get_triggers_by_zone_with_id__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/trigger_contains_point/{trigger_id}":{"get":{"tags":["triggers"],"summary":"Trigger Contains Point","description":"Check if a point is within a trigger’s region (2D or 3D).\n\nThis endpoint determines whether a given point (x, y, z) is contained within the region of a specified trigger, supporting both portable (radius-based) and non-portable (vertex-based) triggers. For 2D checks, z can be omitted.\n\nArgs:\n    trigger_id (int): The ID of the trigger to check (path parameter, required).\n    x (float): The x-coordinate of the point (query parameter, required).\n    y (float): The y-coordinate of the point (query parameter, required).\n    z (float, optional): The z-coordinate of the point (query parameter, optional for 2D checks).\n\nReturns:\n    dict: A JSON response containing:\n        - contains (bool): True if the point is within the trigger’s region, False otherwise.\n\nRaises:\n    HTTPException:\n        - 404: If the trigger or its region/tag position is not found.\n        - 400: If a portable trigger is missing required attributes (radius, z bounds) or the region has insufficient vertices.\n        - 500: For database errors or unexpected issues.","operationId":"trigger_contains_point_api_trigger_contains_point__trigger_id__get","parameters":[{"name":"trigger_id","in":"path","required":true,"schema":{"type":"integer","title":"Trigger Id"}},{"name":"x","in":"query","required":true,"schema":{"type":"number","title":"X"}},{"name":"y","in":"query","required":true,"schema":{"type":"number","title":"Y"}},{"name":"z","in":"query","required":false,"schema":{"type":"number","title":"Z"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/zones_by_point":{"get":{"tags":["triggers"],"summary":"Zones By Point","description":"Fetch zones that may contain a given point (x, y, z) based on their bounding box.\n\nThis endpoint retrieves zones whose bounding boxes (defined by regions) contain the specified\npoint coordinates. It supports filtering by zone type (e.g., zone_type=1 for Level 1 zones,\ntypically campuses). The response includes whether the point is definitively within the zone's\nbounding box.\n\nArgs:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    z (float): The z-coordinate of the point.\n    zone_type (int, optional): Filter by zone type (e.g., 1 for Level 1 zones). Defaults to 0 (no filter).\n\nReturns:\n    list: A list of dictionaries containing:\n        - zone_id (int): The ID of the zone.\n        - zone_name (str): The name of the zone.\n        - contains (bool): True if the point is within the zone's bounding box, False otherwise.\n\nRaises:\n    HTTPException: 500 if the database query fails.\n\nExample:\n    To check if a point (x=0, y=0, z=0) is within any Level 1 zones (campuses):\n    ```\n    GET /api/zones_by_point?x=0&y=0&z=0&zone_type=1\n    ```\n    Response:\n    ```json\n    [\n        {\"zone_id\": 417, \"zone_name\": \"2303251508CL1\", \"contains\": true},\n        {\"zone_id\": 419, \"zone_name\": \"ib2503251653cl1\", \"contains\": true}\n    ]\n    ```\n\nHint (Use Case):\n    This endpoint can be used to answer questions like \"is a tag on campus?\" where the tag is identified\n    by a tag number (e.g., 'TAG001') and the campus is a bounding box created with a Zone L1 associated\n    with a map. To use it for this purpose:\n    1. Fetch the tag's position (x, y, z) using `/api/get_recent_device_positions/{device_id}`.\n    2. Call this endpoint with the tag's coordinates and `zone_type=1` to filter for Level 1 zones (campuses).\n    3. Check the response to see if the specific campus (by zone_id) contains the tag.\n    Example: If checking if 'TAG001' is on campus with zone_id=417, fetch its position, then call this endpoint\n    and look for zone_id=417 in the response with `\"contains\": true`.","operationId":"zones_by_point_api_zones_by_point_get","parameters":[{"name":"x","in":"query","required":true,"schema":{"type":"number","title":"X"}},{"name":"y","in":"query","required":true,"schema":{"type":"number","title":"Y"}},{"name":"z","in":"query","required":true,"schema":{"type":"number","title":"Z"}},{"name":"zone_type","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Zone Type"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/triggers_by_point":{"get":{"tags":["triggers"],"summary":"Triggers By Point","description":"Fetch triggers whose regions may contain a given point (x, y, z).\n\nThis endpoint identifies triggers (both portable and non-portable) whose regions or bounding areas contain the specified point coordinates. It checks portable triggers using their radius and z bounds and non-portable triggers using their region vertices.\n\nArgs:\n    x (float): The x-coordinate of the point (query parameter, required).\n    y (float): The y-coordinate of the point (query parameter, required).\n    z (float): The z-coordinate of the point (query parameter, required).\n\nReturns:\n    list: A list of dictionaries, each containing:\n        - trigger_id (int): Trigger ID.\n        - name (str): Trigger name.\n        - contains (bool): True if the point is within the trigger’s region, False otherwise.\n\nRaises:\n    HTTPException:\n        - 500: For database errors or unexpected issues.\n\nExample:\n    To fetch triggers for point (0.0, 0.0, 0.0):\n    ```\n    curl -X GET \"http://192.168.210.226:8000/triggers_by_point?x=0.0&y=0.0&z=0.0\"\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"trigger_id\": 123,\n            \"name\": \"EntryGate\",\n            \"contains\": true\n        }\n    ]\n    ```\n\nUse Case:\n    This endpoint is used to determine which triggers a device at a specific location might activate, such as checking if a tag is within multiple trigger regions for access control or safety alerts.\n\nHint:\n    - For portable triggers, ensure the assigned_tag_id has recent position data (hist_r.positionhistory).\n    - Non-portable triggers require at least 3 vertices for valid containment checks.\n    - Use this endpoint with /get_recent_device_positions to check real-time tag positions against multiple triggers.\n    - The containment check is more precise than /get_triggers_by_point, as it evaluates the full region geometry.","operationId":"triggers_by_point_api_triggers_by_point_get","parameters":[{"name":"x","in":"query","required":true,"schema":{"type":"number","title":"X"}},{"name":"y","in":"query","required":true,"schema":{"type":"number","title":"Y"}},{"name":"z","in":"query","required":true,"schema":{"type":"number","title":"Z"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_zone_vertices/{zone_id}":{"get":{"tags":["zones"],"summary":"Get Zone Vertices","description":"Fetch vertices for a selected zone to draw its boundary.\n\nThis endpoint retrieves the vertices (coordinates) that define the boundary of a specified zone, using the `usp_zone_vertices_select_by_zone` stored procedure. In the ParcoRTLS system, these vertices are used to render the polygon shape of a zone on a map in the Zone Viewer, enabling visualization of zone boundaries for navigation or device tracking.\n\nParameters:\n    zone_id (int, required): The ID of the zone (`i_zn`) whose vertices are to be retrieved.\n\nReturns:\n    dict: A JSON object with a single key \"vertices\" containing a list of dictionaries. Each dictionary represents a vertex with fields returned by the stored procedure, typically:\n        - i_vtx (int): The vertex ID.\n        - i_rgn (int): The region ID associated with the vertex.\n        - n_x (float): The x-coordinate.\n        - n_y (float): The y-coordinate.\n        - n_z (float): The z-coordinate (may be null for 2D zones).\n        - n_ord (int): The order of the vertex in the boundary.\n    Example: {\"vertices\": [{\"i_vtx\": 1, \"i_rgn\": 10, \"n_x\": 0.0, \"n_y\": 0.0, \"n_z\": 0.0, \"n_ord\": 1}, ...]}\n\nRaises:\n    HTTPException:\n        - 404: If no vertices are found for the specified `zone_id`.\n        - 500: If an unexpected error occurs during stored procedure execution.\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_zone_vertices/5\" -H \"accept: application/json\"\n    ```\n    Response:\n    ```json\n    {\n        \"vertices\": [\n            {\"i_vtx\": 1, \"i_rgn\": 10, \"n_x\": 0.0, \"n_y\": 0.0, \"n_z\": 0.0, \"n_ord\": 1},\n            {\"i_vtx\": 2, \"i_rgn\": 10, \"n_x\": 10.0, \"n_y\": 0.0, \"n_z\": 0.0, \"n_ord\": 2},\n            {\"i_vtx\": 3, \"i_rgn\": 10, \"n_x\": 10.0, \"n_y\": 10.0, \"n_z\": 0.0, \"n_ord\": 3}\n        ]\n    }\n    ```\n\nUse Case:\n    - **Zone Boundary Rendering**: The frontend uses this endpoint to fetch vertex coordinates and draw the polygon shape of a zone on a map, helping users visualize the spatial extent of a zone (e.g., a room or building).\n    - **Tag Location Validation**: Combine with `/triggers_by_point` to check if a tag's coordinates fall within a zone's boundary for real-time location tracking.\n\nHint:\n    - For zones of type `i_typ_zn=1` (Campus), these vertices can be used to determine if a tag is on a campus by checking if its coordinates lie within the polygon.\n    - The `n_ord` field indicates the order of vertices, which is critical for correctly drawing the polygon; ensure the frontend respects this order.","operationId":"get_zone_vertices_api_get_zone_vertices__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_parents":{"get":{"tags":["zones"],"summary":"Get Parents","description":"Fetch all top-level parent zones from the ParcoRTLSMaint database.\n\nThis endpoint retrieves zones that have no parent zone (i.e., `i_pnt_zn IS NULL`), representing the highest level in the zone hierarchy, such as campuses in the ParcoRTLS system. These zones are typically used as the root nodes for building zone hierarchies in the frontend Zone Viewer or for initializing zone selection in administrative interfaces.\n\nParameters:\n    None\n\nReturns:\n    dict: A JSON object with a single key \"parents\" containing a list of dictionaries. Each dictionary represents a parent zone with the following fields:\n        - i_zn (int): The unique zone ID.\n        - i_typ_zn (int): The zone type ID (e.g., 1 for Campus).\n        - x_nm_zn (str): The name of the zone.\n    Example: {\"parents\": [{\"i_zn\": 1, \"i_typ_zn\": 1, \"x_nm_zn\": \"Main Campus\"}, ...]}\n\nRaises:\n    HTTPException:\n        - 500: If an unexpected error occurs during database query execution (e.g., database connectivity issues).\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_parents\" -H \"accept: application/json\"\n    ```\n    Response:\n    ```json\n    {\n        \"parents\": [\n            {\"i_zn\": 1, \"i_typ_zn\": 1, \"x_nm_zn\": \"Main Campus\"},\n            {\"i_zn\": 2, \"i_typ_zn\": 1, \"x_nm_zn\": \"West Campus\"}\n        ]\n    }\n    ```\n\nUse Case:\n    - **Zone Hierarchy Initialization**: The frontend React app (running at http://192.168.210.226:3000) calls this endpoint to populate a dropdown or tree view with top-level zones (e.g., campuses) when a user starts configuring zones or viewing zone maps.\n    - **Administrative Dashboard**: An admin uses this endpoint to select a parent zone before adding child zones or assigning devices to a campus-level zone.\n\nHint:\n    - This endpoint is useful for identifying zones of type `i_typ_zn=1` (Campus), which can be used to check if a tag is located within a campus boundary by combining with `/get_zone_vertices/{zone_id}` to fetch boundary coordinates.\n    - Ensure CORS is configured in `app.py` to allow requests from the React frontend.","operationId":"get_parents_api_get_parents_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_children/{parent_id}":{"get":{"tags":["zones"],"summary":"Get Children","description":"Fetch all child zones of a specified parent zone.\n\nThis endpoint retrieves all zones that have the specified `parent_id` as their parent zone (`i_pnt_zn`), allowing the construction of a zone hierarchy below a given parent zone. In the ParcoRTLS system, this is used to display sub-zones (e.g., buildings, floors, or rooms) under a parent zone like a campus or building in the Zone Viewer.\n\nParameters:\n    parent_id (int, required): The ID of the parent zone (`i_zn`) whose child zones are to be retrieved.\n\nReturns:\n    dict: A JSON object with a single key \"children\" containing a list of child zone dictionaries. Each dictionary includes fields returned by the `usp_zone_children_select` stored procedure, typically:\n        - i_zn (int): The unique zone ID.\n        - x_nm_zn (str): The name of the zone.\n        - i_typ_zn (int): The zone type ID.\n        - i_pnt_zn (int): The parent zone ID.\n    Example: {\"children\": [{\"i_zn\": 3, \"x_nm_zn\": \"Building A\", \"i_typ_zn\": 2, \"i_pnt_zn\": 1}, ...]}\n    If no children are found, returns {\"children\": []}.\n\nRaises:\n    HTTPException:\n        - 404: If no child zones are found for the specified `parent_id` (handled by returning an empty list).\n        - 500: If an unexpected error occurs during stored procedure execution.\n        - Custom status codes: If a `DatabaseError` occurs, the status code from the error is used (e.g., 400 for invalid input).\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_children/1\" -H \"accept: application/json\"\n    ```\n    Response:\n    ```json\n    {\n        \"children\": [\n            {\"i_zn\": 3, \"x_nm_zn\": \"Building A\", \"i_typ_zn\": 2, \"i_pnt_zn\": 1},\n            {\"i_zn\": 4, \"x_nm_zn\": \"Building B\", \"i_typ_zn\": 2, \"i_pnt_zn\": 1}\n        ]\n    }\n    ```\n\nUse Case:\n    - **Zone Hierarchy Navigation**: The frontend uses this endpoint to expand a parent zone in a tree view, showing its child zones (e.g., buildings under a campus or rooms under a floor).\n    - **Zone Configuration**: An admin calls this endpoint to list child zones when assigning devices or triggers to specific sub-zones within a parent zone.\n\nHint:\n    - Combine this endpoint with `/get_zone_vertices/{zone_id}` to fetch the boundaries of child zones for rendering on a map.\n    - If the stored procedure `usp_zone_children_select` returns a string, it is JSON-parsed, which may indicate legacy behavior; verify the stored procedure output format in the database schema.","operationId":"get_children_api_get_children__parent_id__get","parameters":[{"name":"parent_id","in":"path","required":true,"schema":{"type":"integer","title":"Parent Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_map/{zone_id}":{"head":{"tags":["zones"],"summary":"Get Map","description":"Fetch the map image associated with a selected zone as a downloadable file.\n\nThis endpoint retrieves the binary map image linked to a zone (via its `i_map` field) from the `maps` table in the ParcoRTLSMaint database. It supports both GET (to download the image) and HEAD (to check metadata without downloading) requests, facilitating efficient map rendering in the frontend Zone Viewer. The image is returned as a file attachment with a dynamically generated filename.\n\nParameters:\n    zone_id (int, required): The ID of the zone (`i_zn`) whose associated map image is to be retrieved.\n\nReturns:\n    Response: A FastAPI Response object containing:\n        - content: The binary image data (`img_data` from the `maps` table).\n        - media_type: The image format (e.g., \"image/png\", \"image/jpeg\") based on `x_format` in the `maps` table.\n        - headers: A \"Content-Disposition\" header specifying the filename (e.g., \"attachment; filename=map_zone_5.png\").\n    For HEAD requests, returns only the headers without the content.\n\nRaises:\n    HTTPException:\n        - 404: If the zone is not found (`i_zn` does not exist) or no map is associated with the zone (`i_map` is null or invalid).\n        - 500: If an unexpected error occurs during database queries or image retrieval.\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_map/5\" -H \"accept: image/png\" --output map_zone_5.png\n    ```\n    ```bash\n    curl -X HEAD \"http://192.168.210.226:8000/api/get_map/5\" -H \"accept: image/png\"\n    ```\n    Response (GET):\n    - Binary PNG image data, downloadable as \"map_zone_5.png\".\n    Response (HEAD):\n    - Headers including \"Content-Disposition: attachment; filename=map_zone_5.png\".\n\nUse Case:\n    - **Map Visualization**: The React frontend calls this endpoint to display the map image associated with a zone in the Zone Viewer, overlaying zone boundaries or device positions.\n    - **Resource Verification**: The frontend uses a HEAD request to check if a map exists for a zone before attempting to load it, optimizing performance.\n\nHint:\n    - Ensure CORS middleware in `app.py` is configured to allow requests from `http://192.168.210.226:3000` to avoid cross-origin issues.\n    - The `x_format` field in the `maps` table determines the media type; verify supported formats (e.g., PNG, JPEG) in the database to handle edge cases.\n    - For large maps, consider implementing caching or compression to improve performance.","operationId":"get_map_api_get_map__zone_id__head","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"get":{"tags":["zones"],"summary":"Get Map","description":"Fetch the map image associated with a selected zone as a downloadable file.\n\nThis endpoint retrieves the binary map image linked to a zone (via its `i_map` field) from the `maps` table in the ParcoRTLSMaint database. It supports both GET (to download the image) and HEAD (to check metadata without downloading) requests, facilitating efficient map rendering in the frontend Zone Viewer. The image is returned as a file attachment with a dynamically generated filename.\n\nParameters:\n    zone_id (int, required): The ID of the zone (`i_zn`) whose associated map image is to be retrieved.\n\nReturns:\n    Response: A FastAPI Response object containing:\n        - content: The binary image data (`img_data` from the `maps` table).\n        - media_type: The image format (e.g., \"image/png\", \"image/jpeg\") based on `x_format` in the `maps` table.\n        - headers: A \"Content-Disposition\" header specifying the filename (e.g., \"attachment; filename=map_zone_5.png\").\n    For HEAD requests, returns only the headers without the content.\n\nRaises:\n    HTTPException:\n        - 404: If the zone is not found (`i_zn` does not exist) or no map is associated with the zone (`i_map` is null or invalid).\n        - 500: If an unexpected error occurs during database queries or image retrieval.\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_map/5\" -H \"accept: image/png\" --output map_zone_5.png\n    ```\n    ```bash\n    curl -X HEAD \"http://192.168.210.226:8000/api/get_map/5\" -H \"accept: image/png\"\n    ```\n    Response (GET):\n    - Binary PNG image data, downloadable as \"map_zone_5.png\".\n    Response (HEAD):\n    - Headers including \"Content-Disposition: attachment; filename=map_zone_5.png\".\n\nUse Case:\n    - **Map Visualization**: The React frontend calls this endpoint to display the map image associated with a zone in the Zone Viewer, overlaying zone boundaries or device positions.\n    - **Resource Verification**: The frontend uses a HEAD request to check if a map exists for a zone before attempting to load it, optimizing performance.\n\nHint:\n    - Ensure CORS middleware in `app.py` is configured to allow requests from `http://192.168.210.226:3000` to avoid cross-origin issues.\n    - The `x_format` field in the `maps` table determines the media type; verify supported formats (e.g., PNG, JPEG) in the database to handle edge cases.\n    - For large maps, consider implementing caching or compression to improve performance.","operationId":"get_map_api_get_map__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_zone_types":{"get":{"tags":["zones"],"summary":"Get Zone Types","description":"Fetch all zone types from the ParcoRTLSMaint database.\n\nThis endpoint retrieves all zone types from the `tlkzonetypes` table, which define the hierarchical levels of zones in the ParcoRTLS system (e.g., Campus, Building, Floor, Room). Each zone type is mapped to an API endpoint for adding triggers, facilitating integration with trigger management.\n\nParameters:\n    None\n\nReturns:\n    list: A list of dictionaries, each representing a zone type with the following fields:\n        - zone_level (int): The zone type ID (`i_typ_zn`, e.g., 1 for Campus, 2 for Building).\n        - zone_name (str): The description of the zone type (`x_dsc_zn`, e.g., \"Campus\").\n        - api_endpoint (str): The API endpoint for adding triggers related to this zone type (e.g., \"/api/add_trigger\").\n    Example: [{\"zone_level\": 1, \"zone_name\": \"Campus\", \"api_endpoint\": \"/api/add_trigger\"}, ...]\n    If no zone types are found, returns an empty list: [].\n\nRaises:\n    HTTPException:\n        - 500: If an unexpected error occurs during database query execution.\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_zone_types\" -H \"accept: application/json\"\n    ```\n    Response:\n    ```json\n    [\n        {\"zone_level\": 1, \"zone_name\": \"Campus\", \"api_endpoint\": \"/api/add_trigger\"},\n        {\"zone_level\": 2, \"zone_name\": \"Building\", \"api_endpoint\": \"/api/add_trigger\"},\n        {\"zone_level\": 3, \"zone_name\": \"Floor\", \"api_endpoint\": \"/api/add_trigger\"}\n    ]\n    ```\n\nUse Case:\n    - **Zone Configuration UI**: The frontend uses this endpoint to populate a dropdown or list of zone types when creating or editing zones, ensuring users select valid zone types.\n    - **Trigger Assignment**: The `api_endpoint` field guides the frontend to the correct endpoint for adding triggers to zones of specific types.\n\nHint:\n    - The `api_mapping` dictionary hardcodes `/api/add_trigger` for all zone types; verify if custom endpoints are needed for specific zone types in future updates.\n    - Use this endpoint in conjunction with `/create_zone` to ensure the selected `zone_level` is valid before creating a new zone.","operationId":"get_zone_types_api_get_zone_types_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_parent_zones":{"get":{"tags":["zones"],"summary":"Get Parent Zones","description":"Fetch all top-level parent zones from the ParcoRTLSMaint database.\n\nSimilar to `/get_parents`, this endpoint retrieves zones with no parent zone (`i_pnt_zn IS NULL`), such as campuses, but returns a simpler structure with only zone ID and name. It is used in scenarios where a minimal representation of top-level zones is needed, such as dropdowns or quick selections in the ParcoRTLS frontend.\n\nParameters:\n    None\n\nReturns:\n    dict: A JSON object with a single key \"zones\" containing a list of dictionaries. Each dictionary represents a parent zone with:\n        - zone_id (int): The unique zone ID (`i_zn`).\n        - name (str): The name of the zone (`x_nm_zn`).\n    Example: {\"zones\": [{\"zone_id\": 1, \"name\": \"Main Campus\"}, ...]}\n    If no parent zones are found, returns {\"zones\": []}.\n\nRaises:\n    HTTPException:\n        - 500: If an unexpected error occurs during database query execution.\n\nExample Usage:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/api/get_parent_zones\" -H \"accept: application/json\"\n    ```\n    Response:\n    ```json\n    {\n        \"zones\": [\n            {\"zone_id\": 1, \"name\": \"Main Campus\"},\n            {\"zone_id\": 2, \"name\": \"West Campus\"}\n        ]\n    }\n    ```\n\nUse Case:\n    - **Zone Selection**: The frontend uses this endpoint to populate a dropdown for selecting a top-level zone when configuring devices, triggers, or sub-zones.\n    - **Simplified Hierarchy View**: Unlike `/get_parents`, this endpoint provides a lightweight response for scenarios where only zone IDs and names are needed.\n\nHint:\n    - This endpoint is redundant with `/get_parents` but returns fewer fields; consider consolidating or deprecating one in future iterations to reduce API complexity.\n    - For campus-level tag tracking, combine with `/get_zone_vertices/{zone_id}` to check if a tag's coordinates are within a campus boundary.","operationId":"get_parent_zones_api_get_parent_zones_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/add_entity":{"post":{"tags":["entities"],"summary":"Add Entity","description":"Add a new entity to the ParcoRTLS system.\n\nThis endpoint creates a new entity (e.g., a person, asset, or group) in the ParcoRTLS system by invoking the `usp_entity_add` stored procedure. It is used to register entities that can be tracked or associated with devices (e.g., tags) or other entities in the system.\n\nArgs:\n    request (EntityRequest): The request body containing entity details.\n        - entity_id (str): Unique identifier for the entity (e.g., \"EMP123\"). Required.\n        - entity_type (int): The type ID of the entity (e.g., 1 for Employee, 2 for Asset). Required.\n        - entity_name (str): Descriptive name of the entity (e.g., \"John Doe\"). Required.\n\nReturns:\n    dict: A JSON response indicating success and the entity ID.\n        - message (str): Success message (\"Entity added successfully\").\n        - entity_id (str): The ID of the newly created entity.\n\nRaises:\n    HTTPException:\n        - 400: If the entity ID already exists (duplicate key violation).\n        - 500: If the database operation fails or the stored procedure returns an unexpected result.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/add_entity\"              -H \"Content-Type: application/json\"              -d '{\"entity_id\": \"EMP123\", \"entity_type\": 1, \"entity_name\": \"John Doe\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity added successfully\", \"entity_id\": \"EMP123\"}\n    ```\n\nUse Case:\n    - Register a new employee (\"John Doe\") with ID \"EMP123\" and type 1 (Employee) to track their location on a campus.\n    - Add a new asset (e.g., a medical device) to the system for inventory and location tracking.\n\nHint:\n    - Ensure the `entity_type` corresponds to a valid type ID from the `tlkentitytypes` table, which can be retrieved using the `/list_entity_types` endpoint.\n    - The `entity_id` must be unique across the system to avoid duplicate key errors.","operationId":"add_entity_api_add_entity_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_all_entities":{"get":{"tags":["entities"],"summary":"List All Entities","description":"Retrieve a list of all entities in the ParcoRTLS system.\n\nThis endpoint fetches all entities (e.g., employees, assets, groups) from the system by invoking the `usp_entity_all` stored procedure. It is useful for generating reports or populating UI elements like dropdowns.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing entity details.\n        - x_id_ent (str): Entity ID.\n        - i_typ_ent (int): Entity type ID.\n        - x_nm_ent (str): Entity name.\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If no entities are found in the system.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_all_entities\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_ent\": \"EMP123\", \"i_typ_ent\": 1, \"x_nm_ent\": \"John Doe\", \"d_crt\": \"2025-04-26T10:00:00\", \"d_udt\": \"2025-04-26T10:00:00\"},\n        {\"x_id_ent\": \"ASSET456\", \"i_typ_ent\": 2, \"x_nm_ent\": \"Medical Device\", \"d_crt\": \"2025-04-25T09:00:00\", \"d_udt\": \"2025-04-25T09:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - Populate a dropdown in the React frontend to allow users to select an entity for assignment or tracking.\n    - Generate a report of all registered entities for auditing purposes.\n\nHint:\n    - Use this endpoint sparingly in high-traffic scenarios, as it retrieves all entities. Consider filtering by type or ID for better performance.","operationId":"list_all_entities_api_list_all_entities_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_entity_by_id/{entity_id}":{"get":{"tags":["entities"],"summary":"Get Entity By Id","description":"Retrieve details of a specific entity by its ID.\n\nThis endpoint fetches the details of a single entity (e.g., employee, asset) using the `usp_entity_by_id` stored procedure. It is used to display entity information or verify existence before performing operations like assignments.\n\nArgs:\n    entity_id (str): The unique identifier of the entity (e.g., \"EMP123\"). Required.\n\nReturns:\n    dict: A dictionary containing entity details.\n        - x_id_ent (str): Entity ID.\n        - i_typ_ent (int): Entity type ID.\n        - x_nm_ent (str): Entity name.\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If the entity with the specified ID is not found.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_entity_by_id/EMP123\"\n    ```\n    Response:\n    ```json\n    {\"x_id_ent\": \"EMP123\", \"i_typ_ent\": 1, \"x_nm_ent\": \"John Doe\", \"d_crt\": \"2025-04-26T10:00:00\", \"d_udt\": \"2025-04-26T10:00:00\"}\n    ```\n\nUse Case:\n    - Display detailed information about an employee (\"EMP123\") in the React frontend.\n    - Verify that an entity exists before assigning it to a device or another entity.\n\nHint:\n    - Use this endpoint to prefetch entity data before rendering forms or dashboards to reduce latency.","operationId":"get_entity_by_id_api_get_entity_by_id__entity_id__get","parameters":[{"name":"entity_id","in":"path","required":true,"schema":{"type":"string","title":"Entity Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_entities_by_type/{entity_type}":{"get":{"tags":["entities"],"summary":"Get Entities By Type","description":"Retrieve all entities of a specific type.\n\nThis endpoint fetches all entities of a given type (e.g., all employees or all assets) using the `usp_entity_by_type` stored procedure. It is useful for filtering entities by their category.\n\nArgs:\n    entity_type (int): The type ID of the entities to retrieve (e.g., 1 for Employee, 2 for Asset). Required.\n\nReturns:\n    list: A list of dictionaries, each containing entity details.\n        - x_id_ent (str): Entity ID.\n        - i_typ_ent (int): Entity type ID.\n        - x_nm_ent (str): Entity name.\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If no entities are found for the specified type.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_entities_by_type/1\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_ent\": \"EMP123\", \"i_typ_ent\": 1, \"x_nm_ent\": \"John Doe\", \"d_crt\": \"2025-04-26T10:00:00\", \"d_udt\": \"2025-04-26T10:00:00\"},\n        {\"x_id_ent\": \"EMP456\", \"i_typ_ent\": 1, \"x_nm_ent\": \"Jane Smith\", \"d_crt\": \"2025-04-25T09:00:00\", \"d_udt\": \"2025-04-25T09:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - List all employees (type ID 1) in a dropdown for assigning tags in the React frontend.\n    - Generate a report of all assets (type ID 2) for inventory management.\n\nHint:\n    - Retrieve valid `entity_type` values from the `/list_entity_types` endpoint to ensure accurate filtering.","operationId":"get_entities_by_type_api_get_entities_by_type__entity_type__get","parameters":[{"name":"entity_type","in":"path","required":true,"schema":{"type":"integer","title":"Entity Type"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_entity/{entity_id}":{"delete":{"tags":["entities"],"summary":"Delete Entity","description":"Delete an entity from the ParcoRTLS system.\n\nThis endpoint removes an entity (e.g., employee, asset) from the system using the `usp_entity_delete` stored procedure. It is used to decommission entities that are no longer tracked.\n\nArgs:\n    entity_id (str): The unique identifier of the entity to delete (e.g., \"EMP123\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the entity cannot be deleted (e.g., due to existing assignments).\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_entity/EMP123\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove a retired employee (\"EMP123\") from the system after they leave the organization.\n    - Decommission an obsolete asset from the inventory.\n\nHint:\n    - Ensure all assignments (e.g., device or entity assignments) for the entity are removed using `/delete_all_entity_assignments/{entity_id}` or `/end_all_entity_assignments/{entity_id}` before deletion to avoid database constraints.","operationId":"delete_entity_api_delete_entity__entity_id__delete","parameters":[{"name":"entity_id","in":"path","required":true,"schema":{"type":"string","title":"Entity Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_entity":{"put":{"tags":["entities"],"summary":"Edit Entity","description":"Update an existing entity's details.\n\nThis endpoint modifies the details of an entity (e.g., name or type) using the `usp_entity_edit` stored procedure. It is used to correct or update entity information.\n\nArgs:\n    request (EntityRequest): The request body containing updated entity details.\n        - entity_id (str): Unique identifier of the entity to update (e.g., \"EMP123\"). Required.\n        - entity_type (int): The updated type ID of the entity (e.g., 1 for Employee). Required.\n        - entity_name (str): The updated name of the entity (e.g., \"John Smith\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity edited successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the entity cannot be updated.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_entity\"              -H \"Content-Type: application/json\"              -d '{\"entity_id\": \"EMP123\", \"entity_type\": 1, \"entity_name\": \"John Smith\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity edited successfully\"}\n    ```\n\nUse Case:\n    - Update an employee's name from \"John Doe\" to \"John Smith\" after a legal name change.\n    - Change an asset's type after reclassification.\n\nHint:\n    - Verify the `entity_id` exists using `/get_entity_by_id/{entity_id}` before attempting to update.\n    - Ensure the `entity_type` is valid by checking `/list_entity_types`.","operationId":"edit_entity_api_edit_entity_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/add_entity_type":{"post":{"tags":["entities"],"summary":"Add Entity Type","description":"Add a new entity type to the ParcoRTLS system.\n\nThis endpoint creates a new entity type (e.g., Employee, Asset) using the `usp_entity_type_add` stored procedure. Entity types categorize entities for organizational purposes.\n\nArgs:\n    request (EntityTypeRequest): The request body containing the entity type details.\n        - type_name (str): The name of the new entity type (e.g., \"Employee\"). Required.\n\nReturns:\n    dict: A JSON response indicating success and the new type ID.\n        - message (str): Success message (\"Entity type added successfully\").\n        - type_id (int or str): The ID of the newly created entity type.\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the entity type cannot be added.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/add_entity_type\"              -H \"Content-Type: application/json\"              -d '{\"type_name\": \"Employee\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity type added successfully\", \"type_id\": 1}\n    ```\n\nUse Case:\n    - Add a new entity type (\"Patient\") to support tracking patients in a hospital campus.\n    - Create a custom entity type for a specific use case (e.g., \"Vehicle\").\n\nHint:\n    - Check existing types with `/list_entity_types` to avoid duplicating type names.\n    - The returned `type_id` can be used when adding entities via `/add_entity`.","operationId":"add_entity_type_api_add_entity_type_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityTypeRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_entity_type/{type_id}":{"delete":{"tags":["entities"],"summary":"Delete Entity Type","description":"Delete an entity type from the ParcoRTLS system.\n\nThis endpoint removes an entity type using the `usp_entity_type_delete` stored procedure. It is used to remove obsolete or unused entity types.\n\nArgs:\n    type_id (str): The ID of the entity type to delete (e.g., \"1\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity type deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the entity type cannot be deleted (e.g., due to existing entities of that type).\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_entity_type/1\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity type deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove an obsolete entity type (\"Temporary Worker\") that is no longer needed.\n    - Clean up unused entity types during system maintenance.\n\nHint:\n    - Ensure no entities are using the `type_id` (check `/get_entities_by_type/{entity_type}`) before deletion to avoid database constraints.","operationId":"delete_entity_type_api_delete_entity_type__type_id__delete","parameters":[{"name":"type_id","in":"path","required":true,"schema":{"type":"string","title":"Type Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_entity_type":{"put":{"tags":["entities"],"summary":"Edit Entity Type","description":"Update an existing entity type's details.\n\nThis endpoint modifies the name of an entity type using the `usp_entity_type_edit` stored procedure. It is used to correct or update type names.\n\nArgs:\n    type_id (str): The ID of the entity type to update (e.g., \"1\"). Required.\n    request (EntityTypeRequest): The request body containing the updated type details.\n        - type_name (str): The updated name of the entity type (e.g., \"Staff\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity type edited successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the entity type cannot be updated.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_entity_type?type_id=1\"              -H \"Content-Type: application/json\"              -d '{\"type_name\": \"Staff\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity type edited successfully\"}\n    ```\n\nUse Case:\n    - Rename an entity type from \"Employee\" to \"Staff\" for consistency.\n    - Update a type name to better reflect its purpose.\n\nHint:\n    - Verify the `type_id` exists using `/list_entity_types` before attempting to update.","operationId":"edit_entity_type_api_edit_entity_type_put","parameters":[{"name":"type_id","in":"query","required":true,"schema":{"type":"string","title":"Type Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityTypeRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_entity_types":{"get":{"tags":["entities"],"summary":"List Entity Types","description":"Retrieve a list of all entity types in the ParcoRTLS system.\n\nThis endpoint fetches all entity types (e.g., Employee, Asset) using a raw SQL query on the `tlkentitytypes` table. It is useful for populating UI elements or validating entity type IDs.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing entity type details.\n        - i_typ_ent (int): Entity type ID.\n        - x_nm_typ (str): Entity type name (aliased as x_dsc_ent in the query).\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If no entity types are found.\n        - 500: If a database error occurs or an unexpected error is encountered.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_entity_types\"\n    ```\n    Response:\n    ```json\n    [\n        {\"i_typ_ent\": 1, \"x_nm_typ\": \"Employee\", \"d_crt\": \"2025-04-26T10:00:00\", \"d_udt\": \"2025-04-26T10:00:00\"},\n        {\"i_typ_ent\": 2, \"x_nm_typ\": \"Asset\", \"d_crt\": \"2025-04-25T09:00:00\", \"d_udt\": \"2025-04-25T09:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - Populate a dropdown in the React frontend for selecting entity types when adding a new entity.\n    - Validate entity type IDs before creating or updating entities.\n\nHint:\n    - This endpoint uses a raw query instead of a stored procedure (`usp_entity_type_list`) due to previous stability issues (see version 0.1.16 changelog).\n    - Log errors are captured for debugging; check logs if a 500 error occurs.","operationId":"list_entity_types_api_list_entity_types_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/assign_entity":{"post":{"tags":["entities"],"summary":"Assign Entity","description":"Assign a child entity to a parent entity with a reason.\n\nThis endpoint creates a hierarchical relationship between two entities (e.g., assigning an employee to a department) using the `usp_assign_entity_add` stored procedure. It is used to build entity hierarchies for organizational or tracking purposes.\n\nArgs:\n    request (EntityAssignRequest): The request body containing assignment details.\n        - parent_id (str): The ID of the parent entity (e.g., \"DEPT001\"). Required.\n        - child_id (str): The ID of the child entity (e.g., \"EMP123\"). Required.\n        - reason_id (int): The ID of the assignment reason (e.g., 1 for \"Employment\"). Required.\n\nReturns:\n    dict: A JSON response indicating success and the assignment ID.\n        - message (str): Success message (\"Entity assignment added successfully\").\n        - assignment_id (int): The ID of the newly created assignment.\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the assignment cannot be created.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/assign_entity\"              -H \"Content-Type: application/json\"              -d '{\"parent_id\": \"DEPT001\", \"child_id\": \"EMP123\", \"reason_id\": 1}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity assignment added successfully\", \"assignment_id\": 101}\n    ```\n\nUse Case:\n    - Assign an employee (\"EMP123\") to a department (\"DEPT001\") with reason ID 1 (\"Employment\").\n    - Link a medical device to a hospital ward for location tracking.\n\nHint:\n    - Verify `parent_id` and `child_id` exist using `/get_entity_by_id/{entity_id}` before assigning.\n    - Retrieve valid `reason_id` values from `/list_assignment_reasons`.","operationId":"assign_entity_api_assign_entity_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityAssignRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_entity_assignment/{assignment_id}":{"delete":{"tags":["entities"],"summary":"Delete Entity Assignment","description":"Delete a specific entity assignment.\n\nThis endpoint removes an entity assignment (e.g., an employee from a department) using the `usp_assign_entity_delete` stored procedure. It is used to dissolve hierarchical relationships.\n\nArgs:\n    assignment_id (int): The ID of the assignment to delete (e.g., 101). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity assignment deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the assignment cannot be deleted.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_entity_assignment/101\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity assignment deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove an employee (\"EMP123\") from a department (\"DEPT001\") after a transfer.\n    - Dissolve an assignment when an asset is reassigned to another entity.\n\nHint:\n    - Verify the `assignment_id` exists using `/list_entity_assignments_by_id/{assignment_id}` before deletion.\n    - A return value of 0 from the stored procedure indicates the assignment was already deleted, which is treated as success.","operationId":"delete_entity_assignment_api_delete_entity_assignment__assignment_id__delete","parameters":[{"name":"assignment_id","in":"path","required":true,"schema":{"type":"integer","title":"Assignment Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_all_entity_assignments/{entity_id}":{"delete":{"tags":["entities"],"summary":"Delete All Entity Assignments","description":"Delete all assignments for a specific entity.\n\nThis endpoint removes all assignments (parent or child) for a given entity using the `usp_assign_entity_delete_all` stored procedure. It is used to clear all hierarchical relationships for an entity.\n\nArgs:\n    entity_id (str): The ID of the entity whose assignments are to be deleted (e.g., \"EMP123\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"All entity assignments deleted successfully for entity\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the assignments cannot be deleted.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_all_entity_assignments/EMP123\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"All entity assignments deleted successfully for entity\"}\n    ```\n\nUse Case:\n    - Clear all assignments for an employee (\"EMP123\") who has left the organization.\n    - Reset assignments for an asset before reassigning it to a new entity.\n\nHint:\n    - Use this endpoint cautiously, as it removes all assignments for the entity, which may affect tracking or reporting.\n    - Verify the `entity_id` exists using `/get_entity_by_id/{entity_id}` before deletion.","operationId":"delete_all_entity_assignments_api_delete_all_entity_assignments__entity_id__delete","parameters":[{"name":"entity_id","in":"path","required":true,"schema":{"type":"string","title":"Entity Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_entity_assignment":{"put":{"tags":["entities"],"summary":"Edit Entity Assignment","description":"Update an existing entity assignment.\n\nThis endpoint modifies an entity assignment (e.g., changing the parent or reason) using the `usp_assign_entity_edit` stored procedure. It is used to update hierarchical relationships.\n\nArgs:\n    assignment_id (int): The ID of the assignment to update (e.g., 101). Required.\n    request (EntityAssignRequest): The request body containing updated assignment details.\n        - parent_id (str): The updated parent entity ID (e.g., \"DEPT002\"). Required.\n        - child_id (str): The updated child entity ID (e.g., \"EMP123\"). Required.\n        - reason_id (int): The updated reason ID (e.g., 2 for \"Transfer\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity assignment edited successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the assignment cannot be updated.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_entity_assignment?assignment_id=101\"              -H \"Content-Type: application/json\"              -d '{\"parent_id\": \"DEPT002\", \"child_id\": \"EMP123\", \"reason_id\": 2}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity assignment edited successfully\"}\n    ```\n\nUse Case:\n    - Transfer an employee (\"EMP123\") from one department (\"DEPT001\") to another (\"DEPT002\").\n    - Update the reason for an asset's assignment after a change in usage.\n\nHint:\n    - Verify the `assignment_id` exists using `/list_entity_assignments_by_id/{assignment_id}` before updating.\n    - Ensure `parent_id`, `child_id`, and `reason_id` are valid using appropriate endpoints.","operationId":"edit_entity_assignment_api_edit_entity_assignment_put","parameters":[{"name":"assignment_id","in":"query","required":true,"schema":{"type":"integer","title":"Assignment Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityAssignRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/end_entity_assignment":{"post":{"tags":["entities"],"summary":"End Entity Assignment","description":"End a specific entity assignment.\n\nThis endpoint marks an entity assignment as ended using the `usp_assign_entity_end` stored procedure. It is used to terminate a hierarchical relationship without deleting it, preserving historical data.\n\nArgs:\n    request (EntityAssignEndRequest): The request body containing the assignment ID.\n        - assignment_id (int): The ID of the assignment to end (e.g., 101). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Entity assignment ended successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the assignment cannot be ended.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/end_entity_assignment\"              -H \"Content-Type: application/json\"              -d '{\"assignment_id\": 101}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Entity assignment ended successfully\"}\n    ```\n\nUse Case:\n    - End an employee's assignment to a department after they leave the organization.\n    - Terminate an asset's assignment to a ward when it is moved to storage.\n\nHint:\n    - Use this endpoint to maintain historical records instead of deleting assignments with `/delete_entity_assignment/{assignment_id}`.\n    - Verify the `assignment_id` exists using `/list_entity_assignments_by_id/{assignment_id}`.","operationId":"end_entity_assignment_api_end_entity_assignment_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EntityAssignEndRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/end_all_entity_assignments/{entity_id}":{"post":{"tags":["entities"],"summary":"End All Entity Assignments","description":"End all assignments for a specific entity.\n\nThis endpoint marks all assignments (parent or child) for a given entity as ended using the `usp_assign_entity_end_all` stored procedure. It is used to terminate all hierarchical relationships while preserving historical data.\n\nArgs:\n    entity_id (str): The ID of the entity whose assignments are to be ended (e.g., \"EMP123\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"All entity assignments ended successfully for entity\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the assignments cannot be ended.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/end_all_entity_assignments/EMP123\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"All entity assignments ended successfully for entity\"}\n    ```\n\nUse Case:\n    - End all assignments for an employee (\"EMP123\") who has retired, preserving historical data.\n    - Terminate all assignments for an asset before reassigning it.\n\nHint:\n    - Use this endpoint instead of `/delete_all_entity_assignments/{entity_id}` if historical data needs to be retained.\n    - Verify the `entity_id` exists using `/get_entity_by_id/{entity_id}`.","operationId":"end_all_entity_assignments_api_end_all_entity_assignments__entity_id__post","parameters":[{"name":"entity_id","in":"path","required":true,"schema":{"type":"string","title":"Entity Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_entity_assignments":{"get":{"tags":["entities"],"summary":"List Entity Assignments","description":"Retrieve a list of all entity assignments.\n\nThis endpoint fetches all entity assignments (active or ended) using the `usp_assign_entity_list` stored procedure. It is useful for auditing or displaying hierarchical relationships.\n\nArgs:\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - x_id_pnt (str): Parent entity ID.\n        - x_id_chd (str): Child entity ID.\n        - i_rsn_assmt (int): Assignment reason ID.\n        - d_crt (datetime): Creation date.\n        - d_end (datetime, optional): End date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_entity_assignments?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_pnt\": \"DEPT001\", \"x_id_chd\": \"EMP123\", \"i_rsn_assmt\": 1, \"d_crt\": \"2025-04-26T10:00:00\", \"d_end\": null},\n        {\"x_id_pnt\": \"DEPT002\", \"x_id_chd\": \"EMP456\", \"i_rsn_assmt\": 2, \"d_crt\": \"2025-04-25T09:00:00\", \"d_end\": \"2025-04-26T12:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - Display all active assignments in the React frontend for administrative oversight.\n    - Generate a report of all assignments, including ended ones, for auditing.\n\nHint:\n    - Set `include_ended=True` to retrieve historical assignments, useful for tracking changes over time.","operationId":"list_entity_assignments_api_list_entity_assignments_get","parameters":[{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_entity_assignments_by_child/{child_id}":{"get":{"tags":["entities"],"summary":"List Entity Assignments By Child","description":"Retrieve all assignments for a specific child entity.\n\nThis endpoint fetches all assignments where the specified entity is the child using the `usp_assign_entity_list_by_child` stored procedure. It is used to view an entity's parent relationships.\n\nArgs:\n    child_id (str): The ID of the child entity (e.g., \"EMP123\"). Required.\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - x_id_pnt (str): Parent entity ID.\n        - x_id_chd (str): Child entity ID.\n        - i_rsn_assmt (int): Assignment reason ID.\n        - d_crt (datetime): Creation date.\n        - d_end (datetime, optional): End date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found for the child entity.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_entity_assignments_by_child/EMP123?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_pnt\": \"DEPT001\", \"x_id_chd\": \"EMP123\", \"i_rsn_assmt\": 1, \"d_crt\": \"2025-04-26T10:00:00\", \"d_end\": null}\n    ]\n    ```\n\nUse Case:\n    - View all departments an employee (\"EMP123\") is assigned to.\n    - Check the assignment history of an asset to understand its usage.\n\nHint:\n    - Verify the `child_id` exists using `/get_entity_by_id/{entity_id}` before querying.\n    - Use `include_ended=True` for historical analysis.","operationId":"list_entity_assignments_by_child_api_list_entity_assignments_by_child__child_id__get","parameters":[{"name":"child_id","in":"path","required":true,"schema":{"type":"string","title":"Child Id"}},{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_entity_assignments_by_id/{assignment_id}":{"get":{"tags":["entities"],"summary":"List Entity Assignments By Id","description":"Retrieve details of a specific entity assignment by its ID.\n\nThis endpoint fetches a single assignment using the `usp_assign_entity_list_by_key` stored procedure. It is used to verify or display details of a specific assignment.\n\nArgs:\n    assignment_id (int): The ID of the assignment (e.g., 101). Required.\n\nReturns:\n    list: A list containing a single dictionary with assignment details.\n        - x_id_pnt (str): Parent entity ID.\n        - x_id_chd (str): Child entity ID.\n        - i_rsn_assmt (int): Assignment reason ID.\n        - d_crt (datetime): Creation date.\n        - d_end (datetime, optional): End date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If the assignment is not found.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_entity_assignments_by_id/101\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_pnt\": \"DEPT001\", \"x_id_chd\": \"EMP123\", \"i_rsn_assmt\": 1, \"d_crt\": \"2025-04-26T10:00:00\", \"d_end\": null}\n    ]\n    ```\n\nUse Case:\n    - Display details of a specific assignment in the React frontend.\n    - Verify an assignment before editing or ending it.\n\nHint:\n    - Use this endpoint to prefetch assignment data before rendering forms.","operationId":"list_entity_assignments_by_id_api_list_entity_assignments_by_id__assignment_id__get","parameters":[{"name":"assignment_id","in":"path","required":true,"schema":{"type":"integer","title":"Assignment Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_entity_assignments_by_parent/{parent_id}":{"get":{"tags":["entities"],"summary":"List Entity Assignments By Parent","description":"Retrieve all assignments for a specific parent entity.\n\nThis endpoint fetches all assignments where the specified entity is the parent using the `usp_assign_entity_list_by_parent` stored procedure. It is used to view an entity's child relationships.\n\nArgs:\n    parent_id (str): The ID of the parent entity (e.g., \"DEPT001\"). Required.\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - x_id_pnt (str): Parent entity ID.\n        - x_id_chd (str): Child entity ID.\n        - i_rsn_assmt (int): Assignment reason ID.\n        - d_crt (datetime): Creation date.\n        - d_end (datetime, optional): End date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found for the parent entity.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_entity_assignments_by_parent/DEPT001?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_pnt\": \"DEPT001\", \"x_id_chd\": \"EMP123\", \"i_rsn_assmt\": 1, \"d_crt\": \"2025-04-26T10:00:00\", \"d_end\": null},\n        {\"x_id_pnt\": \"DEPT001\", \"x_id_chd\": \"EMP456\", \"i_rsn_assmt\": 1, \"d_crt\": \"2025-04-25T09:00:00\", \"d_end\": \"2025-04-26T12:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - List all employees assigned to a department (\"DEPT001\") in the React frontend.\n    - View all assets assigned to a ward for inventory management.\n\nHint:\n    - Verify the `parent_id` exists using `/get_entity_by_id/{entity_id}` before querying.\n    - Use `include_ended=True` for historical analysis.","operationId":"list_entity_assignments_by_parent_api_list_entity_assignments_by_parent__parent_id__get","parameters":[{"name":"parent_id","in":"path","required":true,"schema":{"type":"string","title":"Parent Id"}},{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_entity_assignments_by_reason/{reason_id}":{"get":{"tags":["entities"],"summary":"List Entity Assignments By Reason","description":"Retrieve all assignments for a specific reason.\n\nThis endpoint fetches all assignments associated with a given reason using the `usp_assign_entity_list_by_reason` stored procedure. It is used to analyze assignments by their purpose.\n\nArgs:\n    reason_id (int): The ID of the assignment reason (e.g., 1 for \"Employment\"). Required.\n    include_ended (bool, optional): Whether to include ended assignments. Defaults to False.\n\nReturns:\n    list: A list of dictionaries, each containing assignment details.\n        - x_id_pnt (str): Parent entity ID.\n        - x_id_chd (str): Child entity ID.\n        - i_rsn_assmt (int): Assignment reason ID.\n        - d_crt (datetime): Creation date.\n        - d_end (datetime, optional): End date (null if active).\n\nRaises:\n    HTTPException:\n        - 404: If no assignments are found for the reason.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_entity_assignments_by_reason/1?include_ended=true\"\n    ```\n    Response:\n    ```json\n    [\n        {\"x_id_pnt\": \"DEPT001\", \"x_id_chd\": \"EMP123\", \"i_rsn_assmt\": 1, \"d_crt\": \"2025-04-26T10:00:00\", \"d_end\": null}\n    ]\n    ```\n\nUse Case:\n    - List all assignments with reason \"Employment\" for HR reporting.\n    - Analyze assignments for a specific reason to understand system usage.\n\nHint:\n    - Retrieve valid `reason_id` values from `/list_assignment_reasons` before querying.\n    - Use `include_ended=True` for comprehensive analysis.","operationId":"list_entity_assignments_by_reason_api_list_entity_assignments_by_reason__reason_id__get","parameters":[{"name":"reason_id","in":"path","required":true,"schema":{"type":"integer","title":"Reason Id"}},{"name":"include_ended","in":"query","required":false,"schema":{"type":"boolean","default":false,"title":"Include Ended"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/entitytree/{id}":{"get":{"tags":["entities"],"summary":"Get Entity Tree","description":"Fetch the hierarchical entity tree starting from a given entity ID.\n\nThis endpoint recursively builds a tree of entities starting from the specified entity, including all descendants, associated tags, and location data. It uses multiple stored procedures (e.g., `usp_entity_by_id`, `usp_assign_entity_list_by_parent`) to construct the tree and includes margin of error (MOE) checks to alert on tags that are too far from the root entity's tag. It is critical for visualizing organizational hierarchies and tracking entity locations in the ParcoRTLS system.\n\nArgs:\n    id (str): The entity ID to start the tree from (e.g., \"DEPT001\"). Required.\n    location_type (str, optional): Type of location data to fetch (\"realtime\", \"near_realtime\", \"historical\"). Defaults to \"realtime\".\n    moe (float, optional): Margin of error in feet for progeny tags (default 5.0 feet). If a progeny tag's distance from the root exceeds this, an alert is triggered.\n\nReturns:\n    dict: A nested dictionary representing the entity tree.\n        - id (str): Entity ID.\n        - type_id (int): Entity type ID.\n        - name (str): Entity name.\n        - created_at (datetime): Creation date.\n        - updated_at (datetime): Last update date.\n        - tag_ids (list): List of associated tag IDs.\n        - children (list): List of child entity nodes (recursive structure).\n        - alert (str, optional): Alert message if a tag exceeds the MOE.\n        - location (dict, optional): Location data for the root or queried entity.\n            - x (float): X-coordinate.\n            - y (float): Y-coordinate.\n            - z_min (float): Minimum Z-coordinate.\n            - z_max (float): Maximum Z-coordinate.\n\nRaises:\n    HTTPException:\n        - 400: If `location_type` is invalid or `moe` is negative.\n        - 404: If the entity is not found or the tree cannot be built.\n        - 500: If an unexpected error occurs during tree construction.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/entitytree/DEPT001?location_type=realtime&moe=5.0\"\n    ```\n    Response:\n    ```json\n    {\n        \"id\": \"DEPT001\",\n        \"type_id\": 3,\n        \"name\": \"Engineering\",\n        \"created_at\": \"2025-04-26T10:00:00\",\n        \"updated_at\": \"2025-04-26T10:00:00\",\n        \"tag_ids\": [],\n        \"children\": [\n            {\n                \"id\": \"EMP123\",\n                \"type_id\": 1,\n                \"name\": \"John Doe\",\n                \"created_at\": \"2025-04-26T10:00:00\",\n                \"updated_at\": \"2025-04-26T10:00:00\",\n                \"tag_ids\": [\"TAG001\"],\n                \"children\": [],\n                \"alert\": \"Tag has eloped from parent (distance: 10.5 feet, MOE: 5.0 feet)\"\n            }\n        ],\n        \"location\": {\"x\": 100.0, \"y\": 200.0, \"z_min\": 0.0, \"z_max\": 10.0}\n    }\n    ```\n\nUse Case:\n    - Visualize the hierarchy of a department (\"DEPT001\") and its employees in the React frontend, including their tag locations.\n    - Check if an employee's tag (\"TAG001\") is within the expected range of their department's tag for Zone L1 campus tracking.\n    - Generate a report of all entities and their locations under a specific root entity.\n\nHint:\n    - This endpoint is computationally intensive due to recursive queries; use it for specific entities rather than frequently polling large trees.\n    - The `moe` parameter is critical for campuses with Zone L1 zones, as it triggers alerts for tags that have \"eloped\" (moved too far from their expected location).\n    - If no tags are assigned to the root entity, location data may be incomplete; ensure tags are assigned using device management endpoints.\n    - The `location_type` parameter affects which location data is fetched; use \"realtime\" for live tracking and \"historical\" for auditing past locations.","operationId":"get_entity_tree_api_entitytree__id__get","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","title":"Id"}},{"name":"location_type","in":"query","required":false,"schema":{"type":"string","default":"realtime","title":"Location Type"}},{"name":"moe","in":"query","required":false,"schema":{"type":"number","default":5.0,"title":"Moe"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/add_assignment_reason":{"post":{"tags":["entities"],"summary":"Add Assignment Reason","description":"Add a new assignment reason to the ParcoRTLS system.\n\nThis endpoint creates a new reason for entity assignments (e.g., \"Employment\", \"Maintenance\") using the `usp_assmt_reason_add` stored procedure. Reasons categorize assignments for reporting and analysis.\n\nArgs:\n    request (AssignmentReasonRequest): The request body containing the reason details.\n        - reason (str): The name of the assignment reason (e.g., \"Employment\"). Required.\n\nReturns:\n    dict: A JSON response indicating success and the new reason ID.\n        - message (str): Success message (\"Assignment reason added successfully\").\n        - reason_id (int): The ID of the newly created reason.\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the reason cannot be added.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/add_assignment_reason\"              -H \"Content-Type: application/json\"              -d '{\"reason\": \"Employment\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Assignment reason added successfully\", \"reason_id\": 1}\n    ```\n\nUse Case:\n    - Add a new reason (\"Transfer\") for employee reassignments within departments.\n    - Create a reason (\"Maintenance\") for assigning assets to service teams.\n\nHint:\n    - Check existing reasons with `/list_assignment_reasons` to avoid duplicating reason names.\n    - The returned `reason_id` is used in `/assign_entity` and other assignment endpoints.","operationId":"add_assignment_reason_api_add_assignment_reason_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignmentReasonRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_assignment_reason/{reason_id}":{"delete":{"tags":["entities"],"summary":"Delete Assignment Reason","description":"Delete an assignment reason from the ParcoRTLS system.\n\nThis endpoint removes an assignment reason using the `usp_assmt_reason_delete` stored procedure. It is used to remove obsolete or unused reasons.\n\nArgs:\n    reason_id (int): The ID of the reason to delete (e.g., 1). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Assignment reason deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the reason cannot be deleted (e.g., due to existing assignments).\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_assignment_reason/1\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Assignment reason deleted successfully\"}\n    ```\n\nUse Case:\n    - Remove an obsolete reason (\"Temporary Assignment\") that is no longer needed.\n    - Clean up unused reasons during system maintenance.\n\nHint:\n    - Ensure no assignments use the `reason_id` (check `/list_entity_assignments_by_reason/{reason_id}`) before deletion to avoid database constraints.","operationId":"delete_assignment_reason_api_delete_assignment_reason__reason_id__delete","parameters":[{"name":"reason_id","in":"path","required":true,"schema":{"type":"integer","title":"Reason Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_assignment_reason":{"put":{"tags":["entities"],"summary":"Edit Assignment Reason","description":"Update an existing assignment reason.\n\nThis endpoint modifies the name of an assignment reason using the `usp_assmt_reason_edit` stored procedure. It is used to correct or update reason names.\n\nArgs:\n    reason_id (int): The ID of the reason to update (e.g., 1). Required.\n    request (AssignmentReasonRequest): The request body containing the updated reason details.\n        - reason (str): The updated name of the reason (e.g., \"Permanent Assignment\"). Required.\n\nReturns:\n    dict: A JSON response indicating success.\n        - message (str): Success message (\"Assignment reason edited successfully\").\n\nRaises:\n    HTTPException:\n        - 500: If the database operation fails or the reason cannot be updated.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_assignment_reason?reason_id=1\"              -H \"Content-Type: application/json\"              -d '{\"reason\": \"Permanent Assignment\"}'\n    ```\n    Response:\n    ```json\n    {\"message\": \"Assignment reason edited successfully\"}\n    ```\n\nUse Case:\n    - Rename a reason from \"Employment\" to \"Permanent Assignment\" for clarity.\n    - Update a reason to better reflect its purpose.\n\nHint:\n    - Verify the `reason_id` exists using `/list_assignment_reasons` before updating.","operationId":"edit_assignment_reason_api_edit_assignment_reason_put","parameters":[{"name":"reason_id","in":"query","required":true,"schema":{"type":"integer","title":"Reason Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignmentReasonRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_assignment_reasons":{"get":{"tags":["entities"],"summary":"List Assignment Reasons","description":"Retrieve a list of all assignment reasons in the ParcoRTLS system.\n\nThis endpoint fetches all assignment reasons (e.g., \"Employment\", \"Maintenance\") using the `usp_assmt_reason_list` stored procedure. It is useful for populating UI elements or validating reason IDs.\n\nArgs:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing reason details.\n        - i_rsn_assmt (int): Reason ID.\n        - x_rsn_assmt (str): Reason name.\n        - d_crt (datetime): Creation date.\n        - d_udt (datetime): Last update date.\n\nRaises:\n    HTTPException:\n        - 404: If no assignment reasons are found.\n        - 500: If the database operation fails.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/list_assignment_reasons\"\n    ```\n    Response:\n    ```json\n    [\n        {\"i_rsn_assmt\": 1, \"x_rsn_assmt\": \"Employment\", \"d_crt\": \"2025-04-26T10:00:00\", \"d_udt\": \"2025-04-26T10:00:00\"},\n        {\"i_rsn_assmt\": 2, \"x_rsn_assmt\": \"Maintenance\", \"d_crt\": \"2025-04-25T09:00:00\", \"d_udt\": \"2025-04-25T09:00:00\"}\n    ]\n    ```\n\nUse Case:\n    - Populate a dropdown in the React frontend for selecting reasons when assigning entities.\n    - Validate reason IDs before creating or updating assignments.\n\nHint:\n    - Use this endpoint to ensure valid `reason_id` values are used in assignment endpoints.","operationId":"list_assignment_reasons_api_list_assignment_reasons_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_recent_device_positions/{device_id}":{"get":{"tags":["history"],"summary":"Get Recent Device Positions","description":"Retrieve recent position data for a specific device in the ParcoRTLS system.\n\nThis endpoint queries the `hist_r` schema's `usp_location_by_id` stored procedure to fetch the most recent\nposition records for a given device. It is used to track the current or recent location of a device (e.g., a tag\nor asset) within the real-time location system.\n\nParameters:\n    device_id (str): The unique identifier of the device (e.g., tag ID or asset ID). Required.\n\nReturns:\n    list: A list of position records, each containing fields like `device_id`, `x`, `y`, `z`, and `timestamp`.\n          The exact structure depends on the `usp_location_by_id` stored procedure output.\n          Example: [{\"device_id\": \"TAG123\", \"x\": 10.5, \"y\": 20.3, \"z\": 1.2, \"timestamp\": \"2025-04-26T10:00:00\"}]\n\nRaises:\n    HTTPException (404): If no recent positions are found for the device.\n    HTTPException (500): If a database error occurs (e.g., connection failure or stored procedure error).\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_recent_device_positions/TAG123\"\n    ```\n    Response:\n    ```json\n    [\n        {\"device_id\": \"TAG123\", \"x\": 10.5, \"y\": 20.3, \"z\": 1.2, \"timestamp\": \"2025-04-26T10:00:00\"},\n        {\"device_id\": \"TAG123\", \"x\": 10.6, \"y\": 20.4, \"z\": 1.2, \"timestamp\": \"2025-04-26T10:00:01\"}\n    ]\n    ```\n\nUse Case:\n    - **Scenario**: A facility manager needs to check the latest location of a specific asset (e.g., a medical device with tag ID \"TAG123\") on a campus.\n    - **Application**: The React frontend calls this endpoint to display the device's recent positions on a map, helping the manager locate the asset in real-time.\n\nHint:\n    - This endpoint is useful for Zone L1 zones (e.g., campus-level tracking) to verify if a tag is within a specific area.\n    - For performance, ensure the `usp_location_by_id` stored procedure is optimized, as it may query large datasets.","operationId":"get_recent_device_positions_api_get_recent_device_positions__device_id__get","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/insert_position":{"post":{"tags":["history"],"summary":"Insert Position","description":"Insert a new position record for a device in the ParcoRTLS system.\n\nThis endpoint records a device's position (x, y, z coordinates) at a specific timestamp by calling the `hist_r`\nschema's `usp_position_insert` stored procedure. It first verifies the device's existence in the `maint` schema\nusing `usp_device_select_by_id`. This is critical for logging device movements in the RTLS system.\n\nParameters:\n    device_id (str): The unique identifier of the device (e.g., tag ID or asset ID). Required.\n    x (float): The x-coordinate of the device's position (e.g., in meters). Required.\n    y (float): The y-coordinate of the device's position (e.g., in meters). Required.\n    z (float): The z-coordinate of the device's position (e.g., in meters, for height). Required.\n\nReturns:\n    dict: A JSON object indicating success.\n          Example: {\"message\": \"Position inserted successfully\"}\n\nRaises:\n    HTTPException (404): If the device is not found in the `maint` schema.\n    HTTPException (500): If the position insertion fails or a database/general error occurs.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/insert_position\"              -F \"device_id=TAG123\"              -F \"x=10.5\"              -F \"y=20.3\"              -F \"z=1.2\"\n    ```\n    Response:\n    ```json\n    {\"message\": \"Position inserted successfully\"}\n    ```\n\nUse Case:\n    - **Scenario**: An RTLS gateway detects a tag's new position and sends it to the backend for storage.\n    - **Application**: This endpoint is used by the ParcoRTLS middleware to log real-time position updates, enabling historical tracking and analytics.\n\nHint:\n    - Ensure the device ID exists in the `maint` schema before calling this endpoint to avoid 404 errors.\n    - The `start_time` and `end_time` are set to the current timestamp, assuming instantaneous position updates.\n    - For high-frequency updates, consider batching position inserts to optimize database performance.","operationId":"insert_position_api_insert_position_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_insert_position_api_insert_position_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_history_by_device/{device_id}":{"get":{"tags":["history"],"summary":"Get History By Device","description":"Retrieve historical position data for a device within a specified time range in the ParcoRTLS system.\n\nThis endpoint queries the `hist_r` schema's `usp_history_by_id` stored procedure to fetch position records\nfor a device between the given start and end dates. It is used for analyzing a device's movement history,\nsuch as tracking an asset's path over time.\n\nParameters:\n    device_id (str): The unique identifier of the device (e.g., tag ID or asset ID). Required.\n    start_date (datetime): The start of the time range for the history query (e.g., \"2025-04-26T00:00:00\"). Required.\n    end_date (datetime): The end of the time range for the history query (e.g., \"2025-04-26T23:59:59\"). Required.\n\nReturns:\n    list: A list of position records, each containing fields like `device_id`, `x`, `y`, `z`, and `timestamp`.\n          The exact structure depends on the `usp_history_by_id` stored procedure output.\n          Example: [{\"device_id\": \"TAG123\", \"x\": 10.5, \"y\": 20.3, \"z\": 1.2, \"timestamp\": \"2025-04-26T10:00:00\"}]\n\nRaises:\n    HTTPException (404): If no history records are found for the device in the specified time range.\n    HTTPException (500): If a database error occurs (e.g., connection failure or stored procedure error).\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_history_by_device/TAG123?start_date=2025-04-26T00:00:00&end_date=2025-04-26T23:59:59\"\n    ```\n    Response:\n    ```json\n    [\n        {\"device_id\": \"TAG123\", \"x\": 10.5, \"y\": 20.3, \"z\": 1.2, \"timestamp\": \"2025-04-26T10:00:00\"},\n        {\"device_id\": \"TAG123\", \"x\": 10.6, \"y\": 20.4, \"z\": 1.2, \"timestamp\": \"2025-04-26T10:01:00\"}\n    ]\n    ```\n\nUse Case:\n    - **Scenario**: A security team needs to review the movement history of a tagged asset over the past day to investigate an incident.\n    - **Application**: The React frontend calls this endpoint to fetch and visualize the device's path on a map, aiding in incident analysis.\n\nHint:\n    - Ensure `start_date` and `end_date` are in a valid ISO 8601 format to avoid parsing errors.\n    - For large time ranges, the query may return a large dataset; consider implementing pagination or limiting the time range.\n    - This endpoint is ideal for generating reports or visualizing movement patterns in Zone L1 zones.","operationId":"get_history_by_device_api_get_history_by_device__device_id__get","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}},{"name":"start_date","in":"query","required":true,"schema":{"type":"string","format":"date-time","title":"Start Date"}},{"name":"end_date","in":"query","required":true,"schema":{"type":"string","format":"date-time","title":"End Date"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/log_text_event":{"post":{"tags":["text"],"summary":"Log Text Event","operationId":"log_text_event_api_log_text_event_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_log_text_event_api_log_text_event_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_text_events_by_device/{device_id}":{"get":{"tags":["text"],"summary":"Get Text Events By Device","operationId":"get_text_events_by_device_api_get_text_events_by_device__device_id__get","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/input":{"get":{"tags":["input"],"summary":"Input Screen","description":"Serve an input screen with default data from the database.","operationId":"input_screen_api_input_get","responses":{"200":{"description":"Successful Response","content":{"text/html":{"schema":{"type":"string"}}}}}}},"/api/add_region":{"post":{"tags":["regions"],"summary":"Add Region","description":"Add a new region to the ParcoRTLS system, associating it with a zone and optionally a trigger.\n\nThis endpoint creates a new region in the `regions` table, defining its spatial boundaries (min/max coordinates) and linking it to a specific zone and, if applicable, a trigger. Regions are critical in ParcoRTLS for defining spatial areas within zones, such as areas for tracking devices or triggering events. The endpoint uses the stored procedure `usp_region_add` to perform the insertion.\n\nParameters:\n    request (RegionRequest): A Pydantic model containing the following fields:\n        - region_id (int): The unique identifier for the new region (i_rgn). Required.\n        - zone_id (int): The ID of the zone (i_zn) this region belongs to. Required.\n        - region_name (str): A descriptive name for the region (x_nm_rgn). Required.\n        - max_x (float): The maximum x-coordinate of the region's bounding box (n_max_x). Required.\n        - max_y (float): The maximum y-coordinate of the region's bounding box (n_max_y). Required.\n        - max_z (float): The maximum z-coordinate of the region's bounding box (n_max_z). Required.\n        - min_x (float): The minimum x-coordinate of the region's bounding box (n_min_x). Required.\n        - min_y (float): The minimum y-coordinate of the region's bounding box (n_min_y). Required.\n        - min_z (float): The minimum z-coordinate of the region's bounding box (n_min_z). Required.\n        - trigger_id (int, optional): The ID of the trigger (i_trg) associated with this region, if any. Defaults to None.\n\nReturns:\n    dict: A JSON response with the following structure:\n        - message (str): A confirmation message indicating success (\"Region added successfully\").\n        - region_id (int or str): The ID of the newly created region (i_rgn).\n\nRaises:\n    HTTPException:\n        - 400: If the request data is invalid or the zone_id/trigger_id does not exist.\n        - 500: If the database operation fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X POST \"http://192.168.210.226:8000/add_region\"              -H \"Content-Type: application/json\"              -d '{\n               \"region_id\": 1001,\n               \"zone_id\": 10,\n               \"region_name\": \"Lobby Area\",\n               \"max_x\": 50.0,\n               \"max_y\": 50.0,\n               \"max_z\": 10.0,\n               \"min_x\": 0.0,\n               \"min_y\": 0.0,\n               \"min_z\": 0.0,\n               \"trigger_id\": null\n             }'\n    ```\n    Response:\n    ```json\n    {\n      \"message\": \"Region added successfully\",\n      \"region_id\": 1001\n    }\n    ```\n\nUse Case:\n    - **Scenario**: A facility manager needs to define a new region within a zone (e.g., a \"Lobby Area\" in a building zone) to track device movements or set up a trigger for entry/exit alerts. This endpoint is used to create the region with specific spatial boundaries.\n    - **Example**: In a hospital, a region is created for the \"Emergency Room\" zone to monitor patient tags entering or leaving the area.\n\nHint:\n    - Ensure the `zone_id` exists in the `zones` table before calling this endpoint. You can verify this using the `/get_parent_zones` endpoint.\n    - If associating with a trigger, confirm the `trigger_id` exists in the `triggers` table using `/list_triggers`.\n    - The coordinates (min_x, max_x, etc.) should align with the map's coordinate system, which can be checked via `/get_map_metadata/{map_id}`.","operationId":"add_region_api_add_region_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegionRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_region/{region_id}":{"delete":{"tags":["regions"],"summary":"Delete Region","description":"Delete a region from the ParcoRTLS system by its ID.\n\nThis endpoint removes a region from the `regions` table, including any associated vertices, using the stored procedure `usp_region_delete`. Deleting a region is necessary when reorganizing spatial areas or removing outdated regions. Note that associated vertices are also deleted, as they are linked via the `i_rgn` foreign key.\n\nParameters:\n    region_id (int): Path parameter specifying the ID of the region to delete (i_rgn). Required.\n\nReturns:\n    dict: A JSON response with the following structure:\n        - message (str): A confirmation message indicating success (\"Region deleted successfully\").\n\nRaises:\n    HTTPException:\n        - 404: If the region_id does not exist in the `regions` table.\n        - 500: If the database operation fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X DELETE \"http://192.168.210.226:8000/delete_region/1001\"\n    ```\n    Response:\n    ```json\n    {\n      \"message\": \"Region deleted successfully\"\n    }\n    ```\n\nUse Case:\n    - **Scenario**: A facility manager needs to remove a region that is no longer relevant, such as a temporary event space in a zone.\n    - **Example**: In a warehouse, a region defined for a seasonal storage area is deleted after the season ends.\n\nHint:\n    - Before deleting, verify the region exists using `/get_region_by_id/{region_id}` to avoid unnecessary errors.\n    - If the region is associated with a trigger, ensure the trigger is updated or deleted separately using `/delete_trigger/{trigger_id}` to maintain data consistency.\n    - Deleting a region will cascade to its vertices, so ensure no critical data is lost.","operationId":"delete_region_api_delete_region__region_id__delete","parameters":[{"name":"region_id","in":"path","required":true,"schema":{"type":"integer","title":"Region Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_region":{"put":{"tags":["regions"],"summary":"Edit Region","description":"Update an existing region's details in the ParcoRTLS system.\n\nThis endpoint modifies the attributes of a region in the `regions` table, such as its name, spatial boundaries, or associated zone/trigger, using the stored procedure `usp_region_edit`. It is used to adjust region configurations when spatial definitions or associations change.\n\nParameters:\n    request (RegionRequest): A Pydantic model containing the following fields:\n        - region_id (int): The ID of the region to update (i_rgn). Required.\n        - zone_id (int): The ID of the zone (i_zn) this region belongs to. Required.\n        - region_name (str): A descriptive name for the region (x_nm_rgn). Required.\n        - max_x (float): The maximum x-coordinate of the region's bounding box (n_max_x). Required.\n        - max_y (float): The maximum y-coordinate of the region's bounding box (n_max_y). Required.\n        - max_z (float): The maximum z-coordinate of the region's bounding box (n_max_z). Required.\n        - min_x (float): The minimum x-coordinate of the region's bounding box (n_min_x). Required.\n        - min_y (float): The minimum y-coordinate of the region's bounding box (n_min_y). Required.\n        - min_z (float): The minimum z-coordinate of the region's bounding box (n_min_z). Required.\n        - trigger_id (int, optional): The ID of the trigger (i_trg) associated with this region, if any. Defaults to None.\n\nReturns:\n    dict: A JSON response with the following structure:\n        - message (str): A confirmation message indicating success (\"Region edited successfully\").\n\nRaises:\n    HTTPException:\n        - 400: If the request data is invalid or the zone_id/trigger_id does not exist.\n        - 404: If the region_id does not exist in the `regions` table.\n        - 500: If the database operation fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X PUT \"http://192.168.210.226:8000/edit_region\"              -H \"Content-Type: application/json\"              -d '{\n               \"region_id\": 1001,\n               \"zone_id\": 10,\n               \"region_name\": \"Updated Lobby Area\",\n               \"max_x\": 60.0,\n               \"max_y\": 60.0,\n               \"max_z\": 12.0,\n               \"min_x\": 0.0,\n               \"min_y\": 0.0,\n               \"min_z\": 0.0,\n               \"trigger_id\": 2001\n             }'\n    ```\n    Response:\n    ```json\n    {\n      \"message\": \"Region edited successfully\"\n    }\n    ```\n\nUse Case:\n    - **Scenario**: A facility manager needs to expand the boundaries of a region due to a physical expansion of the area or update its name for clarity.\n    - **Example**: In a retail store, the region for the \"Checkout Area\" is updated to include additional checkout counters.\n\nHint:\n    - Verify the new `zone_id` and `trigger_id` exist using `/get_parent_zones` and `/list_triggers` before updating.\n    - Ensure the new coordinates are consistent with the map's coordinate system, which can be validated using `/get_map_metadata/{map_id}`.\n    - If vertices need updating, use the `/update_vertices` endpoint in `vertex.py` after editing the region.","operationId":"edit_region_api_edit_region_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegionRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_region_by_id/{region_id}":{"get":{"tags":["regions"],"summary":"Get Region By Id","description":"Retrieve details of a specific region by its ID in the ParcoRTLS system.\n\nThis endpoint fetches the details of a region from the `regions` table using the stored procedure `usp_region_select_by_id`. It returns attributes such as the region's name, zone ID, spatial boundaries, and associated trigger (if any). This is useful for inspecting or validating a region's configuration.\n\nParameters:\n    region_id (int): Path parameter specifying the ID of the region to retrieve (i_rgn). Required.\n\nReturns:\n    dict: A JSON response containing the region's details, with fields such as:\n        - i_rgn (int): Region ID.\n        - i_zn (int): Zone ID.\n        - x_nm_rgn (str): Region name.\n        - n_max_x (float): Maximum x-coordinate.\n        - n_max_y (float): Maximum y-coordinate.\n        - n_max_z (float): Maximum z-coordinate.\n        - n_min_x (float): Minimum x-coordinate.\n        - n_min_y (float): Minimum y-coordinate.\n        - n_min_z (float): Minimum z-coordinate.\n        - i_trg (int, optional): Trigger ID, if associated.\n\nRaises:\n    HTTPException:\n        - 404: If the region_id does not exist in the `regions` table.\n        - 500: If the database operation fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_region_by_id/1001\"\n    ```\n    Response:\n    ```json\n    {\n      \"i_rgn\": 1001,\n      \"i_zn\": 10,\n      \"x_nm_rgn\": \"Lobby Area\",\n      \"n_max_x\": 50.0,\n      \"n_max_y\": 50.0,\n      \"n_max_z\": 10.0,\n      \"n_min_x\": 0.0,\n      \"n_min_y\": 0.0,\n      \"n_min_z\": 0.0,\n      \"i_trg\": null\n    }\n    ```\n\nUse Case:\n    - **Scenario**: A developer needs to verify the configuration of a region before associating it with a new trigger or updating its vertices.\n    - **Example**: In a museum, the region for an \"Exhibit Hall\" is checked to ensure its boundaries align with the physical space.\n\nHint:\n    - Use this endpoint to confirm a region's details before editing it with `/edit_region` or deleting it with `/delete_region`.\n    - To retrieve the vertices associated with this region, use `/get_zone_vertices/{zone_id}` or `/get_regions_by_zone/{zone_id}`.","operationId":"get_region_by_id_api_get_region_by_id__region_id__get","parameters":[{"name":"region_id","in":"path","required":true,"schema":{"type":"integer","title":"Region Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_regions_by_zone/{zone_id}":{"get":{"tags":["regions"],"summary":"Get Regions By Zone","description":"Fetch all regions and their associated vertices for a given zone ID in the ParcoRTLS system.\n\nThis endpoint retrieves all regions associated with a specified zone from the `regions` table and their corresponding vertices from the `vertices` table. It uses raw SQL queries to ensure accurate filtering by `i_zn` (zone ID), combining region and vertex data into a structured response. This is essential for visualizing or analyzing the spatial layout of regions within a zone.\n\nParameters:\n    zone_id (int): Path parameter specifying the ID of the zone (i_zn) to filter regions by. Required.\n\nReturns:\n    list: A list of dictionaries, each containing combined region and vertex details. If vertices exist, each dictionary includes:\n        - i_rgn (int): Region ID.\n        - i_zn (int): Zone ID.\n        - x_nm_rgn (str): Region name.\n        - n_max_x (float): Maximum x-coordinate.\n        - n_max_y (float): Maximum y-coordinate.\n        - n_max_z (float): Maximum z-coordinate.\n        - n_min_x (float): Minimum x-coordinate.\n        - n_min_y (float): Minimum y-coordinate.\n        - n_min_z (float): Minimum z-coordinate.\n        - i_trg (int, optional): Trigger ID, if associated.\n        - i_vtx (int): Vertex ID.\n        - n_x (float): Vertex x-coordinate.\n        - n_y (float): Vertex y-coordinate.\n        - n_z (float): Vertex z-coordinate.\n        - n_ord (int): Vertex order.\n    If no vertices exist, the list contains region details only (same fields minus vertex-specific ones).\n\nRaises:\n    HTTPException:\n        - 404: If no regions are found for the specified zone_id.\n        - 500: If the database query fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_regions_by_zone/10\"\n    ```\n    Response:\n    ```json\n    [\n      {\n        \"i_rgn\": 1001,\n        \"i_zn\": 10,\n        \"x_nm_rgn\": \"Lobby Area\",\n        \"n_max_x\": 50.0,\n        \"n_max_y\": 50.0,\n        \"n_max_z\": 10.0,\n        \"n_min_x\": 0.0,\n        \"n_min_y\": 0.0,\n        \"n_min_z\": 0.0,\n        \"i_trg\": null,\n        \"i_vtx\": 5001,\n        \"n_x\": 0.0,\n        \"n_y\": 0.0,\n        \"n_z\": 0.0,\n        \"n_ord\": 1\n      },\n      ...\n    ]\n    ```\n\nUse Case:\n    - **Scenario**: A facility manager needs to visualize all regions within a zone, including their vertices, to plan device placements or trigger configurations.\n    - **Example**: In an office building, this endpoint is used to retrieve all regions in the \"Main Floor\" zone to display their boundaries on a map in the Zone Viewer.\n\nHint:\n    - This endpoint is particularly useful for rendering region boundaries in the React frontend. Use the returned vertices to draw polygons on a map.\n    - To check if a tag is within a region (e.g., for Zone L1 zones), combine this endpoint with `/trigger_contains_point/{trigger_id}` or `/zones_by_point`.\n    - The endpoint uses raw queries instead of `usp_regions_select_by_zone` due to a previous issue where zone_id was misinterpreted as i_rgn. This ensures accurate filtering.","operationId":"get_regions_by_zone_api_get_regions_by_zone__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_all_regions":{"get":{"tags":["regions"],"summary":"Get All Regions","description":"Retrieve all regions from the ParcoRTLS system database.\n\nThis endpoint fetches all regions from the `regions` table using the stored procedure `usp_region_list`. It provides a comprehensive list of all regions, including their attributes, which is useful for system-wide analysis or auditing.\n\nParameters:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing region details with fields such as:\n        - i_rgn (int): Region ID.\n        - i_zn (int): Zone ID.\n        - x_nm_rgn (str): Region name.\n        - n_max_x (float): Maximum x-coordinate.\n        - n_max_y (float): Maximum y-coordinate.\n        - n_max_z (float): Maximum z-coordinate.\n        - n_min_x (float): Minimum x-coordinate.\n        - n_min_y (float): Minimum y-coordinate.\n        - n_min_z (float): Minimum z-coordinate.\n        - i_trg (int, optional): Trigger ID, if associated.\n\nRaises:\n    HTTPException:\n        - 404: If no regions are found in the database.\n        - 500: If the database query fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_all_regions\"\n    ```\n    Response:\n    ```json\n    [\n      {\n        \"i_rgn\": 1001,\n        \"i_zn\": 10,\n        \"x_nm_rgn\": \"Lobby Area\",\n        \"n_max_x\": 50.0,\n        \"n_max_y\": 50.0,\n        \"n_max_z\": 10.0,\n        \"n_min_x\": 0.0,\n        \"n_min_y\": 0.0,\n        \"n_min_z\": 0.0,\n        \"i_trg\": null\n      },\n      ...\n    ]\n    ```\n\nUse Case:\n    - **Scenario**: A system administrator needs to audit all regions in the system to ensure proper configuration or to generate a report.\n    - **Example**: In a university campus, this endpoint is used to list all regions across all buildings for a spatial analysis report.\n\nHint:\n    - Use this endpoint for bulk operations or when initializing a frontend application that needs a complete list of regions.\n    - To fetch vertices for these regions, iterate over the returned `i_zn` values and call `/get_regions_by_zone/{zone_id}`.\n    - For a campus-level overview, combine with `/get_campus_zones` from `zoneviewer_routes.py`.","operationId":"get_all_regions_api_get_all_regions_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_all_regions_alt":{"get":{"tags":["regions"],"summary":"Get All Regions Alt","description":"Retrieve all regions from the ParcoRTLS system database using an alternative method.\n\nThis endpoint serves as an alternative to `/get_all_regions`, fetching all regions from the `regions` table using the stored procedure `usp_regions_select`. It provides the same data but may differ in implementation details or performance characteristics, offering flexibility for different use cases.\n\nParameters:\n    None\n\nReturns:\n    list: A list of dictionaries, each containing region details with fields such as:\n        - i_rgn (int): Region ID.\n        - i_zn (int): Zone ID.\n        - x_nm_rgn (str): Region name.\n        - n_max_x (float): Maximum x-coordinate.\n        - n_max_y (float): Maximum y-coordinate.\n        - n_max_z (float): Maximum z-coordinate.\n        - n_min_x (float): Minimum x-coordinate.\n        - n_min_y (float): Minimum y-coordinate.\n        - n_min_z (float): Minimum z-coordinate.\n        - i_trg (int, optional): Trigger ID, if associated.\n\nRaises:\n    HTTPException:\n        - 404: If no regions are found in the database.\n        - 500: If the database query fails or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_all_regions_alt\"\n    ```\n    Response:\n    ```json\n    [\n      {\n        \"i_rgn\": 1001,\n        \"i_zn\": 10,\n        \"x_nm_rgn\": \"Lobby Area\",\n        \"n_max_x\": 50.0,\n        \"n_max_y\": 50.0,\n        \"n_max_z\": 10.0,\n        \"n_min_x\": 0.0,\n        \"n_min_y\": 0.0,\n        \"n_min_z\": 0.0,\n        \"i_trg\": null\n      },\n      ...\n    ]\n    ```\n\nUse Case:\n    - **Scenario**: A developer needs an alternative method to fetch all regions for testing or performance optimization.\n    - **Example**: In a large-scale deployment, this endpoint is tested to compare query performance against `/get_all_regions`.\n\nHint:\n    - Use this endpoint when experimenting with different database access patterns or when `usp_region_list` is unavailable.\n    - The data returned is identical to `/get_all_regions`, so the same frontend processing logic can be applied.\n    - For campus-specific filtering, combine with `/get_campus_zones/{campus_id}` from `zoneviewer_routes.py`.","operationId":"get_all_regions_alt_api_get_all_regions_alt_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/get_regions_by_trigger/{trigger_id}":{"get":{"tags":["regions"],"summary":"Get Regions By Trigger","description":"Fetch all regions associated with a specific trigger ID in the ParcoRTLS system.\n\nThis endpoint retrieves regions linked to a given trigger from the `regions` table using the stored procedure `usp_regions_select_by_trigger`. It returns region details, including any associated vertices, which is useful for analyzing trigger-related spatial configurations.\n\nParameters:\n    trigger_id (int): Path parameter specifying the ID of the trigger (i_trg) to filter regions by. Required.\n\nReturns:\n    list: A list of dictionaries containing region and vertex details, with fields such as:\n        - i_rgn (int): Region ID.\n        - i_zn (int): Zone ID.\n        - x_nm_rgn (str): Region name.\n        - n_max_x (float): Maximum x-coordinate.\n        - n_max_y (float): Maximum y-coordinate.\n        - n_max_z (float): Maximum z-coordinate.\n        - n_min_x (float): Minimum x-coordinate.\n        - n_min_y (float): Minimum y-coordinate.\n        - n_min_z (float): Minimum z-coordinate.\n        - i_trg (int): Trigger ID.\n        - Additional vertex fields (if applicable), such as i_vtx, n_x, n_y, n_z, n_ord.\n\nRaises:\n    HTTPException:\n        - 404: If no regions are found for the specified trigger_id.\n        - 500: If the database query fails, the stored procedure returns an unexpected response, or an unexpected error occurs.\n\nExample:\n    ```bash\n    curl -X GET \"http://192.168.210.226:8000/get_regions_by_trigger/2001\"\n    ```\n    Response:\n    ```json\n    [\n      {\n        \"i_rgn\": 1002,\n        \"i_zn\": 10,\n        \"x_nm_rgn\": \"Trigger Region\",\n        \"n_max_x\": 30.0,\n        \"n_max_y\": 30.0,\n        \"n_max_z\": 5.0,\n        \"n_min_x\": 10.0,\n        \"n_min_y\": 10.0,\n        \"n_min_z\": 0.0,\n        \"i_trg\": 2001,\n        \"i_vtx\": 5002,\n        \"n_x\": 10.0,\n        \"n_y\": 10.0,\n        \"n_z\": 0.0,\n        \"n_ord\": 1\n      },\n      ...\n    ]\n    ```\n\nUse Case:\n    - **Scenario**: A security team needs to inspect all regions associated with a specific trigger to verify its spatial coverage.\n    - **Example**: In a hospital, this endpoint is used to check the regions linked to an \"Emergency Alert\" trigger to ensure they cover all critical areas.\n\nHint:\n    - Verify the `trigger_id` exists using `/list_triggers` before calling this endpoint.\n    - To check if a tag is within a trigger's region (e.g., for Zone L1 zones), combine this endpoint with `/trigger_contains_point/{trigger_id}`.\n    - The endpoint handles cases where the stored procedure returns a success message dictionary, ensuring proper 404 handling.","operationId":"get_regions_by_trigger_api_get_regions_by_trigger__trigger_id__get","parameters":[{"name":"trigger_id","in":"path","required":true,"schema":{"type":"integer","title":"Trigger Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/delete_vertex/{vertex_id}":{"delete":{"tags":["vertices","vertices"],"summary":"Delete Vertex","description":"Delete a vertex by ID (i_vtx).\n\nArgs:\n    vertex_id: The vertex ID (i_vtx) to delete.\n\nReturns:\n    dict: Success message if deleted.\n\nRaises:\n    HTTPException: 404 if vertex not found, 500 if deletion fails.","operationId":"delete_vertex_api_delete_vertex__vertex_id__delete","parameters":[{"name":"vertex_id","in":"path","required":true,"schema":{"type":"integer","title":"Vertex Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/edit_vertex":{"put":{"tags":["vertices","vertices"],"summary":"Edit Vertex","description":"Edit an kobsexisting vertex by ID (i_vtx) using a raw query (inspired by Zone Viewer).\n\nArgs:\n    vertex_id: The vertex ID (i_vtx) to edit.\n    region_id: The region ID (i_rgn) the vertex belongs to.\n    x: The x-coordinate (n_x).\n    y: The y-coordinate (n_y).\n    z: The z-coordinate (n_z), optional for 3D.\n    order: The order of the vertex (n_ord).\n\nReturns:\n    dict: Success message if edited.\n\nRaises:\n    HTTPException: 404 if vertex not found, 400 if region_id doesn’t exist, 500 if editing fails.","operationId":"edit_vertex_api_edit_vertex_put","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_edit_vertex_api_edit_vertex_put"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/get_vertex_by_id/{vertex_id}":{"get":{"tags":["vertices","vertices"],"summary":"Get Vertex By Id","description":"Fetch vertex details by ID (i_vtx).\n\nArgs:\n    vertex_id: The vertex ID (i_vtx) to fetch.\n\nReturns:\n    dict: Vertex details (i_vtx, n_x, n_y, n_z, n_ord, i_rgn).\n\nRaises:\n    HTTPException: 404 if vertex not found.","operationId":"get_vertex_by_id_api_get_vertex_by_id__vertex_id__get","parameters":[{"name":"vertex_id","in":"path","required":true,"schema":{"type":"integer","title":"Vertex Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/list_vertices":{"get":{"tags":["vertices","vertices"],"summary":"List Vertices","description":"Fetch all vertices.\n\nReturns:\n    list: List of vertex dictionaries (i_vtx, n_x, n_y, n_z, n_ord, i_rgn).\n\nRaises:\n    HTTPException: 404 if no vertices found.","operationId":"list_vertices_api_list_vertices_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/add_vertex":{"post":{"tags":["vertices","vertices"],"summary":"Add Vertex","description":"Add a new vertex using a raw query (since usp_vertex_add is missing).\n\nArgs:\n    region_id: The region ID (i_rgn) the vertex belongs to.\n    x: The x-coordinate (n_x).\n    y: The y-coordinate (n_y).\n    z: The z-coordinate (n_z), optional for 3D.\n    order: The order of the vertex (n_ord).\n\nReturns:\n    dict: Success message with new vertex_id (i_vtx).\n\nRaises:\n    HTTPException: 400 if region_id doesn’t exist, 500 if insertion fails.","operationId":"add_vertex_api_add_vertex_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_add_vertex_api_add_vertex_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/update_vertices":{"post":{"tags":["vertices","vertices"],"summary":"Update Vertices","description":"Update multiple vertices in bulk.\n\nArgs:\n    vertices: List of dictionaries containing vertex_id, x, y, z (optional), and order.\n\nReturns:\n    dict: Success message.\n\nRaises:\n    HTTPException: 404 if a vertex is not found, 500 if update fails.","operationId":"update_vertices_api_update_vertices_post","requestBody":{"content":{"application/json":{"schema":{"items":{"type":"object"},"type":"array","title":"Vertices"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/get_maps":{"get":{"tags":["zonebuilder"],"summary":"Get Maps","description":"Retrieve a list of all available maps from the ParcoRTLS database.\n\nThis endpoint fetches metadata for all maps stored in the `maps` table of the `maint` schema.\nIt is used by the Zone Builder tool in the ParcoRTLS system to display available maps for\ncreating or editing zones. Each map is identified by a unique ID and name, which are returned\nin a structured JSON response for use in the React frontend.\n\nParameters:\n    None\n\nReturns:\n    dict: A JSON object with a single key \"maps\" containing a list of dictionaries. Each dictionary\n          represents a map with the following keys:\n          - map_id (int): The unique identifier of the map (i_map).\n          - name (str): The name of the map (x_nm_map).\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_maps\n    ```\n    Response:\n    ```json\n    {\n        \"maps\": [\n            {\"map_id\": 1, \"name\": \"Campus A Floorplan\"},\n            {\"map_id\": 2, \"name\": \"Building B Layout\"}\n        ]\n    }\n    ```\n\nUse Case:\n    - A facility manager uses the Zone Builder tool to create a new zone (e.g., a room or floor).\n      This endpoint provides the list of available maps to select as the base map for the zone,\n      ensuring the zone is associated with the correct floorplan or layout.\n\nHint:\n    - To verify if a map is associated with a specific campus (Zone L1), cross-reference the\n      returned map_id with the zones table (i_map column) where i_typ_zn = 1.\n    - Ensure the frontend handles cases where the map list is empty by displaying a fallback UI.\n\nErrors:\n    - 500 (Internal Server Error): Raised if there is a database connection issue or an unexpected\n      error occurs during query execution. The error message includes details for debugging.","operationId":"get_maps_zonebuilder_get_maps_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zonebuilder/get_map_data/{map_id}":{"get":{"tags":["zonebuilder"],"summary":"Get Map Data","description":"Fetch map data for the Zone Builder, including the image URL and coordinate bounds.\n\nThis endpoint retrieves metadata for a specific map, identified by its map_id, from the `maps`\ntable in the `maint` schema. It returns the URL to fetch the map image and the map's coordinate\nbounds (min_x, min_y, max_x, max_y), which are used by the Zone Builder tool to render the map\ncorrectly in the React frontend. Unlike some other endpoints, it does not perform a zone lookup.\n\nParameters:\n    map_id (int, required, path): The unique identifier of the map (i_map) to fetch data for.\n\nReturns:\n    dict: A JSON object with the following keys:\n          - imageUrl (str): The URL to fetch the map image (e.g., /zonebuilder/get_map/{map_id}).\n          - bounds (list): A list of two lists representing the map's coordinate bounds:\n            - [[min_y, min_x], [max_y, max_x]].\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_map_data/1\n    ```\n    Response:\n    ```json\n    {\n        \"imageUrl\": \"/zonebuilder/get_map/1\",\n        \"bounds\": [[0.0, 0.0], [100.0, 200.0]]\n    }\n    ```\n\nUse Case:\n    - When a user selects a map in the Zone Builder tool to create a new zone, this endpoint\n      provides the necessary data to display the map image and align it with the coordinate\n      system, allowing the user to draw zone boundaries accurately.\n\nHint:\n    - The imageUrl returned is relative to the backend server. The frontend should prepend the\n      base URL (http://192.168.210.226:8000) to construct the full URL.\n    - Use this endpoint in conjunction with /get_map/{map_id} to fetch the actual image data.\n\nErrors:\n    - 404 (Not Found): Raised if no map is found for the provided map_id.\n    - 500 (Internal Server Error): Raised if there is a database connection issue or an unexpected\n      error occurs during query execution.","operationId":"get_map_data_zonebuilder_get_map_data__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/get_map_metadata/{map_id}":{"get":{"tags":["zonebuilder"],"summary":"Get Map Metadata","description":"Retrieve metadata for a specific map, including its ID, name, and coordinate bounds.\n\nThis endpoint fetches metadata for a map identified by its map_id from the `maps` table in the\n`maint` schema. It provides detailed information such as the map's name and coordinate bounds\n(min_x, min_y, max_x, max_y), which are used by the Zone Builder tool to configure map displays\nor validate zone placements in the ParcoRTLS system.\n\nParameters:\n    map_id (int, required, path): The unique identifier of the map (i_map) to fetch metadata for.\n\nReturns:\n    dict: A JSON object with the following keys:\n          - map_id (int): The unique identifier of the map.\n          - name (str): The name of the map (x_nm_map).\n          - min_x (float): The minimum x-coordinate of the map.\n          - min_y (float): The minimum y-coordinate of the map.\n          - max_x (float): The maximum x-coordinate of the map.\n          - max_y (float): The maximum y-coordinate of the map.\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_map_metadata/1\n    ```\n    Response:\n    ```json\n    {\n        \"map_id\": 1,\n        \"name\": \"Campus A Floorplan\",\n        \"min_x\": 0.0,\n        \"min_y\": 0.0,\n        \"max_x\": 200.0,\n        \"max_y\": 100.0\n    }\n    ```\n\nUse Case:\n    - A developer integrating the Zone Builder tool needs to display map metadata in the UI or\n      validate that a zone's vertices fall within the map's bounds. This endpoint provides the\n      necessary metadata for such tasks.\n\nHint:\n    - Use this endpoint to pre-validate map coordinates before creating zones or vertices to\n      ensure they align with the map's bounds.\n    - For campus-level checks (Zone L1), verify the map_id is associated with a zone where\n      i_typ_zn = 1 in the zones table.\n\nErrors:\n    - 404 (Not Found): Raised if no metadata is found for the provided map_id.\n    - 500 (Internal Server Error): Raised if there is a database connection issue or an unexpected\n      error occurs during query execution.","operationId":"get_map_metadata_zonebuilder_get_map_metadata__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/get_parent_zones":{"get":{"tags":["zonebuilder"],"summary":"Get Parent Zones","description":"Fetch all zones to allow selection as parent zones in the Zone Builder.\n\nThis endpoint retrieves a list of all zones from the `zones` table in the `maint` schema,\nsorted by zone type and name. It is used in the Zone Builder tool to populate a dropdown or\nlist of potential parent zones when creating a new zone, supporting the hierarchical structure\nof zones in the ParcoRTLS system (e.g., campuses, buildings, floors).\n\nParameters:\n    None\n\nReturns:\n    dict: A JSON object with a single key \"zones\" containing a list of dictionaries. Each dictionary\n          represents a zone with the following keys:\n          - zone_id (int): The unique identifier of the zone (i_zn).\n          - name (str): The name of the zone (x_nm_zn).\n          - level (int): The zone type (i_typ_zn, e.g., 1 for campus, 2 for building).\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_parent_zones\n    ```\n    Response:\n    ```json\n    {\n        \"zones\": [\n            {\"zone_id\": 1, \"name\": \"Main Campus\", \"level\": 1},\n            {\"zone_id\": 2, \"name\": \"Building A\", \"level\": 2}\n        ]\n    }\n    ```\n\nUse Case:\n    - When creating a new zone in the Zone Builder, a user needs to specify a parent zone (e.g.,\n      a floor zone under a building). This endpoint provides the list of all zones that can be\n      selected as parents, ensuring the zone hierarchy is maintained.\n\nHint:\n    - For campus-level operations (Zone L1), filter the response to include only zones where\n      level = 1 to identify top-level campuses.\n    - The frontend should handle cases where no zones are returned by prompting the user to create\n      a top-level zone first.\n\nErrors:\n    - 500 (Internal Server Error): Raised if the database pool is unavailable or an unexpected\n      error occurs during query execution. The error message includes details for debugging.","operationId":"get_parent_zones_zonebuilder_get_parent_zones_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zonebuilder/get_parent_zones_for_trigger_demo":{"get":{"tags":["zonebuilder"],"summary":"Get Parent Zones For Trigger Demo","description":"Fetch all zones with additional metadata for trigger demo purposes.\n\nThis endpoint retrieves a list of all zones from the `zones` table, including their map ID and\nparent zone ID, sorted by zone type and name. It is designed for experimental or demonstration\npurposes in the ParcoRTLS system, particularly for testing trigger-related functionalities in the\nZone Builder tool, where additional zone metadata (e.g., map associations) is required.\n\nParameters:\n    None\n\nReturns:\n    dict: A JSON object with a single key \"zones\" containing a list of dictionaries. Each dictionary\n          represents a zone with the following keys:\n          - zone_id (int): The unique identifier of the zone (i_zn).\n          - name (str): The name of the zone (x_nm_zn).\n          - level (int): The zone type (i_typ_zn, e.g., 1 for campus).\n          - i_map (int): The map ID associated with the zone (i_map).\n          - parent_zone_id (int or None): The ID of the parent zone (i_pnt_zn), or None if top-level.\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_parent_zones_for_trigger_demo\n    ```\n    Response:\n    ```json\n    {\n        \"zones\": [\n            {\n                \"zone_id\": 1,\n                \"name\": \"Main Campus\",\n                \"level\": 1,\n                \"i_map\": 1,\n                \"parent_zone_id\": null\n            },\n            {\n                \"zone_id\": 2,\n                \"name\": \"Building A\",\n                \"level\": 2,\n                \"i_map\": 1,\n                \"parent_zone_id\": 1\n            }\n        ]\n    }\n    ```\n\nUse Case:\n    - During a demonstration of trigger functionality, a developer needs to select zones to\n      associate with triggers (e.g., entry/exit alerts). This endpoint provides comprehensive zone\n      data, including map and hierarchy information, to facilitate testing trigger configurations.\n\nHint:\n    - Use this endpoint for trigger-related demos to ensure zones are correctly associated with\n      maps. Cross-reference i_map with the /get_map_metadata endpoint for map details.\n    - For campus-level checks, filter zones where level = 1 and parent_zone_id is null.\n\nErrors:\n    - 500 (Internal Server Error): Raised if the database pool is unavailable or an unexpected\n      error occurs during query execution. The error message includes details for debugging.","operationId":"get_parent_zones_for_trigger_demo_zonebuilder_get_parent_zones_for_trigger_demo_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zonebuilder/test_db_connection":{"get":{"tags":["zonebuilder"],"summary":"Test Db Connection","description":"Test the database connection to the `maint` schema.\n\nThis endpoint performs a simple query to verify connectivity to the `maint` schema in the\nParcoRTLS database. It is primarily used for debugging and ensuring the backend can communicate\nwith the PostgreSQL database, which is critical for all Zone Builder operations.\n\nParameters:\n    None\n\nReturns:\n    dict: A JSON object with the following keys:\n          - status (str): Indicates the connection status (\"success\").\n          - result (int): The result of the test query (typically 1).\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/test_db_connection\n    ```\n    Response:\n    ```json\n    {\n        \"status\": \"success\",\n        \"result\": 1\n    }\n    ```\n\nUse Case:\n    - A system administrator troubleshooting connectivity issues between the FastAPI backend and\n      the PostgreSQL database uses this endpoint to confirm that the database pool is operational\n      before deploying new Zone Builder features.\n\nHint:\n    - Run this endpoint after server restarts or configuration changes to verify database\n      connectivity.\n    - If this endpoint fails, check the DB_CONFIG settings and ensure the PostgreSQL server is\n      running at localhost:5432.\n\nErrors:\n    - 500 (Internal Server Error): Raised if the database pool is unavailable or the test query\n      fails. The error message includes details for debugging.","operationId":"test_db_connection_zonebuilder_test_db_connection_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zonebuilder/get_zone_types":{"get":{"tags":["zonebuilder"],"summary":"Get Zone Types","description":"Fetch all zone types from the ParcoRTLS database.\n\nThis endpoint retrieves a list of zone types from the `tlkzonetypes` table in the `maint` schema.\nZone types define the hierarchical levels of zones (e.g., campus, building, floor) in the\nParcoRTLS system. The endpoint is used by the Zone Builder tool to populate a dropdown or list\nof zone types when creating or editing zones.\n\nParameters:\n    None\n\nReturns:\n    list: A list of dictionaries, each representing a zone type with the following keys:\n          - zone_level (int): The zone type ID (i_typ_zn, e.g., 1 for campus).\n          - zone_name (str): The description of the zone type (x_dsc_zn).\n          - api_endpoint (str): The endpoint to create a zone (hardcoded as \"/create_zone\").\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_zone_types\n    ```\n    Response:\n    ```json\n    [\n        {\"zone_level\": 1, \"zone_name\": \"Campus\", \"api_endpoint\": \"/create_zone\"},\n        {\"zone_level\": 2, \"zone_name\": \"Building\", \"api_endpoint\": \"/create_zone\"}\n    ]\n    ```\n\nUse Case:\n    - When creating a new zone in the Zone Builder, a user needs to select the zone type (e.g.,\n      campus or floor). This endpoint provides the available zone types to ensure the zone is\n      correctly categorized in the hierarchy.\n\nHint:\n    - For campus-level zones, select zone_level = 1. This can be used to check if a tag is on a\n      campus by associating devices with zones of this type.\n    - The api_endpoint field is currently hardcoded. Future enhancements could make it dynamic\n      based on zone type.\n\nErrors:\n    - 500 (Internal Server Error): Raised if there is a database connection issue or an unexpected\n      error occurs during query execution.","operationId":"get_zone_types_zonebuilder_get_zone_types_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zonebuilder/get_zone_vertices/{zone_id}":{"get":{"tags":["zonebuilder"],"summary":"Get Zone Vertices","description":"Fetch vertices for a specific zone, excluding child zones and trigger regions.\n\nThis endpoint retrieves the vertices defining the boundary of a specific zone from the `vertices`\nand `regions` tables in the `maint` schema. It excludes vertices from child zones and trigger-related\nregions, ensuring only the target zone's boundary is returned. This is used in the Zone Builder\ntool to display or edit a zone's shape in the ParcoRTLS system.\n\nParameters:\n    zone_id (int, required, path): The unique identifier of the zone (i_zn) to fetch vertices for.\n\nReturns:\n    dict: A JSON object with a single key \"vertices\" containing a list of dictionaries. Each dictionary\n          represents a vertex with the following keys:\n          - i_vtx (int): The vertex ID.\n          - i_rgn (int): The region ID associated with the vertex.\n          - n_x (float): The x-coordinate.\n          - n_y (float): The y-coordinate.\n          - n_z (float): The z-coordinate (typically 0 for 2D zones).\n          - n_ord (int): The order of the vertex in the boundary.\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_zone_vertices/1\n    ```\n    Response:\n    ```json\n    {\n        \"vertices\": [\n            {\"i_vtx\": 1, \"i_rgn\": 1, \"n_x\": 0.0, \"n_y\": 0.0, \"n_z\": 0.0, \"n_ord\": 1},\n            {\"i_vtx\": 2, \"i_rgn\": 1, \"n_x\": 10.0, \"n_y\": 0.0, \"n_z\": 0.0, \"n_ord\": 2}\n        ]\n    }\n    ```\n\nUse Case:\n    - A user editing a zone's boundary in the Zone Builder needs to visualize the current shape.\n      This endpoint provides the vertex coordinates to render the zone's polygon on the map.\n\nHint:\n    - For campus-level zones (i_typ_zn = 1), use this endpoint to check if a tag's coordinates\n      (from positionhistory) fall within the zone's boundary using a point-in-polygon algorithm.\n    - If no vertices are returned, the zone may not have a defined boundary yet.\n\nErrors:\n    - 500 (Internal Server Error): Raised if there is a database connection issue or an unexpected\n      error occurs during query execution.\n    - Returns {\"vertices\": []} if no vertices are found for the zone_id (not an error).","operationId":"get_zone_vertices_zonebuilder_get_zone_vertices__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/create_zone":{"post":{"tags":["zonebuilder"],"summary":"Create Zone","description":"Create a new zone with associated region and vertices.\n\nThis endpoint creates a new zone in the `zones` table, an associated region in the `regions` table,\nand vertices in the `vertices` table in the `maint` schema. It is a core function of the Zone Builder\ntool, allowing users to define new zones (e.g., rooms, floors, campuses) with specific boundaries\nand hierarchical relationships in the ParcoRTLS system.\n\nParameters:\n    data (dict, required, body): A JSON object containing the following keys:\n        - zone_name (str, required): The name of the zone (x_nm_zn).\n        - map_id (int, required): The ID of the associated map (i_map).\n        - zone_level (int, required): The zone type (i_typ_zn, e.g., 1 for campus).\n        - parent_zone_id (int, optional): The ID of the parent zone (i_pnt_zn), or null for top-level zones.\n        - vertices (list, optional): A list of dictionaries, each with:\n            - n_x (float): The x-coordinate.\n            - n_y (float): The y-coordinate.\n            - n_z (float): The z-coordinate (typically 0 for 2D zones).\n\nReturns:\n    dict: A JSON object with the following keys:\n          - zone_id (int): The ID of the newly created zone (i_zn).\n          - message (str): A success message (\"Zone created successfully\").\n\nExample:\n    ```bash\n    curl -X POST http://192.168.210.226:8000/zonebuilder/create_zone         -H \"Content-Type: application/json\"         -d '{\n        \"zone_name\": \"Room 101\",\n        \"map_id\": 1,\n        \"zone_level\": 4,\n        \"parent_zone_id\": 2,\n        \"vertices\": [\n            {\"n_x\": 0.0, \"n_y\": 0.0, \"n_z\": 0.0},\n            {\"n_x\": 10.0, \"n_y\": 0.0, \"n_z\": 0.0},\n            {\"n_x\": 10.0, \"n_y\": 10.0, \"n_z\": 0.0}\n        ]\n    }'\n    ```\n    Response:\n    ```json\n    {\n        \"zone_id\": 3,\n        \"message\": \"Zone created successfully\"\n    }\n    ```\n\nUse Case:\n    - A facility manager uses the Zone Builder to create a new room zone within a building. They\n      specify the room's name, associate it with a floorplan (map_id), set its type as a room\n      (zone_level=4), link it to a parent building (parent_zone_id), and define its boundary\n      with vertices.\n\nHint:\n    - For campus-level zones (zone_level=1), set parent_zone_id to null to indicate a top-level\n      zone. This is useful for checking if tags are within a campus boundary.\n    - Validate vertices against the map's bounds (from /get_map_metadata) before submission to\n      ensure they are within the map's coordinate system.\n\nErrors:\n    - 400 (Bad Request): Raised if required fields (zone_name, map_id, zone_level) are missing or\n      if map_id or zone_level are not integers.\n    - 500 (Internal Server Error): Raised if zone creation fails due to database issues or unexpected\n      errors.","operationId":"create_zone_zonebuilder_create_zone_post","requestBody":{"content":{"application/json":{"schema":{"type":"object","title":"Data"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/get_map/{map_id}":{"get":{"tags":["zonebuilder"],"summary":"Get Map","description":"Fetch the binary image data for a specific map.\n\nThis endpoint retrieves the binary image data and format for a map identified by its map_id from\nthe `maps` table in the `maint` schema. It returns the image as a response, which is used by the\nZone Builder tool to display the map in the React frontend for zone creation or editing.\n\nParameters:\n    map_id (int, required, path): The unique identifier of the map (i_map) to fetch.\n\nReturns:\n    Response: A FastAPI Response object containing the binary image data with the appropriate\n              media type (e.g., image/png, image/jpeg) based on the map's format (x_format).\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/get_map/1 --output map.png\n    ```\n    Response: Binary image data (saved as map.png in the example).\n\nUse Case:\n    - When a user selects a map in the Zone Builder to create or edit a zone, this endpoint\n      provides the actual image data to render the map in the UI, allowing the user to visualize\n      the floorplan or layout.\n\nHint:\n    - Use this endpoint in conjunction with /get_map_data or /get_map_metadata to get the map's\n      bounds for proper scaling and alignment in the frontend.\n    - Ensure CORS is configured to allow the React frontend (http://192.168.210.226:3000) to\n      access the image.\n\nErrors:\n    - 404 (Not Found): Raised if no map is found for the provided map_id.\n    - 500 (Internal Server Error): Raised if there is a database connection issue or an unexpected\n      error occurs during query execution.","operationId":"get_map_zonebuilder_get_map__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/api/add_device_type":{"post":{"tags":["zonebuilder"],"summary":"Add Device Type","description":"Add a new device type to the ParcoRTLS database.\n\nThis endpoint inserts a new device type into the `tlkdevicetypes` table in the `maint` schema.\nDevice types categorize devices (e.g., tags, anchors) in the ParcoRTLS system, and this endpoint\nis used in the Zone Builder to define new categories for devices associated with zones.\n\nParameters:\n    data (dict, required, body): A JSON object with the following key:\n        - description (str, required): The description of the device type (x_dsc_dev, max 50 characters).\n\nReturns:\n    dict: A JSON object with the following key:\n          - type_id (int): The ID of the newly created device type (i_typ_dev).\n\nExample:\n    ```bash\n    curl -X POST http://192.168.210.226:8000/zonebuilder/api/add_device_type         -H \"Content-Type: application/json\"         -d '{\"description\": \"UWB Tag\"}'\n    ```\n    Response:\n    ```json\n    {\"type_id\": 1}\n    ```\n\nUse Case:\n    - An administrator configuring the ParcoRTLS system adds a new device type (e.g., \"UWB Tag\")\n      to categorize tracking devices used in zones, ensuring accurate device management.\n\nHint:\n    - Validate the description length (≤50 characters) on the frontend to avoid 400 errors.\n    - After adding a device type, use /api/get_all_devices to verify devices associated with the\n      new type.\n\nErrors:\n    - 400 (Bad Request): Raised if the description is missing or exceeds 50 characters.\n    - 500 (Internal Server Error): Raised if the insertion fails due to database issues or\n      unexpected errors.","operationId":"add_device_type_zonebuilder_api_add_device_type_post","requestBody":{"content":{"application/json":{"schema":{"type":"object","title":"Data"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/api/get_all_devices":{"get":{"tags":["zonebuilder"],"summary":"Get All Devices","description":"Fetch all devices with their associated zone IDs from the ParcoRTLS database.\n\nThis endpoint retrieves a comprehensive list of all devices stored in the `devices` table of the\n`maint` schema, including their associated zone IDs. It primarily uses the `usp_device_select_all`\nstored procedure to fetch device data, with a fallback to a raw SQL query if the stored procedure\nfails. This endpoint is integral to the Zone Builder tool, enabling users to view and manage devices\n(e.g., UWB tags, anchors) within specific zones for real-time location tracking in the ParcoRTLS system.\n\nParameters:\n    None\n\nReturns:\n    list: A list of dictionaries, each representing a device with the following keys:\n          - x_id_dev (str): The unique identifier of the device (x_id_dev).\n          - i_typ_dev (int): The device type ID (i_typ_dev, from tlkdevicetypes).\n          - x_nm_dev (str or None): The name of the device (x_nm_dev).\n          - d_srv_bgn (str or None): The start date of service in ISO format (d_srv_bgn).\n          - d_srv_end (str or None): The end date of service in ISO format (d_srv_end).\n          - n_moe_x (float or None): The x-coordinate margin of error (n_moe_x).\n          - n_moe_y (float or None): The y-coordinate margin of error (n_moe_y).\n          - n_moe_z (float or None): The z-coordinate margin of error (n_moe_z).\n          - f_log (bool): Flag indicating whether logging is enabled (f_log).\n          - zone_id (int or None): The ID of the associated zone (zone_id).\n\nExample:\n    ```bash\n    curl -X GET http://192.168.210.226:8000/zonebuilder/api/get_all_devices\n    ```\n    Response:\n    ```json\n    [\n        {\n            \"x_id_dev\": \"TAG001\",\n            \"i_typ_dev\": 1,\n            \"x_nm_dev\": \"Tag 1\",\n            \"d_srv_bgn\": \"2025-04-01T00:00:00\",\n            \"d_srv_end\": null,\n            \"n_moe_x\": 10.0,\n            \"n_moe_y\": 20.0,\n            \"n_moe_z\": 0.0,\n            \"f_log\": false,\n            \"zone_id\": 1\n        },\n        {\n            \"x_id_dev\": \"TAG002\",\n            \"i_typ_dev\": 1,\n            \"x_nm_dev\": \"Tag 2\",\n            \"d_srv_bgn\": \"2025-04-02T00:00:00\",\n            \"d_srv_end\": null,\n            \"n_moe_x\": 15.0,\n            \"n_moe_y\": 25.0,\n            \"n_moe_z\": 0.0,\n            \"f_log\": false,\n            \"zone_id\": 2\n        }\n    ]\n    ```\n\nUse Case:\n    - A facility manager uses the Zone Builder tool to review all devices deployed across a campus\n      (zone_id with i_typ_zn=1) to ensure each UWB tag is correctly assigned to its respective zone\n      for accurate tracking. This endpoint provides a complete inventory of devices for monitoring\n      and maintenance purposes.\n\nHint:\n    - To check if a tag is on a campus, filter devices where `zone_id` corresponds to a zone with\n      `i_typ_zn=1` in the `zones` table. Combine with `/get_zone_vertices/{zone_id}` to verify if\n      the tag's coordinates (n_moe_x, n_moe_y) are within the campus boundary.\n    - The fallback mechanism ensures robustness. If the stored procedure fails, the raw query\n      retrieves data directly from the `devices` table, but it may lack additional processing\n      provided by `usp_device_select_all`.\n\nErrors:\n    - 500 (Internal Server Error): Raised if both the stored procedure and the fallback raw query\n      fail due to database connectivity issues or other unexpected errors. The error message\n      includes details for debugging.","operationId":"get_all_devices_zonebuilder_api_get_all_devices_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zonebuilder/api/add_device":{"post":{"tags":["zonebuilder"],"summary":"Add Device","description":"Add a new device with an associated zone ID to the ParcoRTLS database.\n\nThis endpoint inserts a new device into the `devices` table in the `maint` schema, linking it to a\nspecific zone for real-time location tracking. It is a critical function in the Zone Builder tool,\nenabling the registration of new devices such as UWB tags or anchors within the ParcoRTLS system.\nThe device is assigned a zone ID to associate it with a specific location (e.g., a room or campus).\n\nParameters:\n    device_id (str, required, form): The unique identifier for the device (x_id_dev).\n    device_type (int, required, form): The device type ID (i_typ_dev), referencing a type in the\n                                      `tlkdevicetypes` table.\n    device_name (str, optional, form): The human-readable name of the device (x_nm_dev).\n    n_moe_x (float, optional, form): The x-coordinate margin of error (n_moe_x), representing the\n                                     device's initial position.\n    n_moe_y (float, optional, form): The y-coordinate margin of error (n_moe_y).\n    n_moe_z (float, optional, form): The z-coordinate margin of error (n_moe_z), defaults to 0 for\n                                     2D tracking.\n    zone_id (int, required, form): The ID of the zone (zone_id) to associate the device with,\n                                   referencing the `zones` table.\n\nReturns:\n    dict: A JSON object with the following keys:\n          - x_id_dev (str): The ID of the newly created device.\n          - message (str): A success message (\"Device added successfully\").\n\nExample:\n    ```bash\n    curl -X POST http://192.168.210.226:8000/zonebuilder/api/add_device         -F \"device_id=TAG001\"         -F \"device_type=1\"         -F \"device_name=Tag 1\"         -F \"n_moe_x=10.0\"         -F \"n_moe_y=20.0\"         -F \"n_moe_z=0.0\"         -F \"zone_id=1\"\n    ```\n    Response:\n    ```json\n    {\n        \"x_id_dev\": \"TAG001\",\n        \"message\": \"Device added successfully\"\n    }\n    ```\n\nUse Case:\n    - A technician deploys a new UWB tag in a hospital room (zone_id corresponding to a room zone).\n      This endpoint registers the tag in the ParcoRTLS system, associating it with the room for\n      tracking patients or equipment within that space.\n\nHint:\n    - Before submitting, verify that the `zone_id` exists in the `zones` table and that the\n      `device_type` is valid in the `tlkdevicetypes` table to avoid database errors.\n    - For campus-level tracking, use a `zone_id` corresponding to a zone with `i_typ_zn=1` to\n      associate devices with a campus, enabling broad location checks.\n\nErrors:\n    - 500 (Internal Server Error): Raised if the insertion fails due to database connectivity issues,\n      duplicate `device_id`, invalid `zone_id`, or other unexpected errors. The error message\n      includes details for debugging.","operationId":"add_device_zonebuilder_api_add_device_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_add_device_zonebuilder_api_add_device_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/api/edit_device/{device_id}":{"put":{"tags":["zonebuilder"],"summary":"Edit Device","description":"Edit an existing device's details, including its zone association, in the ParcoRTLS database.\n\nThis endpoint updates the information of a device in the `devices` table of the `maint` schema,\nallowing modifications to its name, position coordinates (margin of error), and associated zone ID.\nIt uses a direct `psycopg2` connection for the update operation, which is part of the Zone Builder\ntool's functionality to manage device configurations in the ParcoRTLS system.\n\nParameters:\n    device_id (str, required, path): The unique identifier of the device to edit (x_id_dev).\n    device_name (str, optional, form): The updated human-readable name of the device (x_nm_dev).\n    n_moe_x (float, optional, form): The updated x-coordinate margin of error (n_moe_x).\n    n_moe_y (float, optional, form): The updated y-coordinate margin of error (n_moe_y).\n    n_moe_z (float, optional, form): The updated z-coordinate margin of error (n_moe_z).\n    zone_id (int, required, form): The updated ID of the associated zone (zone_id), referencing\n                                   the `zones` table.\n\nReturns:\n    dict: A JSON object with the following keys:\n          - x_id_dev (str): The ID of the updated device.\n          - message (str): A success message (\"Device updated successfully\").\n\nExample:\n    ```bash\n    curl -X PUT http://192.168.210.226:8000/zonebuilder/api/edit_device/TAG001         -F \"device_name=Updated Tag 1\"         -F \"n_moe_x=15.0\"         -F \"n_moe_y=25.0\"         -F \"n_moe_z=0.0\"         -F \"zone_id=2\"\n    ```\n    Response:\n    ```json\n    {\n        \"x_id_dev\": \"TAG001\",\n        \"message\": \"Device updated successfully\"\n    }\n    ```\n\nUse Case:\n    - A technician relocates a UWB tag from one room to another within a building (different zone_id).\n      This endpoint updates the tag's zone association and position coordinates to reflect its new\n      location, ensuring accurate tracking in the ParcoRTLS system.\n\nHint:\n    - Before updating, verify that the `zone_id` exists in the `zones` table to prevent database\n      errors. Use `/get_parent_zones` to retrieve valid zone IDs.\n    - For campus-level updates, ensure the new `zone_id` corresponds to a zone with `i_typ_zn=1`\n      if the device is being reassigned to a campus for broader tracking purposes.\n\nErrors:\n    - 404 (Not Found): Raised if the `device_id` does not exist in the `devices` table.\n    - 500 (Internal Server Error): Raised if the update fails due to database connectivity issues,\n      invalid `zone_id`, or other unexpected errors. The error message includes details for debugging.","operationId":"edit_device_zonebuilder_api_edit_device__device_id__put","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"requestBody":{"required":true,"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_edit_device_zonebuilder_api_edit_device__device_id__put"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zonebuilder/api/delete_device/{device_id}":{"delete":{"tags":["zonebuilder"],"summary":"Delete Device","description":"Delete a device and its associated assignments from the ParcoRTLS database.\n\nThis endpoint removes a device from the `devices` table and its related assignments from the\n`deviceassmts` table in the `maint` schema. It is used in the Zone Builder tool to decommission\ndevices (e.g., UWB tags or anchors) that are no longer in use, ensuring they are removed from the\nParcoRTLS system's tracking data.\n\nParameters:\n    device_id (str, required, path): The unique identifier of the device to delete (x_id_dev).\n\nReturns:\n    dict: A JSON object with the following key:\n          - message (str): A success message indicating the device was deleted\n                           (\"Device {device_id} deleted successfully\").\n\nExample:\n    ```bash\n    curl -X DELETE http://192.168.210.226:8000/zonebuilder/api/delete_device/TAG001\n    ```\n    Response:\n    ```json\n    {\n        \"message\": \"Device TAG001 deleted successfully\"\n    }\n    ```\n\nUse Case:\n    - A facility manager identifies a faulty UWB tag that needs to be removed from the system. This\n      endpoint deletes the tag and its assignments, ensuring it no longer appears in tracking reports\n      or zone associations.\n\nHint:\n    - Before deletion, use `/api/get_all_devices` to confirm the device's details and its current\n      zone association to avoid accidental removal.\n    - For campus-level cleanup, target devices associated with zones where `i_typ_zn=1` to remove\n      all tags from a specific campus.\n\nErrors:\n    - 404 (Not Found): Raised if the `device_id` does not exist in the `devices` table.\n    - 500 (Internal Server Error): Raised if the deletion fails due to database connectivity issues\n      or other unexpected errors. The error message includes details for debugging.","operationId":"delete_device_zonebuilder_api_delete_device__device_id__delete","parameters":[{"name":"device_id","in":"path","required":true,"schema":{"type":"string","title":"Device Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/get_campus_zones":{"get":{"tags":["zoneviewer"],"summary":"Get Campus Zones","description":"Retrieve all campus zones with their hierarchical structure.\n\n**Description**:\nThis endpoint fetches all zones from the ParcoRTLS system, organized hierarchically with campuses (zone_type=1)\nat the root and their child zones nested accordingly. It is used in the Zone Viewer to display the campus\nhierarchy for navigation and management. The response includes zone details like ID, name, type, parent zone,\nand map ID, with child zones nested under their parents.\n\n**Parameters**:\n- None\n\n**Returns**:\n- JSON object with a single key `campuses`, containing a list of campus objects. Each campus object has:\n  - `zone_id` (int): Unique identifier of the zone.\n  - `zone_name` (str): Name of the zone.\n  - `zone_type` (int): Type of zone (1 for campus, 2 for building, etc.).\n  - `parent_zone_id` (int or null): ID of the parent zone, null for campuses.\n  - `map_id` (int or null): ID of the associated map.\n  - `children` (list): List of child zone objects with the same structure.\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_campus_zones\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"campuses\": [\n    {\n      \"zone_id\": 1,\n      \"zone_name\": \"Main Campus\",\n      \"zone_type\": 1,\n      \"parent_zone_id\": null,\n      \"map_id\": 101,\n      \"children\": [\n        {\n          \"zone_id\": 2,\n          \"zone_name\": \"Building A\",\n          \"zone_type\": 2,\n          \"parent_zone_id\": 1,\n          \"map_id\": 102,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n**Use Case**:\n- **Scenario**: A facility manager needs to view all campuses and their buildings in the ParcoRTLS Zone Viewer.\n- **Action**: The frontend React app calls this endpoint to populate the zone navigation tree, allowing the manager\n  to select a campus and drill down to specific buildings or floors.\n- **Outcome**: The hierarchical structure enables intuitive navigation and management of zones.\n\n**Errors**:\n- **404 Not Found**: Raised if no zones are found in the database (`HTTPException`, detail=\"No zones found\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- This endpoint is ideal for initializing the Zone Viewer UI. To check if a tag is within a campus (e.g., for Zone L1),\n  combine this with vertex data from `/get_vertices_for_campus/{campus_id}` to perform spatial queries.","operationId":"get_campus_zones_zoneviewer_get_campus_zones_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zoneviewer/get_map/{map_id}":{"get":{"tags":["zoneviewer"],"summary":"Get Map","description":"Retrieve the image data for a specific map.\n\n**Description**:\nThis endpoint fetches the binary image data (e.g., PNG, JPEG) for a map identified by `map_id`. It is used in\nthe Zone Viewer to display map images as backgrounds for zones, enabling visualization of spatial layouts in\nthe ParcoRTLS system.\n\n**Parameters**:\n- `map_id` (int, path parameter, required): The unique identifier of the map to retrieve.\n\n**Returns**:\n- Binary response containing the map image data, with the appropriate `Content-Type` header\n  (e.g., `image/png`, `image/jpeg`) based on the map's format stored in the database.\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_map/101\" -o map101.png\n```\nResponse: Binary image data (saved as `map101.png` in the example).\n\n**Use Case**:\n- **Scenario**: A user selects a building in the Zone Viewer to view its floor plan.\n- **Action**: The React frontend requests the map image using this endpoint and renders it as a background\n  for zone polygons.\n- **Outcome**: The map image provides spatial context for zones and tracked entities.\n\n**Errors**:\n- **404 Not Found**: Raised if no map is found for the given `map_id` (`HTTPException`, detail=\"No map found for map_id={map_id}\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Ensure the frontend handles different image formats (PNG, JPEG) based on the `Content-Type` header.\n- Combine with `/get_map_metadata/{map_id}` to get bounds for proper scaling in the UI.","operationId":"get_map_zoneviewer_get_map__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/get_map_metadata/{map_id}":{"get":{"tags":["zoneviewer"],"summary":"Get Map Metadata","description":"Retrieve metadata (bounds) for a specific map.\n\n**Description**:\nThis endpoint fetches the spatial bounds (min_x, min_y, max_x, max_y) of a map, which define its coordinate\nsystem in the ParcoRTLS system. The metadata is used to scale and align map images and zone vertices in the\nZone Viewer UI.\n\n**Parameters**:\n- `map_id` (int, path parameter, required): The unique identifier of the map.\n\n**Returns**:\n- JSON object with the following keys:\n  - `min_x` (float): Minimum X coordinate of the map.\n  - `min_y` (float): Minimum Y coordinate of the map.\n  - `max_x` (float): Maximum X coordinate of the map.\n  - `max_y` (float): Maximum Y coordinate of the map.\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_map_metadata/101\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"min_x\": 0.0,\n  \"min_y\": 0.0,\n  \"max_x\": 100.0,\n  \"max_y\": 50.0\n}\n```\n\n**Use Case**:\n- **Scenario**: A developer is rendering a map in the Zone Viewer and needs to align zone polygons with the map image.\n- **Action**: The frontend calls this endpoint to get the map’s bounds and uses them to scale the canvas or SVG.\n- **Outcome**: Accurate alignment of zones and entities on the map.\n\n**Errors**:\n- **404 Not Found**: Raised if no metadata is found for the given `map_id` (`HTTPException`, detail=\"No metadata found for map_id={map_id}\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Use this endpoint alongside `/get_map/{map_id}` to ensure proper rendering of maps in the UI.\n- The bounds are critical for spatial calculations, such as determining if a tag’s coordinates are within a zone.","operationId":"get_map_metadata_zoneviewer_get_map_metadata__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/get_map_data/{map_id}":{"get":{"tags":["zoneviewer"],"summary":"Get Map Data","description":"Retrieve map data including image URL and bounds for rendering.\n\n**Description**:\nThis endpoint provides a convenient combination of a map’s image URL and its spatial bounds, formatted for\ndirect use in the ParcoRTLS Zone Viewer frontend. It is used to render maps with proper scaling and alignment\nin the React app.\n\n**Parameters**:\n- `map_id` (int, path parameter, required): The unique identifier of the map.\n\n**Returns**:\n- JSON object with the following keys:\n  - `imageUrl` (str): URL to fetch the map image (points to `/get_map/{map_id}`).\n  - `bounds` (list): 2D array of coordinates [[min_y, min_x], [max_y, max_x]] defining the map’s extent.\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_map_data/101\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"imageUrl\": \"http://192.168.210.226:8000/zoneviewer/get_map/101\",\n  \"bounds\": [\n    [0.0, 0.0],\n    [50.0, 100.0]\n  ]\n}\n```\n\n**Use Case**:\n- **Scenario**: The Zone Viewer needs to display a map with zones overlaid.\n- **Action**: The React frontend calls this endpoint to get the image URL and bounds, then renders the map\n  using a library like Leaflet or Canvas.\n- **Outcome**: The map is displayed with correct scaling, and zones are accurately positioned.\n\n**Errors**:\n- **404 Not Found**: Raised if no map data is found for the given `map_id` (`HTTPException`, detail=\"No map data found for map_id={map_id}\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- This endpoint is optimized for frontend integration. Use the `imageUrl` to fetch the map image and `bounds`\n  to configure the map’s coordinate system in the UI.","operationId":"get_map_data_zoneviewer_get_map_data__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/get_maps_with_zone_types":{"get":{"tags":["zoneviewer"],"summary":"Get Maps With Zone Types","description":"Fetch unique maps with their associated zone types, sorted by hierarchy.\n\n**Description**:\nThis endpoint retrieves a list of unique maps, each associated with the highest-priority zone type (based on a\npredefined hierarchy). It is used in the ParcoRTLS system to provide a summary of maps and their primary zone\ntypes for selection in the Zone Viewer or for reporting purposes.\n\n**Parameters**:\n- None\n\n**Returns**:\n- JSON object with a single key `maps`, containing a list of map objects. Each map object has:\n  - `i_map` (int): Unique identifier of the map.\n  - `x_nm_map` (str): Name of the map.\n  - `i_typ_zn` (int): The highest-priority zone type associated with the map (e.g., 1 for campus, 2 for building).\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_maps_with_zone_types\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"maps\": [\n    {\n      \"i_map\": 101,\n      \"x_nm_map\": \"Main Campus Map\",\n      \"i_typ_zn\": 1\n    },\n    {\n      \"i_map\": 102,\n      \"x_nm_map\": \"Building A Floor 1\",\n      \"i_typ_zn\": 2\n    }\n  ]\n}\n```\n\n**Use Case**:\n- **Scenario**: A user needs to select a map in the Zone Viewer but wants to filter by zone type (e.g., campus or building).\n- **Action**: The frontend calls this endpoint to populate a dropdown or list of maps, showing their names and zone types.\n- **Outcome**: The user can quickly identify and select the relevant map.\n\n**Errors**:\n- **404 Not Found**: Raised if no maps are found (`HTTPException`, detail=\"No maps found\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- The zone type hierarchy (1=campus, 10=area, 2=building, etc.) is defined in the SQL query. Refer to the\n  ParcoRTLS documentation for zone type definitions.\n- Use this endpoint for map selection UI components or reporting tools.","operationId":"get_maps_with_zone_types_zoneviewer_get_maps_with_zone_types_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/zoneviewer/get_all_zones_for_campus/{campus_id}":{"get":{"tags":["zoneviewer"],"summary":"Get All Zones For Campus","description":"Retrieve all zones under a specific campus, including hierarchy.\n\n**Description**:\nThis endpoint fetches all zones under a given campus (identified by `campus_id`), including their hierarchical\nstructure (parent-child relationships). It is used in the ParcoRTLS Zone Viewer to display all zones within a\ncampus, such as buildings, floors, or rooms.\n\n**Parameters**:\n- `campus_id` (int, path parameter, required): The unique identifier of the campus.\n\n**Returns**:\n- JSON object with a single key `zones`, containing a list of zone objects. Each zone object has:\n  - `zone_id` (int): Unique identifier of the zone.\n  - `zone_name` (str): Name of the zone.\n  - `zone_type` (int): Type of zone (e.g., 2 for building, 3 for floor).\n  - `parent_zone_id` (int or null): ID of the parent zone.\n  - `map_id` (int or null): ID of the associated map.\n  - `children` (list): List of child zone objects with the same structure.\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_all_zones_for_campus/1\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"zones\": [\n    {\n      \"zone_id\": 1,\n      \"zone_name\": \"Main Campus\",\n      \"zone_type\": 1,\n      \"parent_zone_id\": null,\n      \"map_id\": 101,\n      \"children\": [\n        {\n          \"zone_id\": 2,\n          \"zone_name\": \"Building A\",\n          \"zone_type\": 2,\n          \"parent_zone_id\": 1,\n          \"map_id\": 102,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n**Use Case**:\n- **Scenario**: A security team needs to manage zones within a campus to track assets.\n- **Action**: The frontend calls this endpoint to display all zones under the campus in a tree view.\n- **Outcome**: The team can navigate and manage zones efficiently.\n\n**Errors**:\n- **404 Not Found**: Not explicitly raised, but an empty `zones` list is returned if no zones are found.\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Use this endpoint to populate a zone management interface for a specific campus.\n- Combine with `/get_vertices_for_campus/{campus_id}` to get spatial data for zones.","operationId":"get_all_zones_for_campus_zoneviewer_get_all_zones_for_campus__campus_id__get","parameters":[{"name":"campus_id","in":"path","required":true,"schema":{"type":"integer","title":"Campus Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/get_vertices_for_campus/{campus_id}":{"get":{"tags":["zoneviewer"],"summary":"Get Vertices For Campus","description":"Fetch all vertices for zones under a campus, excluding trigger regions.\n\n**Description**:\nThis endpoint retrieves all vertex data (coordinates and order) for zones under a specified campus, excluding\ntrigger regions (i_trg IS NULL). It is used in the ParcoRTLS Zone Viewer to render zone polygons on maps.\n\n**Parameters**:\n- `campus_id` (int, path parameter, required): The unique identifier of the campus.\n\n**Returns**:\n- JSON object with a single key `vertices`, containing a list of vertex objects. Each vertex object has:\n  - `vertex_id` (int): Unique identifier of the vertex.\n  - `i_rgn` (int): Region ID associated with the vertex.\n  - `x` (float): X coordinate of the vertex.\n  - `y` (float): Y coordinate of the vertex.\n  - `z` (float): Z coordinate of the vertex (often 0.0).\n  - `order` (float): Order of the vertex in the polygon.\n  - `zone_id` (int): ID of the zone the vertex belongs to.\n\n**Example Usage**:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/zoneviewer/get_vertices_for_campus/1\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"vertices\": [\n    {\n      \"vertex_id\": 1001,\n      \"i_rgn\": 201,\n      \"x\": 10.0,\n      \"y\": 20.0,\n      \"z\": 0.0,\n      \"order\": 1.0,\n      \"zone_id\": 2\n    }\n  ]\n}\n```\n\n**Use Case**:\n- **Scenario**: A user wants to edit zone boundaries in the Zone Viewer.\n- **Action**: The frontend calls this endpoint to fetch vertex data and render zone polygons on the map.\n- **Outcome**: The user can visualize and modify zone shapes.\n\n**Errors**:\n- **404 Not Found**: Not explicitly raised, but an empty `vertices` list is returned if no vertices are found.\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Use this endpoint to render zone polygons in the UI. Combine with `/get_map_data/{map_id}` for the map context.\n- The `order` field determines the sequence of vertices in a polygon, critical for correct rendering.","operationId":"get_vertices_for_campus_zoneviewer_get_vertices_for_campus__campus_id__get","parameters":[{"name":"campus_id","in":"path","required":true,"schema":{"type":"integer","title":"Campus Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/update_vertices":{"post":{"tags":["zoneviewer"],"summary":"Update Vertices","description":"Bulk update vertices for zones.\n\n**Description**:\nThis endpoint updates multiple vertices (coordinates and order) in the ParcoRTLS system. It is used in the\nZone Editor to save changes to zone polygon shapes after user modifications.\n\n**Parameters**:\n- `vertices` (list[dict], body, required): List of vertex objects to update. Each object must contain:\n  - `vertex_id` (int, required): Unique identifier of the vertex.\n  - `x` (float, required): New X coordinate.\n  - `y` (float, required): New Y coordinate.\n  - `z` (float, optional, default=0.0): New Z coordinate.\n  - `order` (int, optional, default=1): New order of the vertex in the polygon.\n\n**Returns**:\n- JSON object with a single key `message` (str): Confirmation message (\"Vertices updated successfully\").\n\n**Example Usage**:\n```bash\ncurl -X POST \"http://192.168.210.226:8000/zoneviewer/update_vertices\"       -H \"Content-Type: application/json\"       -d '[\n    {\"vertex_id\": 1001, \"x\": 15.0, \"y\": 25.0, \"z\": 0.0, \"order\": 1},\n    {\"vertex_id\": 1002, \"x\": 20.0, \"y\": 30.0, \"z\": 0.0, \"order\": 2}\n  ]'\n```\nResponse:\n```json\n{\n  \"message\": \"Vertices updated successfully\"\n}\n```\n\n**Use Case**:\n- **Scenario**: A user drags vertices in the Zone Editor to adjust a zone’s shape.\n- **Action**: The frontend sends the updated vertex data to this endpoint to persist changes.\n- **Outcome**: The zone’s polygon is updated in the database.\n\n**Errors**:\n- **400 Bad Request**: Raised if the `vertices` list is empty (`HTTPException`, detail=\"No vertices provided\").\n- **500 Internal Server Error**: Raised if not all vertices are updated or for database errors (`HTTPException`, detail=str(e) or \"Partial update: {updated_count}/{len(vertices)}\").\n\n**Hint**:\n- Ensure all `vertex_id` values exist in the database to avoid partial updates.\n- The coordinates are rounded to 6 decimal places for precision.","operationId":"update_vertices_zoneviewer_update_vertices_post","requestBody":{"content":{"application/json":{"schema":{"items":{"type":"object"},"type":"array","title":"Vertices"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/delete_vertex/{vertex_id}":{"delete":{"tags":["zoneviewer"],"summary":"Delete Vertex","description":"Delete a specific vertex by ID.\n\n**Description**:\nThis endpoint removes a vertex from the ParcoRTLS system, used in the Zone Editor to delete a point from a\nzone’s polygon shape.\n\n**Parameters**:\n- `vertex_id` (int, path parameter, required): The unique identifier of the vertex to delete.\n\n**Returns**:\n- JSON object with:\n  - `message` (str): Confirmation message (\"Vertex deleted successfully\").\n  - `vertex_id` (int): ID of the deleted vertex.\n\n**Example Usage**:\n```bash\ncurl -X DELETE \"http://192.168.210.226:8000/zoneviewer/delete_vertex/1001\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"message\": \"Vertex deleted successfully\",\n  \"vertex_id\": 1001\n}\n```\n\n**Use Case**:\n- **Scenario**: A user removes a vertex from a zone’s polygon to simplify its shape.\n- **Action**: The frontend calls this endpoint to delete the vertex.\n- **Outcome**: The zone’s polygon is updated in the database.\n\n**Errors**:\n- **404 Not Found**: Raised if the `vertex_id` does not exist (`HTTPException`, detail=\"Vertex {vertex_id} not found\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Deleting a vertex may affect the polygon’s shape. Ensure the remaining vertices maintain a valid polygon.\n- Use with `/get_vertices_for_campus/{campus_id}` to refresh the zone’s vertex data after deletion.","operationId":"delete_vertex_zoneviewer_delete_vertex__vertex_id__delete","parameters":[{"name":"vertex_id","in":"path","required":true,"schema":{"type":"integer","title":"Vertex Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/add_vertex":{"post":{"tags":["zoneviewer"],"summary":"Add Vertex","description":"Add a new vertex to a zone.\n\n**Description**:\nThis endpoint adds a new vertex to a zone’s region, used in the Zone Editor to extend a zone’s polygon shape.\nIt aligns with the `DataV2.VertexAdd` functionality from the original ParcoRTLS system.\n\n**Parameters**:\n- `request` (AddVertexRequest, body, required): Pydantic model with:\n  - `zone_id` (int, required): ID of the zone to add the vertex to.\n  - `x` (float, required): X coordinate of the new vertex.\n  - `y` (float, required): Y coordinate of the new vertex.\n  - `z` (float, optional, default=0.0): Z coordinate of the new vertex.\n  - `order` (float, required): Order of the vertex in the polygon.\n\n**Returns**:\n- JSON object representing the new vertex, with:\n  - `vertex_id` (int): ID of the new vertex.\n  - `i_rgn` (int): Region ID the vertex belongs to.\n  - `x` (float): X coordinate.\n  - `y` (float): Y coordinate.\n  - `z` (float): Z coordinate.\n  - `order` (float): Order in the polygon.\n  - `zone_id` (int): ID of the zone.\n\n**Example Usage**:\n```bash\ncurl -X POST \"http://192.168.210.226:8000/zoneviewer/add_vertex\"       -H \"Content-Type: application/json\"       -d '{\"zone_id\": 2, \"x\": 30.0, \"y\": 40.0, \"z\": 0.0, \"order\": 3}'\n```\nResponse:\n```json\n{\n  \"vertex_id\": 1003,\n  \"i_rgn\": 201,\n  \"x\": 30.0,\n  \"y\": 40.0,\n  \"z\": 0.0,\n  \"order\": 3.0,\n  \"zone_id\": 2\n}\n```\n\n**Use Case**:\n- **Scenario**: A user adds a new point to a zone’s polygon to refine its shape.\n- **Action**: The frontend sends the vertex data to this endpoint to create the vertex.\n- **Outcome**: The zone’s polygon is updated with the new vertex.\n\n**Errors**:\n- **404 Not Found**: Raised if no region is found for the `zone_id` (`HTTPException`, detail=\"No region found for zone_id={zone_id}\").\n- **400 Bad Request**: Raised if the region ID does not exist (`HTTPException`, detail=\"Region ID {region_id} does not exist\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Ensure the `zone_id` has an associated region in the `regions` table.\n- The `order` field determines the vertex’s position in the polygon sequence.","operationId":"add_vertex_zoneviewer_add_vertex_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddVertexRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/zoneviewer/delete_zone_recursive/{zone_id}":{"delete":{"tags":["zoneviewer"],"summary":"Delete Zone Recursive","description":"Delete a zone and all its progeny recursively.\n\n**Description**:\nThis endpoint deletes a zone and all its child zones (progeny), along with associated regions and vertices.\nIt is used in the Zone Editor to remove entire zone hierarchies, such as when decommissioning a campus or building.\n\n**Parameters**:\n- `zone_id` (int, path parameter, required): The unique identifier of the zone to delete.\n\n**Returns**:\n- JSON object with a single key `message` (str): Confirmation message indicating the zone and its progeny were deleted.\n\n**Example Usage**:\n```bash\ncurl -X DELETE \"http://192.168.210.226:8000/zoneviewer/delete_zone_recursive/1\" -H \"accept: application/json\"\n```\nResponse:\n```json\n{\n  \"message\": \"Deleted zone 1 and its progeny successfully\"\n}\n```\n\n**Use Case**:\n- **Scenario**: A facility manager needs to remove an obsolete campus from the ParcoRTLS system.\n- **Action**: The frontend calls this endpoint to delete the campus and all its zones.\n- **Outcome**: The database is updated, and the campus is removed from the system.\n\n**Errors**:\n- **404 Not Found**: Raised if the `zone_id` does not exist (`HTTPException`, detail=\"Zone {zone_id} not found\").\n- **500 Internal Server Error**: Raised for database errors or unexpected failures (`HTTPException`, detail=str(e)).\n\n**Hint**:\n- Use with caution, as this endpoint permanently deletes zones and their data.\n- Ensure no active tags or entities are associated with the zones before deletion.","operationId":"delete_zone_recursive_zoneviewer_delete_zone_recursive__zone_id__delete","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/update_map_name":{"post":{"tags":["maps","maps"],"summary":"Update Map Name","description":"Updates the name of a map in the ParcoRTLS system.\n\nThis endpoint allows administrators to rename a map identified by its map_id. The new name is validated for non-empty content and length constraints before updating the database. It is used to maintain accurate map labels displayed in the React frontend for visualization and zone management.\n\nParameters:\n- request (MapNameUpdateRequest): The request body containing:\n    - map_id (int, required): The unique identifier of the map to update.\n    - name (str, required): The new name for the map, must be non-empty and less than 100 characters.\n\nReturns:\n- dict: A JSON response with a success message.\n    - message (str): Confirmation that the map name was updated successfully.\n\nRaises:\n- HTTPException (400): If the map name is empty or exceeds 100 characters.\n- HTTPException (404): If the specified map_id does not exist in the database.\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X POST \"http://192.168.210.226:8000/api/update_map_name\"          -H \"Content-Type: application/json\"          -d '{\"map_id\": 1, \"name\": \"Campus Main Building\"}'\n```\nResponse:\n```json\n{\"message\": \"Map name updated successfully\"}\n```\n\nUse Case:\n- An administrator updates the name of a map from \"Building A\" to \"Campus Main Building\" to reflect a new naming convention in the ParcoRTLS system. This ensures the map is correctly labeled in the React frontend when users view zone layouts or track tags.\n\nHint:\n- Ensure the map_id corresponds to an existing map in the `maps` table. You can verify map IDs using the `/get_maps` endpoint.\n- Map names should be descriptive to help users identify the physical location in the RTLS interface.","operationId":"update_map_name_maps_update_map_name_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapNameUpdateRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_maps":{"get":{"tags":["maps","maps"],"summary":"Get Maps","description":"Retrieves a list of all maps in the ParcoRTLS system.\n\nThis endpoint queries the database to fetch all maps stored in the `maps` table, typically used to populate a dropdown or list in the React frontend for map selection or management.\n\nParameters:\n- None\n\nReturns:\n- List[dict]: A list of maps, each containing details such as:\n    - i_map (int): The unique map identifier.\n    - x_nm_map (str): The name of the map.\n    - Other fields as returned by the `usp_map_list` stored procedure.\n\nRaises:\n- HTTPException (404): If no maps are found in the database.\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/api/get_maps\"\n```\nResponse:\n```json\n[\n    {\"i_map\": 1, \"x_nm_map\": \"Campus Main Building\", ...},\n    {\"i_map\": 2, \"x_nm_map\": \"Parking Lot A\", ...}\n]\n```\n\nUse Case:\n- A frontend developer uses this endpoint to populate a map selection menu in the ParcoRTLS interface, allowing users to choose a map for viewing zone layouts or tracking assets.\n- An administrator uses this to verify all available maps before assigning them to zones.\n\nHint:\n- The response format depends on the `usp_map_list` stored procedure. Check the stored procedure definition in the Parco database to understand the exact fields returned.","operationId":"get_maps_maps_get_maps_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/maps/get_map/{map_id}":{"get":{"tags":["maps","maps"],"summary":"Get Map","description":"Retrieves the stored image for a specific map in the ParcoRTLS system.\n\nThis endpoint serves the binary image data of a map, which is used by the React frontend to display the map in the user interface for zone visualization or tag tracking.\n\nParameters:\n- map_id (int, path parameter, required): The unique identifier of the map whose image is to be retrieved.\n\nReturns:\n- Response: A binary response containing the map image with the appropriate media type (e.g., `image/png`, `image/jpeg`).\n\nRaises:\n- HTTPException (404): If no image is found for the specified map_id.\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/api/get_map/1\" --output map_image.png\n```\nResponse: Binary image data (saved as `map_image.png` in the example).\n\nUse Case:\n- The React frontend calls this endpoint to fetch the map image for a specific map_id, displaying it as the background for zone layouts or real-time tag tracking in the ParcoRTLS interface.\n\nHint:\n- Ensure the `x_format` field in the `maps` table is correctly set (e.g., 'png', 'jpeg') to serve the image with the correct media type.\n- Large images may impact performance; consider optimizing image sizes in the database.","operationId":"get_map_maps_get_map__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_map_data/{zone_id}":{"get":{"tags":["maps","maps"],"summary":"Get Map Data","description":"Retrieves map data (image URL and bounds) for a specific zone in the ParcoRTLS system.\n\nThis endpoint is designed for the React frontend's `Map.js` component, providing the URL to fetch the map image and the geographical bounds for rendering the map correctly.\n\nParameters:\n- zone_id (int, path parameter, required): The unique identifier of the zone whose associated map data is to be retrieved.\n\nReturns:\n- dict: A JSON response containing:\n    - imageUrl (str): The URL to fetch the map image (points to `/get_map/{zone_id}`).\n    - bounds (List[List[float]]): The geographical bounds of the map as [[min_y, min_x], [max_y, max_x]].\n\nRaises:\n- HTTPException (404): If the zone or its associated map is not found.\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/api/get_map_data/1\"\n```\nResponse:\n```json\n{\n    \"imageUrl\": \"http://192.168.210.226:8000/api/get_map/1\",\n    \"bounds\": [[0, 0], [100, 100]]\n}\n```\n\nUse Case:\n- The React frontend uses this endpoint to fetch map data for a specific zone, enabling the `Map.js` component to render the map with correct scaling and positioning for tag tracking or zone visualization.\n\nHint:\n- Ensure the zone_id is valid and linked to a map in the `zones` and `maps` tables. Use `/get_campus_zones/{campus_id}` to verify zone mappings.\n- Default bounds (e.g., [0, 0], [100, 100]) are used if database values are null; verify map metadata for accuracy.","operationId":"get_map_data_maps_get_map_data__zone_id__get","parameters":[{"name":"zone_id","in":"path","required":true,"schema":{"type":"integer","title":"Zone Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/add_map":{"post":{"tags":["maps","maps"],"summary":"Add Map","description":"Adds a new map to the ParcoRTLS system.\n\nThis endpoint allows administrators to insert a new map with a name and image into the database, typically used when onboarding new physical locations or updating map assets.\n\nParameters:\n- request (MapAddRequest): The request body containing:\n    - name (str, required): The name of the new map.\n    - image (str, required): The image data or reference for the map (handled by `usp_map_insert`).\n\nReturns:\n- dict: A JSON response with a success message.\n    - message (str): Confirmation that the map was added successfully.\n\nRaises:\n- HTTPException (500): If the map insertion fails or an unexpected error occurs.\n\nExample:\n```bash\ncurl -X POST \"http://192.168.210.226:8000/api/add_map\"          -H \"Content-Type: application/json\"          -d '{\"name\": \"New Campus Map\", \"image\": \"base64_encoded_image_data\"}'\n```\nResponse:\n```json\n{\"message\": \"Map added successfully\"}\n```\n\nUse Case:\n- An administrator adds a new map for a recently constructed building, enabling the ParcoRTLS system to track tags within its zones.\n\nHint:\n- The `image` field format depends on the `usp_map_insert` stored procedure. Verify whether it expects base64-encoded data or a file path.\n- Ensure the map name is unique to avoid confusion in the frontend interface.","operationId":"add_map_maps_add_map_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapAddRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/delete_map/{map_id}":{"delete":{"tags":["maps_upload"],"summary":"Delete Map","description":"Delete a map from the ParcoRTLS system.\n\nThis endpoint removes a map and its associated metadata from the 'maps' table in the 'maint' schema. It is used when a map is no longer needed or was uploaded in error. Note that deleting a map may affect associated zones, regions, or triggers.\n\nParameters:\n- map_id (int, required): The unique ID of the map to delete (path parameter).\n\nReturns:\n- JSON object with:\n  - message (str): Confirmation message (e.g., \"Map 123 deleted successfully\").\n\nRaises:\n- HTTPException (404): If the map ID does not exist in the database.\n- HTTPException (500): If the deletion fails due to database errors.\n\nExample:\n```bash\ncurl -X DELETE \"http://192.168.210.226:8000/delete_map/123\"\n```\nResponse:\n```json\n{\n  \"message\": \"Map 123 deleted successfully\"\n}\n```\n\nUse Case:\n- A facility manager deletes an outdated map (e.g., for a decommissioned building) to prevent it from being used in tracking operations.\n\nHint:\n- Before deleting, check if the map is referenced by zones or regions using the `/get_map_zones/{map_id}` or `/get_map_regions/{map_id}` endpoints to avoid orphaned data.\n- Ensure no active tracking operations depend on this map to prevent disruptions.","operationId":"delete_map_maps_delete_map__map_id__delete","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_map_metadata/{map_id}":{"get":{"tags":["maps","maps"],"summary":"Get Map Metadata","description":"Retrieves metadata for a specific map in the ParcoRTLS system.\n\nThis endpoint fetches metadata such as dimensions and scaling factors, used for configuring map rendering in the frontend or validating map properties.\n\nParameters:\n- map_id (int, path parameter, required): The unique identifier of the map whose metadata is to be retrieved.\n\nReturns:\n- List[dict]: Metadata details as returned by the `usp_map_metadata` stored procedure, typically including dimensions and scaling factors.\n\nRaises:\n- HTTPException (404): If no metadata is found for the specified map_id.\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/api/get_map_metadata/1\"\n```\nResponse:\n```json\n[{\"min_x\": 0, \"min_y\": 0, \"max_x\": 100, \"max_y\": 100, ...}]\n```\n\nUse Case:\n- A developer uses this endpoint to fetch map dimensions for scaling the map image correctly in the React frontend.\n\nHint:\n- The exact metadata fields depend on the `usp_map_metadata` stored procedure. Review its definition for clarity.","operationId":"get_map_metadata_maps_get_map_metadata__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/update_map_metadata":{"put":{"tags":["maps","maps"],"summary":"Update Map Metadata","description":"Updates metadata for a specific map in the ParcoRTLS system.\n\nThis endpoint allows administrators to update map metadata, such as geographical bounds, to ensure accurate rendering in the frontend.\n\nParameters:\n- request (MapUpdateRequest): The request body containing:\n    - map_id (int, required): The unique identifier of the map.\n    - min_x (float, required): The minimum X coordinate of the map.\n    - min_y (float, required): The minimum Y coordinate of the map.\n    - max_x (float, required): The maximum X coordinate of the map.\n    - max_y (float, required): The maximum Y coordinate of the map.\n\nReturns:\n- dict: A JSON response with a success message.\n    - message (str): Confirmation that the metadata was updated successfully.\n\nRaises:\n- HTTPException (404): If the metadata update fails (e.g., map_id not found).\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X PUT \"http://192.168.210.226:8000/api/update_map_metadata\"          -H \"Content-Type: application/json\"          -d '{\"map_id\": 1, \"min_x\": 0, \"min_y\": 0, \"max_x\": 200, \"max_y\": 150}'\n```\nResponse:\n```json\n{\"message\": \"Map metadata updated successfully\"}\n```\n\nUse Case:\n- An administrator updates the bounds of a map to reflect a resized or reoriented physical layout, ensuring accurate tag positioning in the frontend.\n\nHint:\n- Validate the coordinate values to ensure they are meaningful for the map’s physical layout.","operationId":"update_map_metadata_maps_update_map_metadata_put","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapUpdateRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_campus_zones/{campus_id}":{"get":{"tags":["maps","maps"],"summary":"Get Campus Zones","description":"Retrieves the zone hierarchy for a specific campus in the ParcoRTLS system.\n\nThis endpoint fetches all zones associated with a campus, organized hierarchically by parent-child relationships, used for displaying zone structures in the frontend or checking tag locations.\n\nParameters:\n- campus_id (int, path parameter, required): The unique identifier of the campus whose zones are to be retrieved.\n\nReturns:\n- dict: A JSON response containing:\n    - zones (List[dict]): A list of top-level zones, each with:\n        - zone_id (int): The zone identifier.\n        - zone_name (str): The name of the zone.\n        - zone_type (int): The type of zone.\n        - parent_zone_id (int or None): The ID of the parent zone.\n        - map_id (int or None): The associated map ID.\n        - children (List[dict]): Child zones in the hierarchy.\n\nRaises:\n- HTTPException (404): If no zones are found for the specified campus_id.\n- HTTPException (500): If an unexpected error occurs during the database operation.\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/api/get_campus_zones/1\"\n```\nResponse:\n```json\n{\n    \"zones\": [\n        {\n            \"zone_id\": 1,\n            \"zone_name\": \"Campus Main\",\n            \"zone_type\": 1,\n            \"parent_zone_id\": null,\n            \"map_id\": 1,\n            \"children\": [\n                {\n                    \"zone_id\": 2,\n                    \"zone_name\": \"Building A\",\n                    \"zone_type\": 2,\n                    \"parent_zone_id\": 1,\n                    \"map_id\": 1,\n                    \"children\": []\n                }\n            ]\n        }\n    ]\n}\n```\n\nUse Case:\n- The frontend uses this endpoint to display a tree view of zones for a campus, allowing users to navigate the zone hierarchy or check if a tag is within a specific campus zone (e.g., Zone L1 zones).\n- An administrator uses this to verify zone-to-map assignments before updating map metadata.\n\nHint:\n- This endpoint is useful for checking if a tag is on a campus by traversing the zone hierarchy and verifying tag locations against Zone L1 zones.\n- The recursive CTE in the query ensures all child zones are included; ensure the `zones` table has correct `i_pnt_zn` values for hierarchy integrity.","operationId":"get_campus_zones_maps_get_campus_zones__campus_id__get","parameters":[{"name":"campus_id","in":"path","required":true,"schema":{"type":"integer","title":"Campus Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/upload_map":{"post":{"tags":["maps_upload"],"summary":"Upload Map","description":"Upload a new map image and its metadata to the ParcoRTLS system.\n\nThis endpoint allows users to upload a map image (e.g., a floor plan or campus layout) along with its metadata, such as name, geographic coordinates, and spatial boundaries. The map is stored in the PostgreSQL 'maint' schema in the 'maps' table, with the image stored as binary data. This endpoint is critical for defining the spatial context in which ParcoRTLS tracks entities (e.g., tags, devices) within zones, regions, or triggers.\n\nParameters:\n- name (str, required): The name of the map (e.g., \"Building A Floor 1\").\n- lat_origin (float, optional): Latitude of the map's origin point (e.g., bottom-left corner). Defaults to None.\n- lon_origin (float, optional): Longitude of the map's origin point. Defaults to None.\n- min_x (float, optional): Minimum X-coordinate of the map's spatial boundary. Defaults to None.\n- min_y (float, optional): Minimum Y-coordinate of the map's spatial boundary. Defaults to None.\n- min_z (float, optional): Minimum Z-coordinate (e.g., for 3D maps). Defaults to None.\n- max_x (float, optional): Maximum X-coordinate of the map's spatial boundary. Defaults to None.\n- max_y (float, optional): Maximum Y-coordinate of the map's spatial boundary. Defaults to None.\n- max_z (float, optional): Maximum Z-coordinate of the map. Defaults to None.\n- file (UploadFile, required): The map image file to upload. Supported formats: PNG, JPG, JPEG, GIF.\n\nReturns:\n- JSON object with:\n  - message (str): Confirmation message (\"Map uploaded successfully\").\n  - map_id (int): The unique ID of the newly created map record.\n\nRaises:\n- HTTPException (400): If the file format is not supported (e.g., not PNG, JPG, JPEG, or GIF).\n- HTTPException (500): If the map upload fails due to database errors or other issues.\n\nExample:\n```bash\ncurl -X POST \"http://192.168.210.226:8000/upload_map\"          -F \"name=Building A Floor 1\"          -F \"lat_origin=40.7128\"          -F \"lon_origin=-74.0060\"          -F \"min_x=0.0\"          -F \"min_y=0.0\"          -F \"max_x=100.0\"          -F \"max_y=50.0\"          -F \"file=@/path/to/floor1.png\"\n```\nResponse:\n```json\n{\n  \"message\": \"Map uploaded successfully\",\n  \"map_id\": 123\n}\n```\n\nUse Case:\n- A facility manager uploads a new floor plan for a building to the ParcoRTLS system to enable real-time tracking of assets or personnel. For example, uploading a map for \"Building A Floor 1\" with its geographic coordinates allows the system to associate zones (e.g., rooms) and triggers (e.g., entry/exit alerts) with this map.\n\nHint:\n- Ensure the map image is optimized (e.g., <4MB) to avoid performance issues. Large files trigger a warning in the logs but are still processed.\n- Provide `lat_origin` and `lon_origin` for outdoor maps to enable geolocation-based tracking.\n- Use `min_x`, `min_y`, `max_x`, and `max_y` to define the map's coordinate system for accurate zone and region placement.","operationId":"upload_map_maps_upload_map_post","requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_upload_map_maps_upload_map_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/map_image/{map_id}":{"get":{"tags":["maps_upload"],"summary":"Get Map Image","description":"Retrieve the stored map image for a given map ID.\n\nThis endpoint fetches the binary image data and file format of a map stored in the 'maps' table in the 'maint' schema. It returns the image as a response with the appropriate media type (e.g., image/png). This is used to display maps in the ParcoRTLS React frontend or other client applications.\n\nParameters:\n- map_id (int, required): The unique ID of the map to retrieve (path parameter).\n\nReturns:\n- Binary image data with the appropriate media type (e.g., image/png, image/jpeg).\n\nRaises:\n- HTTPException (404): If the map ID does not exist in the database.\n- HTTPException (500): If there is an error retrieving the map image (e.g., database connection issues).\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/map_image/123\" -o map_image.png\n```\n\nUse Case:\n- The ParcoRTLS React frontend calls this endpoint to display a floor plan in the user interface when a user selects a specific map (e.g., \"Building A Floor 1\") for viewing or configuring zones.\n\nHint:\n- Ensure the `map_id` corresponds to a valid map in the database. Use the `/upload_map` endpoint to create maps first.\n- The response media type is set based on the stored `x_format` (e.g., PNG, JPEG), so ensure the client can handle the returned format.","operationId":"get_map_image_maps_map_image__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/edit_map/{map_id}":{"put":{"tags":["maps_upload"],"summary":"Edit Map","description":"Update the metadata of an existing map in the ParcoRTLS system.\n\nThis endpoint allows users to modify the metadata (e.g., name, coordinates, boundaries) of a map without altering the stored image. The changes are applied to the 'maps' table in the 'maint' schema. This is useful for correcting map details or adjusting coordinates after initial upload.\n\nParameters:\n- map_id (int, required): The unique ID of the map to update (path parameter).\n- name (str, required): The updated name of the map.\n- lat_origin (float, optional): Updated latitude of the map's origin point. Defaults to None.\n- lon_origin (float, optional): Updated longitude of the map's origin point. Defaults to None.\n- min_x (float, optional): Updated minimum X-coordinate. Defaults to None.\n- min_y (float, optional): Updated minimum Y-coordinate. Defaults to None.\n- min_z (float, optional): Updated minimum Z-coordinate. Defaults to None.\n- max_x (float, optional): Updated maximum X-coordinate. Defaults to None.\n- max_y (float, optional): Updated maximum Y-coordinate. Defaults to None.\n- max_z (float, optional): Updated maximum Z-coordinate. Defaults to None.\n\nReturns:\n- JSON object with:\n  - message (str): Confirmation message (\"Map updated successfully\").\n\nRaises:\n- HTTPException (500): If the map update fails (e.g., database error).\n- HTTPException (404): If the map ID does not exist (handled by database query returning no rows).\n\nExample:\n```bash\ncurl -X PUT \"http://192.168.210.226:8000/edit_map/123\"          -F \"name=Building A Floor 1 Updated\"          -F \"lat_origin=40.7129\"          -F \"lon_origin=-74.0061\"          -F \"min_x=0.0\"          -F \"min_y=0.0\"          -F \"max_x=100.0\"          -F \"max_y=50.0\"\n```\nResponse:\n```json\n{\n  \"message\": \"Map updated successfully\"\n}\n```\n\nUse Case:\n- A facility manager updates the coordinates of a map after discovering an error in the initial latitude/longitude values or adjusts the map name to reflect a new naming convention.\n\nHint:\n- Only provide parameters that need updating; unchanged fields can be omitted (they will remain as None in the query).\n- Verify the `map_id` exists before calling this endpoint to avoid unnecessary errors.","operationId":"edit_map_maps_edit_map__map_id__put","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"requestBody":{"required":true,"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_edit_map_maps_edit_map__map_id__put"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_map_zones/{map_id}":{"get":{"tags":["maps_upload"],"summary":"Get Map Zones","description":"Retrieve the number of zones associated with a specific map.\n\nThis endpoint queries the 'zones' table in the 'maint' schema to count the number of zones linked to a given map. It is useful for understanding the scope of a map's usage in the ParcoRTLS system.\n\nParameters:\n- map_id (int, required): The unique ID of the map (path parameter).\n\nReturns:\n- JSON object with:\n  - zone_count (int): The number of zones associated with the map (0 if none).\n\nRaises:\n- None explicitly, but database errors may result in a 500 status code (handled by FastAPI).\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/get_map_zones/123\"\n```\nResponse:\n```json\n{\n  \"zone_count\": 5\n}\n```\n\nUse Case:\n- A system administrator checks how many zones (e.g., rooms or areas) are defined for a map before updating or deleting it to assess its impact.\n\nHint:\n- Use this endpoint before deleting a map to ensure no zones are orphaned.\n- A `zone_count` of 0 indicates the map is not yet associated with any zones, which may suggest it is safe to modify or delete.","operationId":"get_map_zones_maps_get_map_zones__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_map_regions/{map_id}":{"get":{"tags":["maps_upload"],"summary":"Get Map Regions","description":"Retrieve the number of regions associated with a specific map.\n\nThis endpoint counts the number of regions linked to a map by joining the 'regions' and 'zones' tables in the 'maint' schema. Regions are sub-areas within zones, and this endpoint helps assess the complexity of a map's configuration.\n\nParameters:\n- map_id (int, required): The unique ID of the map (path parameter).\n\nReturns:\n- JSON object with:\n  - region_count (int): The number of regions associated with the map (0 if none).\n\nRaises:\n- HTTPException (500): If there is an error fetching region data (e.g., database connection issues).\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/get_map_regions/123\"\n```\nResponse:\n```json\n{\n  \"region_count\": 10\n}\n```\n\nUse Case:\n- A developer checks the number of regions on a map to determine if additional configuration (e.g., triggers) is needed for fine-grained tracking within zones.\n\nHint:\n- Regions are tied to zones, so ensure zones exist for the map (check with `/get_map_zones/{map_id}`) before expecting regions.\n- A high `region_count` may indicate a complex map with detailed sub-areas, requiring careful management.","operationId":"get_map_regions_maps_get_map_regions__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/maps/get_map_triggers/{map_id}":{"get":{"tags":["maps_upload"],"summary":"Get Map Triggers","description":"Retrieve the number of triggers associated with a specific map.\n\nThis endpoint counts the number of triggers linked to a map by joining the 'triggers', 'regions', and 'zones' tables in the 'maint' schema. Triggers define actions (e.g., alerts) for specific events in regions, and this endpoint helps evaluate a map's automation setup.\n\nParameters:\n- map_id (int, required): The unique ID of the map (path parameter).\n\nReturns:\n- JSON object with:\n  - trigger_count (int): The number of triggers associated with the map (0 if none).\n\nRaises:\n- HTTPException (500): If there is an error fetching trigger data (e.g., database issues).\n\nExample:\n```bash\ncurl -X GET \"http://192.168.210.226:8000/get_map_triggers/123\"\n```\nResponse:\n```json\n{\n  \"trigger_count\": 3\n}\n```\n\nUse Case:\n- A facility manager checks the number of triggers on a map to ensure all necessary alerts (e.g., for unauthorized entry into a restricted area) are configured.\n\nHint:\n- Triggers depend on regions, which depend on zones. Verify the map has zones and regions (using `/get_map_zones/{map_id}` and `/get_map_regions/{map_id}`) before expecting triggers.\n- A `trigger_count` of 0 may indicate that automation rules have not yet been set up for the map.","operationId":"get_map_triggers_maps_get_map_triggers__map_id__get","parameters":[{"name":"map_id","in":"path","required":true,"schema":{"type":"integer","title":"Map Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/components/":{"get":{"tags":["components","components"],"summary":"Get Components","description":"Use this command to access the ParcoRTLSMaint table component_versions.\nThis table is populated by running the 19-update-component-versions.sh from the app directory\nor via the utility menu.\nThis is useful for creating a list of all of the files for the ParcoRTLS.\nas of version 0.1.80 of the update component we do not track JSON nor database files.","operationId":"get_components_api_components__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/components/procedures-functions-list":{"get":{"tags":["components","components"],"summary":"Generate Procedures Functions List","description":"Generates a Markdown file (proc_func_lbn.md) listing all stored procedures and functions in the ParcoRTLSMaint database.","operationId":"generate_procedures_functions_list_api_components_procedures_functions_list_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/components/procedures-functions-details":{"get":{"tags":["components","components"],"summary":"Generate Procedures Functions Details","description":"Generates a Markdown file (proc_func_details.md) listing all stored procedures and functions in the ParcoRTLSMaint database with their source code.","operationId":"generate_procedures_functions_details_api_components_procedures_functions_details_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/":{"get":{"tags":["root"],"summary":"Root","operationId":"root__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"AddVertexRequest":{"properties":{"zone_id":{"type":"integer","title":"Zone Id"},"x":{"type":"number","title":"X"},"y":{"type":"number","title":"Y"},"z":{"type":"number","title":"Z","default":0.0},"order":{"type":"number","title":"Order"}},"type":"object","required":["zone_id","x","y","order"],"title":"AddVertexRequest"},"AssignDeviceEditRequest":{"properties":{"assignment_id":{"type":"integer","title":"Assignment Id"},"device_id":{"type":"string","title":"Device Id"},"entity_id":{"type":"string","title":"Entity Id"},"reason_id":{"type":"integer","title":"Reason Id"}},"type":"object","required":["assignment_id","device_id","entity_id","reason_id"],"title":"AssignDeviceEditRequest"},"AssignDeviceEndRequest":{"properties":{"assignment_id":{"type":"integer","title":"Assignment Id"}},"type":"object","required":["assignment_id"],"title":"AssignDeviceEndRequest"},"AssignmentReasonRequest":{"properties":{"reason":{"type":"string","title":"Reason"}},"type":"object","required":["reason"],"title":"AssignmentReasonRequest"},"Body_add_device_api_add_device_post":{"properties":{"device_id":{"type":"string","title":"Device Id"},"device_type":{"type":"integer","title":"Device Type"},"device_name":{"type":"string","title":"Device Name"},"n_moe_x":{"type":"number","title":"N Moe X"},"n_moe_y":{"type":"number","title":"N Moe Y"},"n_moe_z":{"type":"number","title":"N Moe Z","default":0},"zone_id":{"type":"integer","title":"Zone Id"}},"type":"object","required":["device_id","device_type"],"title":"Body_add_device_api_add_device_post"},"Body_add_device_zonebuilder_api_add_device_post":{"properties":{"device_id":{"type":"string","title":"Device Id"},"device_type":{"type":"integer","title":"Device Type"},"device_name":{"type":"string","title":"Device Name"},"n_moe_x":{"type":"number","title":"N Moe X"},"n_moe_y":{"type":"number","title":"N Moe Y"},"n_moe_z":{"type":"number","title":"N Moe Z","default":0},"zone_id":{"type":"integer","title":"Zone Id"}},"type":"object","required":["device_id","device_type","zone_id"],"title":"Body_add_device_zonebuilder_api_add_device_post"},"Body_add_vertex_api_add_vertex_post":{"properties":{"region_id":{"type":"integer","title":"Region Id"},"x":{"type":"number","title":"X"},"y":{"type":"number","title":"Y"},"z":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Z"},"order":{"type":"integer","title":"Order"}},"type":"object","required":["region_id","x","y","order"],"title":"Body_add_vertex_api_add_vertex_post"},"Body_assign_device_to_zone_api_assign_device_to_zone_post":{"properties":{"device_id":{"type":"string","title":"Device Id"},"entity_id":{"type":"string","title":"Entity Id"},"reason_id":{"type":"integer","title":"Reason Id"}},"type":"object","required":["device_id","entity_id","reason_id"],"title":"Body_assign_device_to_zone_api_assign_device_to_zone_post"},"Body_edit_device_api_edit_device__device_id__put":{"properties":{"new_device_id":{"type":"string","title":"New Device Id"},"device_type":{"type":"integer","title":"Device Type"},"device_name":{"type":"string","title":"Device Name"},"n_moe_x":{"type":"number","title":"N Moe X"},"n_moe_y":{"type":"number","title":"N Moe Y"},"n_moe_z":{"type":"number","title":"N Moe Z"},"zone_id":{"type":"integer","title":"Zone Id"},"d_srv_bgn":{"type":"string","title":"D Srv Bgn"},"d_srv_end":{"type":"string","title":"D Srv End"},"f_log":{"type":"boolean","title":"F Log"}},"type":"object","required":["new_device_id"],"title":"Body_edit_device_api_edit_device__device_id__put"},"Body_edit_device_zonebuilder_api_edit_device__device_id__put":{"properties":{"device_name":{"type":"string","title":"Device Name"},"n_moe_x":{"type":"number","title":"N Moe X"},"n_moe_y":{"type":"number","title":"N Moe Y"},"n_moe_z":{"type":"number","title":"N Moe Z"},"zone_id":{"type":"integer","title":"Zone Id"}},"type":"object","required":["zone_id"],"title":"Body_edit_device_zonebuilder_api_edit_device__device_id__put"},"Body_edit_map_maps_edit_map__map_id__put":{"properties":{"name":{"type":"string","title":"Name"},"lat_origin":{"type":"number","title":"Lat Origin"},"lon_origin":{"type":"number","title":"Lon Origin"},"min_x":{"type":"number","title":"Min X"},"min_y":{"type":"number","title":"Min Y"},"min_z":{"type":"number","title":"Min Z"},"max_x":{"type":"number","title":"Max X"},"max_y":{"type":"number","title":"Max Y"},"max_z":{"type":"number","title":"Max Z"}},"type":"object","required":["name"],"title":"Body_edit_map_maps_edit_map__map_id__put"},"Body_edit_vertex_api_edit_vertex_put":{"properties":{"vertex_id":{"type":"integer","title":"Vertex Id"},"region_id":{"type":"integer","title":"Region Id"},"x":{"type":"number","title":"X"},"y":{"type":"number","title":"Y"},"z":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Z"},"order":{"type":"integer","title":"Order"}},"type":"object","required":["vertex_id","region_id","x","y","order"],"title":"Body_edit_vertex_api_edit_vertex_put"},"Body_insert_position_api_insert_position_post":{"properties":{"device_id":{"type":"string","title":"Device Id"},"x":{"type":"number","title":"X"},"y":{"type":"number","title":"Y"},"z":{"type":"number","title":"Z"}},"type":"object","required":["device_id","x","y","z"],"title":"Body_insert_position_api_insert_position_post"},"Body_log_text_event_api_log_text_event_post":{"properties":{"device_id":{"type":"string","title":"Device Id"},"event_data":{"type":"string","title":"Event Data"}},"type":"object","required":["device_id","event_data"],"title":"Body_log_text_event_api_log_text_event_post"},"Body_set_device_state_api_set_device_state_put":{"properties":{"device_id":{"type":"string","title":"Device Id"},"new_state":{"type":"string","title":"New State"}},"type":"object","required":["device_id","new_state"],"title":"Body_set_device_state_api_set_device_state_put"},"Body_upload_map_maps_upload_map_post":{"properties":{"name":{"type":"string","title":"Name"},"lat_origin":{"type":"number","title":"Lat Origin"},"lon_origin":{"type":"number","title":"Lon Origin"},"min_x":{"type":"number","title":"Min X"},"min_y":{"type":"number","title":"Min Y"},"min_z":{"type":"number","title":"Min Z"},"max_x":{"type":"number","title":"Max X"},"max_y":{"type":"number","title":"Max Y"},"max_z":{"type":"number","title":"Max Z"},"file":{"type":"string","format":"binary","title":"File"}},"type":"object","required":["name","file"],"title":"Body_upload_map_maps_upload_map_post"},"DeviceEndDateRequest":{"properties":{"device_id":{"type":"string","title":"Device Id"},"end_date":{"anyOf":[{"type":"string","format":"date-time"},{"type":"null"}],"title":"End Date"}},"type":"object","required":["device_id"],"title":"DeviceEndDateRequest"},"DeviceTypeRequest":{"properties":{"description":{"type":"string","title":"Description"}},"type":"object","required":["description"],"title":"DeviceTypeRequest"},"EntityAssignEndRequest":{"properties":{"assignment_id":{"type":"integer","title":"Assignment Id"}},"type":"object","required":["assignment_id"],"title":"EntityAssignEndRequest"},"EntityAssignRequest":{"properties":{"parent_id":{"type":"string","title":"Parent Id"},"child_id":{"type":"string","title":"Child Id"},"reason_id":{"type":"integer","title":"Reason Id"}},"type":"object","required":["parent_id","child_id","reason_id"],"title":"EntityAssignRequest"},"EntityRequest":{"properties":{"entity_id":{"type":"string","title":"Entity Id"},"entity_type":{"type":"integer","title":"Entity Type"},"entity_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Entity Name"}},"type":"object","required":["entity_id","entity_type"],"title":"EntityRequest"},"EntityTypeRequest":{"properties":{"type_name":{"type":"string","title":"Type Name"}},"type":"object","required":["type_name"],"title":"EntityTypeRequest"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"MapAddRequest":{"properties":{"name":{"type":"string","title":"Name"},"image":{"type":"string","title":"Image"}},"type":"object","required":["name","image"],"title":"MapAddRequest"},"MapNameUpdateRequest":{"properties":{"map_id":{"type":"integer","title":"Map Id"},"name":{"type":"string","title":"Name"}},"type":"object","required":["map_id","name"],"title":"MapNameUpdateRequest"},"MapUpdateRequest":{"properties":{"map_id":{"type":"integer","title":"Map Id"},"min_x":{"type":"number","title":"Min X"},"min_y":{"type":"number","title":"Min Y"},"max_x":{"type":"number","title":"Max X"},"max_y":{"type":"number","title":"Max Y"}},"type":"object","required":["map_id","min_x","min_y","max_x","max_y"],"title":"MapUpdateRequest"},"RegionRequest":{"properties":{"region_id":{"type":"integer","title":"Region Id"},"zone_id":{"type":"integer","title":"Zone Id"},"region_name":{"type":"string","title":"Region Name"},"max_x":{"type":"number","title":"Max X"},"max_y":{"type":"number","title":"Max Y"},"max_z":{"type":"number","title":"Max Z"},"min_x":{"type":"number","title":"Min X"},"min_y":{"type":"number","title":"Min Y"},"min_z":{"type":"number","title":"Min Z"},"trigger_id":{"type":"integer","title":"Trigger Id"}},"type":"object","required":["region_id","zone_id","region_name","max_x","max_y","max_z","min_x","min_y","min_z","trigger_id"],"title":"RegionRequest"},"TriggerAddRequest":{"properties":{"direction":{"type":"integer","title":"Direction"},"name":{"type":"string","title":"Name"},"ignore":{"type":"boolean","title":"Ignore"},"zone_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Zone Id"},"vertices":{"items":{"additionalProperties":{"type":"number"},"type":"object"},"type":"array","title":"Vertices","default":[]},"is_portable":{"type":"boolean","title":"Is Portable","default":false},"assigned_tag_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Assigned Tag Id"},"radius_ft":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Radius Ft"},"z_min":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Z Min"},"z_max":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Z Max"}},"type":"object","required":["direction","name","ignore"],"title":"TriggerAddRequest"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}