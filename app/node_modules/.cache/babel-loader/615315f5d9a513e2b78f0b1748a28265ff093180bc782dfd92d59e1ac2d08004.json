{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor,\n  useLeaflet\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const [triggers, setTriggers] = useState([]);\n  const [zones, setZones] = useState([]); // Store zones\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Fetch all triggers on mount\n  useEffect(() => {\n    const fetchTriggers = async () => {\n      try {\n        const response = await fetch(\"/api/get_all_triggers\");\n        if (!response.ok) throw new Error(\"Failed to fetch triggers\");\n        const triggersData = await response.json();\n        const triggersWithVertices = await Promise.all(triggersData.map(async trigger => {\n          const verticesResponse = await fetch(`/api/get_trigger_vertices/${trigger.i_trg}`);\n          if (!verticesResponse.ok) return {\n            ...trigger,\n            vertices: []\n          };\n          const vertices = await verticesResponse.json();\n          return {\n            ...trigger,\n            vertices\n          };\n        }));\n        setTriggers(triggersWithVertices);\n      } catch (error) {\n        console.error(\"Error fetching triggers:\", error);\n        setError(`Error fetching triggers: ${error.message}`);\n      }\n    };\n    fetchTriggers();\n  }, []);\n\n  // Fetch all zones on mount\n  useEffect(() => {\n    const fetchZones = async () => {\n      try {\n        const response = await fetch(\"/api/get_all_zones\");\n        if (!response.ok) throw new Error(\"Failed to fetch zones\");\n        const zonesData = await response.json();\n        const zonesWithVertices = await Promise.all(zonesData.map(async zone => {\n          const verticesResponse = await fetch(`/api/get_zone_vertices/${zone.zone_id}`);\n          if (!verticesResponse.ok) return {\n            ...zone,\n            vertices: []\n          };\n          const vertices = await verticesResponse.json();\n          return {\n            ...zone,\n            vertices\n          };\n        }));\n        setZones(zonesWithVertices);\n      } catch (error) {\n        console.error(\"Error fetching zones:\", error);\n        setError(`Error fetching zones: ${error.message}`);\n      }\n    };\n    fetchZones();\n  }, []);\n\n  // Canvas rendering logic\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n      canvas.width = 600;\n      canvas.height = 500;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"Canvas: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        const getCanvasCoordinates = e => {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / rect.width;\n          const scaleY = canvas.height / rect.height;\n          const x = (e.clientX - rect.left) * scaleX;\n          const y = (e.clientY - rect.top) * scaleY;\n          console.log(\"Raw click coordinates:\", {\n            x,\n            y\n          });\n          return {\n            x,\n            y\n          };\n        };\n        const drawPolygon = (points, color = \"red\", currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n          // Draw existing triggers\n          triggers.forEach(trigger => {\n            if (trigger.vertices && trigger.vertices.length > 0) {\n              const canvasPoints = trigger.vertices.map(v => {\n                const xMin = mapData.bounds[0][1];\n                const xMax = mapData.bounds[1][1];\n                const yMin = mapData.bounds[0][0];\n                const yMax = mapData.bounds[1][0];\n                const xRange = xMax - xMin;\n                const yRange = yMax - yMin;\n                const x = (v.x - xMin) / xRange * canvas.width;\n                const y = (yMax - v.y) / yRange * canvas.height;\n                return {\n                  x,\n                  y\n                };\n              });\n              ctx.beginPath();\n              ctx.moveTo(canvasPoints[0].x, canvasPoints[0].y);\n              for (let i = 1; i < canvasPoints.length; i++) {\n                ctx.lineTo(canvasPoints[i].x, canvasPoints[i].y);\n              }\n              ctx.closePath();\n              ctx.strokeStyle = \"blue\";\n              ctx.stroke();\n              canvasPoints.forEach(point => {\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n                ctx.fillStyle = \"blue\";\n                ctx.fill();\n                ctx.closePath();\n              });\n            }\n          });\n\n          // Draw existing zones\n          zones.forEach(zone => {\n            if (zone.vertices && zone.vertices.length > 0) {\n              const canvasPoints = zone.vertices.map(v => {\n                const xMin = mapData.bounds[0][1];\n                const xMax = mapData.bounds[1][1];\n                const yMin = mapData.bounds[0][0];\n                const yMax = mapData.bounds[1][0];\n                const xRange = xMax - xMin;\n                const yRange = yMax - yMin;\n                const x = (v.x - xMin) / xRange * canvas.width;\n                const y = (yMax - v.y) / yRange * canvas.height;\n                return {\n                  x,\n                  y\n                };\n              });\n              ctx.beginPath();\n              ctx.moveTo(canvasPoints[0].x, canvasPoints[0].y);\n              for (let i = 1; i < canvasPoints.length; i++) {\n                ctx.lineTo(canvasPoints[i].x, canvasPoints[i].y);\n              }\n              ctx.closePath();\n              ctx.strokeStyle = \"green\"; // Different color for zones\n              ctx.stroke();\n              canvasPoints.forEach(point => {\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n                ctx.fillStyle = \"green\";\n                ctx.fill();\n                ctx.closePath();\n              });\n            }\n          });\n\n          // Draw the current polygon being drawn\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) ctx.lineTo(currentPoint.x, currentPoint.y);\n          if (close) ctx.closePath();\n          ctx.strokeStyle = color;\n          ctx.stroke();\n          points.forEach(point => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = color;\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n        const scalePoints = points => {\n          const xMin = mapData.bounds[0][1];\n          const xMax = mapData.bounds[1][1];\n          const yMin = mapData.bounds[0][0];\n          const yMax = mapData.bounds[1][0];\n          const xRange = xMax - xMin;\n          const yRange = yMax - yMin;\n          const canvasWidth = canvas.width;\n          const canvasHeight = canvas.height;\n          return points.map((point, index) => {\n            const x = xMin + point.x / canvasWidth * xRange;\n            const y = yMax - point.y / canvasHeight * yRange;\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          }).filter((point, index, self) => index === self.findIndex(p => p.n_x === point.n_x && p.n_y === point.n_y));\n        };\n        const handleMouseDown = e => {\n          if (e.button === 0) {\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            if (points.current.length === 0 || Math.hypot(point.x - points.current[points.current.length - 1].x, point.y - points.current[points.current.length - 1].y) > 5) {\n              points.current.push(point);\n              drawPolygon(points.current, triggerColor);\n            }\n          }\n        };\n        const handleMouseMove = e => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, triggerColor, point);\n          }\n        };\n        const handleMouseUp = e => {\n          if (e.button === 0) isDrawing.current = false;\n        };\n        const handleDoubleClick = e => {\n          const now = Date.now();\n          if (now - lastClickTime.current < 500) return;\n          lastClickTime.current = now;\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, triggerColor, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points (Canvas):\", scaledPoints);\n            if (onDrawComplete) onDrawComplete(JSON.stringify(scaledPoints));\n            points.current = [];\n          }\n        };\n        drawPolygon([]);\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet, triggers, zones]);\n\n  // Leaflet rendering logic\n  useEffect(() => {\n    if (mapData && mapRef.current && useLeaflet && !isInitialized.current) {\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple,\n        minZoom: -5,\n        maxZoom: 5,\n        zoomControl: true,\n        attributionControl: false\n      });\n      mapInstance.current.eachLayer(layer => {\n        if (layer instanceof L.TileLayer) mapInstance.current.removeLayer(layer);\n      });\n      const xMin = mapData.bounds[0][1];\n      const xMax = mapData.bounds[1][1];\n      const yMin = mapData.bounds[0][0];\n      const yMax = mapData.bounds[1][0];\n      const xRange = xMax - xMin;\n      const yRange = yMax - yMin;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      img.onload = () => {\n        console.log(\"Leaflet: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        const pixelBounds = [[0, 0], [600, 500]];\n        L.imageOverlay(mapData.imageUrl, [[yMin, xMin], [yMax, xMax]]).addTo(mapInstance.current);\n        mapInstance.current.fitBounds([[yMin, xMin], [yMax, xMax]]);\n        mapInstance.current.addLayer(drawnItems.current);\n\n        // Draw existing triggers\n        triggers.forEach(trigger => {\n          if (trigger.vertices && trigger.vertices.length > 0) {\n            const latLngs = trigger.vertices.map(v => [v.y, v.x]);\n            const polygon = L.polygon(latLngs, {\n              color: \"blue\"\n            }).addTo(drawnItems.current);\n            polygon.bindPopup(`Trigger: ${trigger.x_nm_trg} (ID: ${trigger.i_trg})`);\n          }\n        });\n\n        // Draw existing zones\n        zones.forEach(zone => {\n          if (zone.vertices && zone.vertices.length > 0) {\n            const latLngs = zone.vertices.map(v => [v.y, v.x]);\n            const polygon = L.polygon(latLngs, {\n              color: \"green\"\n            }).addTo(drawnItems.current);\n            polygon.bindPopup(`Zone: ${zone.name} (ID: ${zone.zone_id})`);\n          }\n        });\n        const colorMap = {\n          red: \"#ff0000\",\n          green: \"#00ff00\",\n          blue: \"#0000ff\"\n        };\n        const drawControl = new L.Control.Draw({\n          edit: {\n            featureGroup: drawnItems.current\n          },\n          draw: {\n            polygon: {\n              shapeOptions: {\n                color: colorMap[triggerColor] || \"#ff0000\",\n                weight: 2\n              }\n            },\n            rectangle: false,\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false\n          }\n        });\n        mapInstance.current.addControl(drawControl);\n        mapInstance.current.on(L.Draw.Event.CREATED, event => {\n          const layer = event.layer;\n          drawnItems.current.addLayer(layer);\n          const coords = layer.getLatLngs()[0].map((latLng, index) => {\n            console.log(`Raw latLng for point ${index + 1}:`, {\n              lat: latLng.lat,\n              lng: latLng.lng\n            });\n            const normalizedLat = (latLng.lat - yMin) / yRange;\n            const normalizedLng = (latLng.lng - xMin) / xRange;\n            const x = xMin + normalizedLng * xRange;\n            const y = yMin + normalizedLat * yRange;\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          });\n          console.log(\"Scaled points (Leaflet):\", coords);\n          if (onDrawComplete) onDrawComplete(JSON.stringify(coords));\n        });\n        isInitialized.current = true;\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet, triggers, zones]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false;\n      }\n      if (mapData && imageRef.current) {\n        const img = new Image();\n        img.src = mapData.imageUrl;\n      }\n    };\n  }, [mapData]);\n  if (useLeaflet) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginBottom: \"10px\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          height: \"500px\",\n          width: \"600px\",\n          border: \"2px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginBottom: \"10px\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        id: \"map\",\n        style: {\n          border: \"2px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this);\n  }\n}, \"zxQN9IdeGf5bQk7YOKNV2i6vsTM=\")), \"zxQN9IdeGf5bQk7YOKNV2i6vsTM=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"Map$memo\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","Map","_s","_c","zoneId","onDrawComplete","triggerColor","useLeaflet","mapRef","mapInstance","drawnItems","FeatureGroup","canvasRef","mapData","setMapData","error","setError","triggers","setTriggers","zones","setZones","isInitialized","points","isDrawing","ctxRef","imageRef","lastClickTime","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","fetchTriggers","triggersData","triggersWithVertices","Promise","all","map","trigger","verticesResponse","i_trg","vertices","fetchZones","zonesData","zonesWithVertices","zone","zone_id","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","getCanvasCoordinates","e","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","drawPolygon","color","currentPoint","close","clearRect","forEach","length","canvasPoints","v","xMin","bounds","xMax","yMin","yMax","xRange","yRange","beginPath","moveTo","i","lineTo","closePath","strokeStyle","stroke","point","arc","Math","PI","fillStyle","fill","scalePoints","canvasWidth","canvasHeight","index","n_x","n_y","n_z","n_ord","filter","self","findIndex","p","handleMouseDown","button","hypot","push","handleMouseMove","handleMouseUp","handleDoubleClick","now","Date","scaledPoints","JSON","stringify","addEventListener","removeEventListener","onerror","crs","CRS","Simple","minZoom","maxZoom","zoomControl","attributionControl","eachLayer","layer","TileLayer","removeLayer","pixelBounds","imageOverlay","addTo","fitBounds","addLayer","latLngs","polygon","bindPopup","x_nm_trg","name","colorMap","red","green","blue","drawControl","Control","Draw","edit","featureGroup","draw","shapeOptions","weight","rectangle","polyline","circle","marker","circlemarker","addControl","on","Event","CREATED","event","coords","getLatLngs","latLng","lat","lng","normalizedLat","normalizedLng","remove","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","id","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\n\nconst Map = memo(({ zoneId, onDrawComplete, triggerColor, useLeaflet }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const [triggers, setTriggers] = useState([]);\n  const [zones, setZones] = useState([]); // Store zones\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Fetch all triggers on mount\n  useEffect(() => {\n    const fetchTriggers = async () => {\n      try {\n        const response = await fetch(\"/api/get_all_triggers\");\n        if (!response.ok) throw new Error(\"Failed to fetch triggers\");\n        const triggersData = await response.json();\n        const triggersWithVertices = await Promise.all(\n          triggersData.map(async (trigger) => {\n            const verticesResponse = await fetch(`/api/get_trigger_vertices/${trigger.i_trg}`);\n            if (!verticesResponse.ok) return { ...trigger, vertices: [] };\n            const vertices = await verticesResponse.json();\n            return { ...trigger, vertices };\n          })\n        );\n        setTriggers(triggersWithVertices);\n      } catch (error) {\n        console.error(\"Error fetching triggers:\", error);\n        setError(`Error fetching triggers: ${error.message}`);\n      }\n    };\n    fetchTriggers();\n  }, []);\n\n  // Fetch all zones on mount\n  useEffect(() => {\n    const fetchZones = async () => {\n      try {\n        const response = await fetch(\"/api/get_all_zones\");\n        if (!response.ok) throw new Error(\"Failed to fetch zones\");\n        const zonesData = await response.json();\n        const zonesWithVertices = await Promise.all(\n          zonesData.map(async (zone) => {\n            const verticesResponse = await fetch(`/api/get_zone_vertices/${zone.zone_id}`);\n            if (!verticesResponse.ok) return { ...zone, vertices: [] };\n            const vertices = await verticesResponse.json();\n            return { ...zone, vertices };\n          })\n        );\n        setZones(zonesWithVertices);\n      } catch (error) {\n        console.error(\"Error fetching zones:\", error);\n        setError(`Error fetching zones: ${error.message}`);\n      }\n    };\n    fetchZones();\n  }, []);\n\n  // Canvas rendering logic\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      canvas.width = 600;\n      canvas.height = 500;\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n\n      img.onload = () => {\n        console.log(\"Canvas: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        const getCanvasCoordinates = (e) => {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / rect.width;\n          const scaleY = canvas.height / rect.height;\n          const x = (e.clientX - rect.left) * scaleX;\n          const y = (e.clientY - rect.top) * scaleY;\n          console.log(\"Raw click coordinates:\", { x, y });\n          return { x, y };\n        };\n\n        const drawPolygon = (points, color = \"red\", currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n          // Draw existing triggers\n          triggers.forEach((trigger) => {\n            if (trigger.vertices && trigger.vertices.length > 0) {\n              const canvasPoints = trigger.vertices.map((v) => {\n                const xMin = mapData.bounds[0][1];\n                const xMax = mapData.bounds[1][1];\n                const yMin = mapData.bounds[0][0];\n                const yMax = mapData.bounds[1][0];\n                const xRange = xMax - xMin;\n                const yRange = yMax - yMin;\n                const x = ((v.x - xMin) / xRange) * canvas.width;\n                const y = ((yMax - v.y) / yRange) * canvas.height;\n                return { x, y };\n              });\n              ctx.beginPath();\n              ctx.moveTo(canvasPoints[0].x, canvasPoints[0].y);\n              for (let i = 1; i < canvasPoints.length; i++) {\n                ctx.lineTo(canvasPoints[i].x, canvasPoints[i].y);\n              }\n              ctx.closePath();\n              ctx.strokeStyle = \"blue\";\n              ctx.stroke();\n              canvasPoints.forEach((point) => {\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n                ctx.fillStyle = \"blue\";\n                ctx.fill();\n                ctx.closePath();\n              });\n            }\n          });\n\n          // Draw existing zones\n          zones.forEach((zone) => {\n            if (zone.vertices && zone.vertices.length > 0) {\n              const canvasPoints = zone.vertices.map((v) => {\n                const xMin = mapData.bounds[0][1];\n                const xMax = mapData.bounds[1][1];\n                const yMin = mapData.bounds[0][0];\n                const yMax = mapData.bounds[1][0];\n                const xRange = xMax - xMin;\n                const yRange = yMax - yMin;\n                const x = ((v.x - xMin) / xRange) * canvas.width;\n                const y = ((yMax - v.y) / yRange) * canvas.height;\n                return { x, y };\n              });\n              ctx.beginPath();\n              ctx.moveTo(canvasPoints[0].x, canvasPoints[0].y);\n              for (let i = 1; i < canvasPoints.length; i++) {\n                ctx.lineTo(canvasPoints[i].x, canvasPoints[i].y);\n              }\n              ctx.closePath();\n              ctx.strokeStyle = \"green\"; // Different color for zones\n              ctx.stroke();\n              canvasPoints.forEach((point) => {\n                ctx.beginPath();\n                ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n                ctx.fillStyle = \"green\";\n                ctx.fill();\n                ctx.closePath();\n              });\n            }\n          });\n\n          // Draw the current polygon being drawn\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) ctx.lineTo(currentPoint.x, currentPoint.y);\n          if (close) ctx.closePath();\n          ctx.strokeStyle = color;\n          ctx.stroke();\n          points.forEach((point) => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = color;\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n\n        const scalePoints = (points) => {\n          const xMin = mapData.bounds[0][1];\n          const xMax = mapData.bounds[1][1];\n          const yMin = mapData.bounds[0][0];\n          const yMax = mapData.bounds[1][0];\n          const xRange = xMax - xMin;\n          const yRange = yMax - yMin;\n          const canvasWidth = canvas.width;\n          const canvasHeight = canvas.height;\n\n          return points.map((point, index) => {\n            const x = xMin + (point.x / canvasWidth) * xRange;\n            const y = yMax - ((point.y / canvasHeight) * yRange);\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          }).filter((point, index, self) =>\n            index === self.findIndex((p) => p.n_x === point.n_x && p.n_y === point.n_y)\n          );\n        };\n\n        const handleMouseDown = (e) => {\n          if (e.button === 0) {\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            if (points.current.length === 0 || \n                Math.hypot(point.x - points.current[points.current.length - 1].x, \n                          point.y - points.current[points.current.length - 1].y) > 5) {\n              points.current.push(point);\n              drawPolygon(points.current, triggerColor);\n            }\n          }\n        };\n\n        const handleMouseMove = (e) => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, triggerColor, point);\n          }\n        };\n\n        const handleMouseUp = (e) => {\n          if (e.button === 0) isDrawing.current = false;\n        };\n\n        const handleDoubleClick = (e) => {\n          const now = Date.now();\n          if (now - lastClickTime.current < 500) return;\n          lastClickTime.current = now;\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, triggerColor, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points (Canvas):\", scaledPoints);\n            if (onDrawComplete) onDrawComplete(JSON.stringify(scaledPoints));\n            points.current = [];\n          }\n        };\n\n        drawPolygon([]);\n\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet, triggers, zones]);\n\n  // Leaflet rendering logic\n  useEffect(() => {\n    if (mapData && mapRef.current && useLeaflet && !isInitialized.current) {\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple,\n        minZoom: -5,\n        maxZoom: 5,\n        zoomControl: true,\n        attributionControl: false,\n      });\n\n      mapInstance.current.eachLayer((layer) => {\n        if (layer instanceof L.TileLayer) mapInstance.current.removeLayer(layer);\n      });\n\n      const xMin = mapData.bounds[0][1];\n      const xMax = mapData.bounds[1][1];\n      const yMin = mapData.bounds[0][0];\n      const yMax = mapData.bounds[1][0];\n      const xRange = xMax - xMin;\n      const yRange = yMax - yMin;\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n\n      img.onload = () => {\n        console.log(\"Leaflet: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        const pixelBounds = [\n          [0, 0],\n          [600, 500],\n        ];\n\n        L.imageOverlay(mapData.imageUrl, [\n          [yMin, xMin],\n          [yMax, xMax],\n        ]).addTo(mapInstance.current);\n        mapInstance.current.fitBounds([\n          [yMin, xMin],\n          [yMax, xMax],\n        ]);\n\n        mapInstance.current.addLayer(drawnItems.current);\n\n        // Draw existing triggers\n        triggers.forEach((trigger) => {\n          if (trigger.vertices && trigger.vertices.length > 0) {\n            const latLngs = trigger.vertices.map((v) => [v.y, v.x]);\n            const polygon = L.polygon(latLngs, { color: \"blue\" }).addTo(drawnItems.current);\n            polygon.bindPopup(`Trigger: ${trigger.x_nm_trg} (ID: ${trigger.i_trg})`);\n          }\n        });\n\n        // Draw existing zones\n        zones.forEach((zone) => {\n          if (zone.vertices && zone.vertices.length > 0) {\n            const latLngs = zone.vertices.map((v) => [v.y, v.x]);\n            const polygon = L.polygon(latLngs, { color: \"green\" }).addTo(drawnItems.current);\n            polygon.bindPopup(`Zone: ${zone.name} (ID: ${zone.zone_id})`);\n          }\n        });\n\n        const colorMap = {\n          red: \"#ff0000\",\n          green: \"#00ff00\",\n          blue: \"#0000ff\",\n        };\n\n        const drawControl = new L.Control.Draw({\n          edit: { featureGroup: drawnItems.current },\n          draw: {\n            polygon: {\n              shapeOptions: { color: colorMap[triggerColor] || \"#ff0000\", weight: 2 },\n            },\n            rectangle: false,\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n          },\n        });\n        mapInstance.current.addControl(drawControl);\n\n        mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n          const layer = event.layer;\n          drawnItems.current.addLayer(layer);\n          const coords = layer.getLatLngs()[0].map((latLng, index) => {\n            console.log(`Raw latLng for point ${index + 1}:`, { lat: latLng.lat, lng: latLng.lng });\n            const normalizedLat = (latLng.lat - yMin) / yRange;\n            const normalizedLng = (latLng.lng - xMin) / xRange;\n            const x = xMin + normalizedLng * xRange;\n            const y = yMin + normalizedLat * yRange;\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          });\n          console.log(\"Scaled points (Leaflet):\", coords);\n          if (onDrawComplete) onDrawComplete(JSON.stringify(coords));\n        });\n\n        isInitialized.current = true;\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet, triggers, zones]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false;\n      }\n      if (mapData && imageRef.current) {\n        const img = new Image();\n        img.src = mapData.imageUrl;\n      }\n    };\n  }, [mapData]);\n\n  if (useLeaflet) {\n    return (\n      <div>\n        {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n        <div ref={mapRef} style={{ height: \"500px\", width: \"600px\", border: \"2px solid black\" }} />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n        <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n      </div>\n    );\n  }\n});\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}