{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw (already included in package.json)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  zoneId,\n  onDrawComplete\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId]);\n\n  // Initialize the Leaflet map when mapData is available\n  useEffect(() => {\n    if (mapData && mapRef.current && !mapInstance.current) {\n      try {\n        // Initialize the map with a simple CRS for non-geographic maps\n        mapInstance.current = L.map(mapRef.current, {\n          crs: L.CRS.Simple,\n          minZoom: -5,\n          maxZoom: 5\n        });\n        const bounds = [[mapData.bounds[0][0], mapData.bounds[0][1]], [mapData.bounds[1][0], mapData.bounds[1][1]]];\n\n        // Test image load before adding to Leaflet\n        const img = new Image();\n        img.src = mapData.imageUrl;\n        img.onload = () => {\n          console.log(\"Map image loaded successfully:\", mapData.imageUrl);\n          L.imageOverlay(mapData.imageUrl, bounds).addTo(mapInstance.current);\n          mapInstance.current.fitBounds(bounds);\n\n          // Set up drawing tools\n          const drawnItems = new L.FeatureGroup();\n          mapInstance.current.addLayer(drawnItems);\n          const drawControl = new L.Control.Draw({\n            edit: {\n              featureGroup: drawnItems\n            },\n            draw: {\n              polygon: true,\n              polyline: false,\n              rectangle: false,\n              circle: false,\n              marker: false,\n              circlemarker: false\n            }\n          });\n          mapInstance.current.addControl(drawControl);\n          mapInstance.current.on(L.Draw.Event.CREATED, event => {\n            const layer = event.layer;\n            drawnItems.addLayer(layer);\n            const coordinates = layer.getLatLngs()[0].map(coord => [coord.lat, coord.lng]);\n            console.log(\"Drawn coordinates:\", coordinates);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(coordinates));\n            }\n          });\n        };\n        img.onerror = () => {\n          console.error(\"Failed to load map image:\", mapData.imageUrl);\n          setError(\"Failed to load map image. Please ensure the map image is available.\");\n        };\n      } catch (error) {\n        console.error(\"Error initializing map:\", error);\n        setError(`Error initializing map: ${error.message}`);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n      }\n    };\n  }, [mapData, onDrawComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"500px\",\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"UnmXQr4YyN9+Al8Y9S8JLg3ynxc=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","Map","zoneId","onDrawComplete","_s","mapRef","mapInstance","mapData","setMapData","error","setError","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","current","map","crs","CRS","Simple","minZoom","maxZoom","bounds","img","Image","src","imageUrl","onload","imageOverlay","addTo","fitBounds","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","edit","featureGroup","draw","polygon","polyline","rectangle","circle","marker","circlemarker","addControl","on","Event","CREATED","event","layer","coordinates","getLatLngs","coord","lat","lng","JSON","stringify","onerror","remove","children","style","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","height","width","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw (already included in package.json)\n\nconst Map = ({ zoneId, onDrawComplete }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n\n      fetchMapData();\n    }\n  }, [zoneId]);\n\n  // Initialize the Leaflet map when mapData is available\n  useEffect(() => {\n    if (mapData && mapRef.current && !mapInstance.current) {\n      try {\n        // Initialize the map with a simple CRS for non-geographic maps\n        mapInstance.current = L.map(mapRef.current, {\n          crs: L.CRS.Simple,\n          minZoom: -5,\n          maxZoom: 5,\n        });\n\n        const bounds = [\n          [mapData.bounds[0][0], mapData.bounds[0][1]],\n          [mapData.bounds[1][0], mapData.bounds[1][1]],\n        ];\n\n        // Test image load before adding to Leaflet\n        const img = new Image();\n        img.src = mapData.imageUrl;\n        img.onload = () => {\n          console.log(\"Map image loaded successfully:\", mapData.imageUrl);\n          L.imageOverlay(mapData.imageUrl, bounds).addTo(mapInstance.current);\n          mapInstance.current.fitBounds(bounds);\n\n          // Set up drawing tools\n          const drawnItems = new L.FeatureGroup();\n          mapInstance.current.addLayer(drawnItems);\n\n          const drawControl = new L.Control.Draw({\n            edit: {\n              featureGroup: drawnItems,\n            },\n            draw: {\n              polygon: true,\n              polyline: false,\n              rectangle: false,\n              circle: false,\n              marker: false,\n              circlemarker: false,\n            },\n          });\n          mapInstance.current.addControl(drawControl);\n\n          mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n            const layer = event.layer;\n            drawnItems.addLayer(layer);\n            const coordinates = layer.getLatLngs()[0].map((coord) => [coord.lat, coord.lng]);\n            console.log(\"Drawn coordinates:\", coordinates);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(coordinates));\n            }\n          });\n        };\n        img.onerror = () => {\n          console.error(\"Failed to load map image:\", mapData.imageUrl);\n          setError(\"Failed to load map image. Please ensure the map image is available.\");\n        };\n      } catch (error) {\n        console.error(\"Error initializing map:\", error);\n        setError(`Error initializing map: ${error.message}`);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n      }\n    };\n  }, [mapData, onDrawComplete]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      <div ref={mapRef} style={{ height: \"500px\", width: \"100%\" }} />\n    </div>\n  );\n};\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}