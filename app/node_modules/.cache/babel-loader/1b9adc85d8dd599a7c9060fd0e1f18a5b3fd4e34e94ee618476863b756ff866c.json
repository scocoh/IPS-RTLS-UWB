{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport \"./Map.css\"; // Ensure this matches the file name (Map.css)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0); // For debouncing double-click\n\n  // Debug mount/unmount\n  useEffect(() => {\n    console.log(\"Map component mounted with zoneId:\", zoneId);\n    return () => {\n      console.log(\"Map component unmounted with zoneId:\", zoneId);\n    };\n  }, [zoneId]);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Initialize the canvas and draw the map image\n  useEffect(() => {\n    if (mapData && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      // Set canvas dimensions to match the container\n      canvas.width = 600;\n      canvas.height = 500;\n\n      // Load the map image\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        // Draw the image scaled to the canvas\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Initialize drawing logic\n        const getCanvasCoordinates = e => {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / rect.width; // Adjust for CSS scaling\n          const scaleY = canvas.height / rect.height;\n          const x = (e.clientX - rect.left) * scaleX;\n          const y = (e.clientY - rect.top) * scaleY;\n          console.log(\"Raw click coordinates:\", {\n            x,\n            y\n          }); // Debug log\n          return {\n            x,\n            y\n          };\n        };\n        const drawPolygon = (points, currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          // Redraw the map image\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n          // Draw the polygon\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) {\n            ctx.lineTo(currentPoint.x, currentPoint.y);\n          }\n          if (close) {\n            ctx.closePath();\n          }\n          ctx.strokeStyle = triggerColor || \"red\";\n          ctx.stroke();\n\n          // Draw circles at vertex points\n          points.forEach(point => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = triggerColor || \"red\";\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n        const scalePoints = points => {\n          const canvasWidth = canvas.width; // 600\n          const canvasHeight = canvas.height; // 500\n          const xMin = -80;\n          const xMax = 160;\n          const yMin = -40;\n          const yMax = 160;\n          const xRange = xMax - xMin; // 240\n          const yRange = yMax - yMin; // 200\n\n          const scaledPoints = points.map((point, index) => {\n            // Map directly from canvas pixels to logical coordinates\n            const x = xMin + point.x / canvasWidth * xRange; // Map to [-80, 160]\n            const y = yMax - point.y / canvasHeight * yRange; // Map to [-40, 160], flipped\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          });\n          return scaledPoints;\n        };\n\n        // Mouse event listeners\n        const handleMouseDown = e => {\n          if (e.button === 0) {\n            // Left click\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            points.current.push(point);\n            drawPolygon(points.current);\n          }\n        };\n        const handleMouseMove = e => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, point);\n          }\n        };\n        const handleMouseUp = e => {\n          if (e.button === 0) {\n            isDrawing.current = false;\n          }\n        };\n        const handleDoubleClick = e => {\n          const now = Date.now();\n          if (now - lastClickTime.current < 300) return; // Debounce double-click\n          lastClickTime.current = now;\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points:\", scaledPoints);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(scaledPoints));\n            }\n            points.current = []; // Reset points after completing the polygon\n          }\n        };\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n\n        // Cleanup event listeners on unmount\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"map\",\n      style: {\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}, \"rx3gmptrr33h0HsQWopaZcCQpYc=\")), \"rx3gmptrr33h0HsQWopaZcCQpYc=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"Map$memo\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","jsxDEV","_jsxDEV","Map","_s","_c","zoneId","onDrawComplete","triggerColor","canvasRef","mapData","setMapData","error","setError","points","isDrawing","ctxRef","imageRef","lastClickTime","console","log","fetchMapData","response","fetch","ok","text","Error","status","data","json","message","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","getCanvasCoordinates","e","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","drawPolygon","currentPoint","close","clearRect","length","beginPath","moveTo","i","lineTo","closePath","strokeStyle","stroke","forEach","point","arc","Math","PI","fillStyle","fill","scalePoints","canvasWidth","canvasHeight","xMin","xMax","yMin","yMax","xRange","yRange","scaledPoints","map","index","n_x","n_y","n_z","n_ord","handleMouseDown","button","push","handleMouseMove","handleMouseUp","handleDoubleClick","now","Date","JSON","stringify","addEventListener","removeEventListener","onerror","children","style","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","border","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from \"react\";\nimport \"./Map.css\"; // Ensure this matches the file name (Map.css)\n\nconst Map = memo(({ zoneId, onDrawComplete, triggerColor }) => {\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0); // For debouncing double-click\n\n  // Debug mount/unmount\n  useEffect(() => {\n    console.log(\"Map component mounted with zoneId:\", zoneId);\n    return () => {\n      console.log(\"Map component unmounted with zoneId:\", zoneId);\n    };\n  }, [zoneId]);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Initialize the canvas and draw the map image\n  useEffect(() => {\n    if (mapData && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      // Set canvas dimensions to match the container\n      canvas.width = 600;\n      canvas.height = 500;\n\n      // Load the map image\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n\n      img.onload = () => {\n        console.log(\"Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        // Draw the image scaled to the canvas\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Initialize drawing logic\n        const getCanvasCoordinates = (e) => {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / rect.width; // Adjust for CSS scaling\n          const scaleY = canvas.height / rect.height;\n          const x = (e.clientX - rect.left) * scaleX;\n          const y = (e.clientY - rect.top) * scaleY;\n          console.log(\"Raw click coordinates:\", { x, y }); // Debug log\n          return { x, y };\n        };\n\n        const drawPolygon = (points, currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          // Redraw the map image\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n          // Draw the polygon\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) {\n            ctx.lineTo(currentPoint.x, currentPoint.y);\n          }\n          if (close) {\n            ctx.closePath();\n          }\n          ctx.strokeStyle = triggerColor || \"red\";\n          ctx.stroke();\n\n          // Draw circles at vertex points\n          points.forEach((point) => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = triggerColor || \"red\";\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n\n        const scalePoints = (points) => {\n          const canvasWidth = canvas.width; // 600\n          const canvasHeight = canvas.height; // 500\n          const xMin = -80;\n          const xMax = 160;\n          const yMin = -40;\n          const yMax = 160;\n          const xRange = xMax - xMin; // 240\n          const yRange = yMax - yMin; // 200\n\n          const scaledPoints = points.map((point, index) => {\n            // Map directly from canvas pixels to logical coordinates\n            const x = xMin + (point.x / canvasWidth) * xRange; // Map to [-80, 160]\n            const y = yMax - (point.y / canvasHeight) * yRange; // Map to [-40, 160], flipped\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          });\n          return scaledPoints;\n        };\n\n        // Mouse event listeners\n        const handleMouseDown = (e) => {\n          if (e.button === 0) { // Left click\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            points.current.push(point);\n            drawPolygon(points.current);\n          }\n        };\n\n        const handleMouseMove = (e) => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, point);\n          }\n        };\n\n        const handleMouseUp = (e) => {\n          if (e.button === 0) {\n            isDrawing.current = false;\n          }\n        };\n\n        const handleDoubleClick = (e) => {\n          const now = Date.now();\n          if (now - lastClickTime.current < 300) return; // Debounce double-click\n          lastClickTime.current = now;\n\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points:\", scaledPoints);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(scaledPoints));\n            }\n            points.current = []; // Reset points after completing the polygon\n          }\n        };\n\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n\n        // Cleanup event listeners on unmount\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n    </div>\n  );\n});\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}