{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js\",\n  _s = $RefreshSig$();\n// /home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js\nimport React, { useState, useEffect } from \"react\";\nimport MapZoneViewer from \"./MapZoneViewer\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ZoneViewer = () => {\n  _s();\n  var _zones$;\n  const [campuses, setCampuses] = useState([]);\n  const [selectedCampus, setSelectedCampus] = useState(null);\n  const [zones, setZones] = useState([]);\n  const [checkedZones, setCheckedZones] = useState([]);\n  const [vertices, setVertices] = useState([]);\n  const [useLeaflet, setUseLeaflet] = useState(false);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [fetchError, setFetchError] = useState(null);\n\n  // Fetch campuses on mount\n  useEffect(() => {\n    const fetchCampuses = async () => {\n      try {\n        const response = await fetch(\"/zoneviewer/get_campus_zones\");\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        setCampuses(data.campuses || []);\n        setFetchError(null);\n      } catch (error) {\n        console.error(\"❌ Error fetching campuses:\", error);\n        setFetchError(error.message);\n      }\n    };\n    fetchCampuses();\n  }, []);\n\n  // Fetch zones and vertices when campus changes\n  useEffect(() => {\n    if (selectedCampus) {\n      const fetchZonesAndVertices = async () => {\n        try {\n          const zonesResponse = await fetch(`/zoneviewer/get_all_zones_for_campus/${selectedCampus}`);\n          if (!zonesResponse.ok) throw new Error(`Zones fetch failed: ${zonesResponse.status}`);\n          const zonesData = await zonesResponse.json();\n          setZones(zonesData.zones || []);\n          setCheckedZones([selectedCampus]); // Default to campus checked\n\n          const verticesResponse = await fetch(`/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n          if (!verticesResponse.ok) throw new Error(`Vertices fetch failed: ${verticesResponse.status}`);\n          const verticesData = await verticesResponse.json();\n          setVertices(verticesData.vertices || []);\n          setEditedVertices({});\n        } catch (error) {\n          console.error(\"❌ Error fetching zones/vertices:\", error);\n          setFetchError(error.message);\n        }\n      };\n      fetchZonesAndVertices();\n    }\n  }, [selectedCampus]);\n\n  // Handle zone checkbox toggle\n  const handleZoneToggle = zoneId => {\n    setCheckedZones(prev => prev.includes(zoneId) ? prev.filter(id => id !== zoneId) : [...prev, zoneId]);\n  };\n\n  // Render zones recursively\n  const renderZones = (zones, depth = 0) => {\n    return zones.map(zone => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: `${depth * 20}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checkedZones.includes(zone.zone_id),\n        onChange: () => handleZoneToggle(zone.zone_id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: zone.zone_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), zone.children && zone.children.length > 0 && renderZones(zone.children, depth + 1)]\n    }, zone.zone_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this));\n  };\n\n  // Handle vertex edit\n  const handleVertexChange = (vertexId, field, value) => {\n    const numValue = parseFloat(value) || 0;\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: {\n        ...prev[vertexId],\n        [field]: numValue\n      }\n    }));\n  };\n\n  // Save edited vertices\n  const saveVertices = async () => {\n    const updates = Object.entries(editedVertices).map(([vertexId, changes]) => {\n      var _changes$x, _changes$y, _changes$z;\n      const vertex = vertices.find(v => v.vertex_id === parseInt(vertexId));\n      return {\n        vertex_id: vertex.vertex_id,\n        x: (_changes$x = changes.x) !== null && _changes$x !== void 0 ? _changes$x : vertex.x,\n        y: (_changes$y = changes.y) !== null && _changes$y !== void 0 ? _changes$y : vertex.y,\n        z: (_changes$z = changes.z) !== null && _changes$z !== void 0 ? _changes$z : vertex.z\n      };\n    });\n    if (updates.length === 0) return;\n    try {\n      const response = await fetch(\"/zoneviewer/update_vertices\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) throw new Error(`Failed to save: ${response.status}`);\n      const result = await response.json();\n      console.log(\"✅ Vertices saved:\", result);\n      setVertices(prev => prev.map(v => {\n        const update = updates.find(u => u.vertex_id === v.vertex_id);\n        return update ? {\n          ...v,\n          ...update\n        } : v;\n      }));\n      setEditedVertices({});\n      alert(\"Vertices updated successfully!\");\n    } catch (error) {\n      console.error(\"❌ Error saving vertices:\", error);\n      alert(\"Failed to save vertices.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Zone Viewer & Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: fetchError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Campus:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedCampus(parseInt(e.target.value)),\n      value: selectedCampus || \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a Campus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), campuses.map(campus => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: campus.zone_id,\n        children: campus.zone_name\n      }, campus.zone_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Render with Leaflet:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: useLeaflet,\n      onChange: e => setUseLeaflet(e.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), selectedCampus && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Zones:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderZones(zones)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MapZoneViewer, {\n        mapId: (_zones$ = zones[0]) === null || _zones$ === void 0 ? void 0 : _zones$.map_id,\n        zones: zones,\n        checkedZones: checkedZones,\n        vertices: vertices,\n        useLeaflet: useLeaflet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Vertices:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: \"100%\",\n          borderCollapse: \"collapse\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Vertex #\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Y\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: vertices.filter(v => checkedZones.includes(v.zone_id)).map(v => {\n            var _editedVertices$v$ver, _editedVertices$v$ver2, _editedVertices$v$ver3, _editedVertices$v$ver4, _editedVertices$v$ver5, _editedVertices$v$ver6;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: v.vertex_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: (_editedVertices$v$ver = (_editedVertices$v$ver2 = editedVertices[v.vertex_id]) === null || _editedVertices$v$ver2 === void 0 ? void 0 : _editedVertices$v$ver2.x) !== null && _editedVertices$v$ver !== void 0 ? _editedVertices$v$ver : v.x,\n                  onChange: e => handleVertexChange(v.vertex_id, \"x\", e.target.value),\n                  step: \"0.000001\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: (_editedVertices$v$ver3 = (_editedVertices$v$ver4 = editedVertices[v.vertex_id]) === null || _editedVertices$v$ver4 === void 0 ? void 0 : _editedVertices$v$ver4.y) !== null && _editedVertices$v$ver3 !== void 0 ? _editedVertices$v$ver3 : v.y,\n                  onChange: e => handleVertexChange(v.vertex_id, \"y\", e.target.value),\n                  step: \"0.000001\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: (_editedVertices$v$ver5 = (_editedVertices$v$ver6 = editedVertices[v.vertex_id]) === null || _editedVertices$v$ver6 === void 0 ? void 0 : _editedVertices$v$ver6.z) !== null && _editedVertices$v$ver5 !== void 0 ? _editedVertices$v$ver5 : v.z,\n                  onChange: e => handleVertexChange(v.vertex_id, \"z\", e.target.value),\n                  step: \"0.000001\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 41\n              }, this)]\n            }, v.vertex_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveVertices,\n        style: {\n          marginTop: \"10px\"\n        },\n        children: \"Save All Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(ZoneViewer, \"72RyNPivfSsSRQF/gNYx4loNGVQ=\");\n_c = ZoneViewer;\nexport default ZoneViewer;\nvar _c;\n$RefreshReg$(_c, \"ZoneViewer\");","map":{"version":3,"names":["React","useState","useEffect","MapZoneViewer","jsxDEV","_jsxDEV","Fragment","_Fragment","ZoneViewer","_s","_zones$","campuses","setCampuses","selectedCampus","setSelectedCampus","zones","setZones","checkedZones","setCheckedZones","vertices","setVertices","useLeaflet","setUseLeaflet","editedVertices","setEditedVertices","fetchError","setFetchError","fetchCampuses","response","fetch","ok","Error","status","data","json","error","console","message","fetchZonesAndVertices","zonesResponse","zonesData","verticesResponse","verticesData","handleZoneToggle","zoneId","prev","includes","filter","id","renderZones","depth","map","zone","style","marginLeft","children","type","checked","zone_id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","zone_name","length","handleVertexChange","vertexId","field","value","numValue","parseFloat","saveVertices","updates","Object","entries","changes","_changes$x","_changes$y","_changes$z","vertex","find","v","vertex_id","parseInt","x","y","z","method","headers","body","JSON","stringify","result","log","update","u","alert","color","e","target","campus","mapId","map_id","width","borderCollapse","_editedVertices$v$ver","_editedVertices$v$ver2","_editedVertices$v$ver3","_editedVertices$v$ver4","_editedVertices$v$ver5","_editedVertices$v$ver6","step","onClick","marginTop","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js"],"sourcesContent":["// /home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js\nimport React, { useState, useEffect } from \"react\";\nimport MapZoneViewer from \"./MapZoneViewer\";\n\nconst ZoneViewer = () => {\n    const [campuses, setCampuses] = useState([]);\n    const [selectedCampus, setSelectedCampus] = useState(null);\n    const [zones, setZones] = useState([]);\n    const [checkedZones, setCheckedZones] = useState([]);\n    const [vertices, setVertices] = useState([]);\n    const [useLeaflet, setUseLeaflet] = useState(false);\n    const [editedVertices, setEditedVertices] = useState({});\n    const [fetchError, setFetchError] = useState(null);\n\n    // Fetch campuses on mount\n    useEffect(() => {\n        const fetchCampuses = async () => {\n            try {\n                const response = await fetch(\"/zoneviewer/get_campus_zones\");\n                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n                const data = await response.json();\n                setCampuses(data.campuses || []);\n                setFetchError(null);\n            } catch (error) {\n                console.error(\"❌ Error fetching campuses:\", error);\n                setFetchError(error.message);\n            }\n        };\n        fetchCampuses();\n    }, []);\n\n    // Fetch zones and vertices when campus changes\n    useEffect(() => {\n        if (selectedCampus) {\n            const fetchZonesAndVertices = async () => {\n                try {\n                    const zonesResponse = await fetch(`/zoneviewer/get_all_zones_for_campus/${selectedCampus}`);\n                    if (!zonesResponse.ok) throw new Error(`Zones fetch failed: ${zonesResponse.status}`);\n                    const zonesData = await zonesResponse.json();\n                    setZones(zonesData.zones || []);\n                    setCheckedZones([selectedCampus]); // Default to campus checked\n\n                    const verticesResponse = await fetch(`/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n                    if (!verticesResponse.ok) throw new Error(`Vertices fetch failed: ${verticesResponse.status}`);\n                    const verticesData = await verticesResponse.json();\n                    setVertices(verticesData.vertices || []);\n                    setEditedVertices({});\n                } catch (error) {\n                    console.error(\"❌ Error fetching zones/vertices:\", error);\n                    setFetchError(error.message);\n                }\n            };\n            fetchZonesAndVertices();\n        }\n    }, [selectedCampus]);\n\n    // Handle zone checkbox toggle\n    const handleZoneToggle = (zoneId) => {\n        setCheckedZones((prev) =>\n            prev.includes(zoneId) ? prev.filter((id) => id !== zoneId) : [...prev, zoneId]\n        );\n    };\n\n    // Render zones recursively\n    const renderZones = (zones, depth = 0) => {\n        return zones.map((zone) => (\n            <div key={zone.zone_id} style={{ marginLeft: `${depth * 20}px` }}>\n                <input\n                    type=\"checkbox\"\n                    checked={checkedZones.includes(zone.zone_id)}\n                    onChange={() => handleZoneToggle(zone.zone_id)}\n                />\n                <span>{zone.zone_name}</span>\n                {zone.children && zone.children.length > 0 && renderZones(zone.children, depth + 1)}\n            </div>\n        ));\n    };\n\n    // Handle vertex edit\n    const handleVertexChange = (vertexId, field, value) => {\n        const numValue = parseFloat(value) || 0;\n        setEditedVertices((prev) => ({\n            ...prev,\n            [vertexId]: { ...prev[vertexId], [field]: numValue },\n        }));\n    };\n\n    // Save edited vertices\n    const saveVertices = async () => {\n        const updates = Object.entries(editedVertices).map(([vertexId, changes]) => {\n            const vertex = vertices.find((v) => v.vertex_id === parseInt(vertexId));\n            return { vertex_id: vertex.vertex_id, x: changes.x ?? vertex.x, y: changes.y ?? vertex.y, z: changes.z ?? vertex.z };\n        });\n        if (updates.length === 0) return;\n\n        try {\n            const response = await fetch(\"/zoneviewer/update_vertices\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(updates),\n            });\n            if (!response.ok) throw new Error(`Failed to save: ${response.status}`);\n            const result = await response.json();\n            console.log(\"✅ Vertices saved:\", result);\n            setVertices((prev) =>\n                prev.map((v) => {\n                    const update = updates.find((u) => u.vertex_id === v.vertex_id);\n                    return update ? { ...v, ...update } : v;\n                })\n            );\n            setEditedVertices({});\n            alert(\"Vertices updated successfully!\");\n        } catch (error) {\n            console.error(\"❌ Error saving vertices:\", error);\n            alert(\"Failed to save vertices.\");\n        }\n    };\n\n    return (\n        <div>\n            <h2>Zone Viewer & Editor</h2>\n            {fetchError && <div style={{ color: \"red\" }}>{fetchError}</div>}\n\n            <label>Select Campus:</label>\n            <select onChange={(e) => setSelectedCampus(parseInt(e.target.value))} value={selectedCampus || \"\"}>\n                <option value=\"\">Select a Campus</option>\n                {campuses.map((campus) => (\n                    <option key={campus.zone_id} value={campus.zone_id}>\n                        {campus.zone_name}\n                    </option>\n                ))}\n            </select>\n\n            <label>Render with Leaflet:</label>\n            <input type=\"checkbox\" checked={useLeaflet} onChange={(e) => setUseLeaflet(e.target.checked)} />\n\n            {selectedCampus && (\n                <>\n                    <h3>Zones:</h3>\n                    <div>{renderZones(zones)}</div>\n\n                    <MapZoneViewer\n                        mapId={zones[0]?.map_id}\n                        zones={zones}\n                        checkedZones={checkedZones}\n                        vertices={vertices}\n                        useLeaflet={useLeaflet}\n                    />\n\n                    <h3>Edit Vertices:</h3>\n                    <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n                        <thead>\n                            <tr>\n                                <th>Vertex #</th>\n                                <th>X</th>\n                                <th>Y</th>\n                                <th>Z</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {vertices\n                                .filter((v) => checkedZones.includes(v.zone_id))\n                                .map((v) => (\n                                    <tr key={v.vertex_id}>\n                                        <td>{v.vertex_id}</td>\n                                        <td>\n                                            <input\n                                                type=\"number\"\n                                                value={editedVertices[v.vertex_id]?.x ?? v.x}\n                                                onChange={(e) => handleVertexChange(v.vertex_id, \"x\", e.target.value)}\n                                                step=\"0.000001\"\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"number\"\n                                                value={editedVertices[v.vertex_id]?.y ?? v.y}\n                                                onChange={(e) => handleVertexChange(v.vertex_id, \"y\", e.target.value)}\n                                                step=\"0.000001\"\n                                            />\n                                        </td>\n                                        <td>\n                                            <input\n                                                type=\"number\"\n                                                value={editedVertices[v.vertex_id]?.z ?? v.z}\n                                                onChange={(e) => handleVertexChange(v.vertex_id, \"z\", e.target.value)}\n                                                step=\"0.000001\"\n                                            />\n                                        </td>\n                                    </tr>\n                                ))}\n                        </tbody>\n                    </table>\n                    <button onClick={saveVertices} style={{ marginTop: \"10px\" }}>Save All Changes</button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default ZoneViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}