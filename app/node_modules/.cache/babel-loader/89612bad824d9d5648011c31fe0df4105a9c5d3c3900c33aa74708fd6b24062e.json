{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport CreateTrigger from \"./components/CreateTrigger\";\nimport \"./TriggerDemo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TriggerDemo = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"Red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [zoneTypes, setZoneTypes] = useState([]);\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedZoneLevel, setSelectedZoneLevel] = useState(\"\");\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    zoneTypes: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false\n  });\n\n  // Fetch initial data with enhanced error handling\n  useEffect(() => {\n    const fetchData = async (url, setter, key, transform = data => data) => {\n      setLoading(prev => ({\n        ...prev,\n        [key]: true\n      }));\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          const text = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n        }\n        const data = await response.json();\n        console.log(`${key} data:`, data);\n        setter(transform(data));\n      } catch (error) {\n        console.error(`Error fetching ${key}:`, error);\n      } finally {\n        setLoading(prev => ({\n          ...prev,\n          [key]: false\n        }));\n      }\n    };\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_zone_types\", setZoneTypes, \"zoneTypes\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", data => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Update zones when a map is selected\n  useEffect(() => {\n    if (selectedMap) {\n      const zoneId = selectedMap.i_zn || selectedMap.i_map;\n      fetchData(`/maps/get_campus_zones/${zoneId}`, setZones, \"zones\", data => data.zones || []);\n    }\n  }, [selectedMap]);\n\n  // Helper to fetch data with loading state\n  const fetchData = async (url, setter, key, transform = data => data) => {\n    setLoading(prev => ({\n      ...prev,\n      [key]: true\n    }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [key]: false\n      }));\n    }\n  };\n\n  // Handle trigger creation\n  const handleCreateTrigger = async () => {\n    if (!triggerName || !selectedZone || !selectedMap || !selectedZoneLevel) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Map, Zone Level).\");\n      return;\n    }\n    const triggerData = {\n      name: triggerName,\n      direction: triggerDirection,\n      zone_id: parseInt(selectedZone),\n      // Ensure zone_id is a number\n      top_elevation: topElevation,\n      bottom_elevation: bottomElevation,\n      color: triggerColor,\n      zone_level: selectedZoneLevel,\n      parent_zone_id: selectedParentZone ? parseInt(selectedParentZone) : null,\n      coordinates: coordinates ? JSON.parse(coordinates).map(coord => ({\n        n_x: coord[0],\n        n_y: coord[1],\n        n_z: 0\n      })) : null\n    };\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(triggerData)\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  };\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\")).map(cb => parseInt(cb.value)).filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n    setLoading(prev => ({\n      ...prev,\n      vertices: true\n    }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId => fetch(`/api/get_zone_vertices/${zoneId}`).then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      }).then(data => data.vertices || []));\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({\n        ...acc,\n        [v.vertex_id]: v\n      }), {}));\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        vertices: false\n      }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: {\n        ...prev[vertexId],\n        [field]: parseFloat(value)\n      }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.vertex_id,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          vertices: updatedVertices\n        })\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", data => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map(direction => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: direction.x_dir,\n      children: direction.x_dir\n    }, direction.i_dir, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this));\n  }, [triggerDirections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ParcoRTLS Trigger Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"mapAndTrigger\",\n      id: \"trigger-demo-tabs\",\n      children: /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"mapAndTrigger\",\n        title: \"Map & Trigger\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trigger-map-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trigger-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Trigger Name\",\n              value: triggerName,\n              onChange: e => setTriggerName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedZoneLevel,\n              onChange: e => setSelectedZoneLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Zone Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), loading.zoneTypes ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this) : zoneTypes.map(zt => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: zt.zone_level,\n                \"data-zone-level\": zt.zone_level,\n                children: zt.zone_name\n              }, zt.zone_level, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedMap ? selectedMap.i_map : \"\",\n              onChange: e => {\n                const map = maps.find(m => m.i_map === parseInt(e.target.value));\n                setSelectedMap(map);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Map\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this), loading.maps ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this) : maps.map(map => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: map.i_map,\n                children: map.x_nm_map\n              }, map.i_map, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedParentZone,\n              onChange: e => setSelectedParentZone(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"None\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this), loading.parentZones ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this) : parentZones.map(pz => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pz.zone_id,\n                children: pz.name\n              }, pz.zone_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerDirection,\n              onChange: e => setTriggerDirection(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Direction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this), loading.triggerDirections ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 19\n              }, this) : directionOptions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Top Elevation\",\n              value: topElevation,\n              onChange: e => setTopElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Bottom Elevation\",\n              value: bottomElevation,\n              onChange: e => setBottomElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerColor,\n              onChange: e => setTriggerColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Red\",\n                children: \"Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Blue\",\n                children: \"Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Green\",\n                children: \"Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCreateTrigger,\n              children: \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Select a Zone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"zoneList\",\n              children: loading.zones ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Loading zones...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 19\n              }, this) : zones.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No zones available for this map.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 19\n              }, this) : zones.map(zone => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  value: zone.zone_id,\n                  checked: selectedZone === zone.zone_id.toString(),\n                  onChange: e => setSelectedZone(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: zone.zone_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 23\n                }, this)]\n              }, zone.zone_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), selectedMap && /*#__PURE__*/_jsxDEV(Map, {\n              zoneId: selectedZone ? parseInt(selectedZone) : selectedMap.i_map,\n              onDrawComplete: coords => setCoordinates(coords)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edit Trigger Vertices\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"vertexTable\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Vertex #\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"X Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Y Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Z Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.values(editedVertices).map((v, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: i + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.x || 0,\n                    onChange: e => handleVertexChange(v.vertex_id, \"x\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.y || 0,\n                    onChange: e => handleVertexChange(v.vertex_id, \"y\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.z || 0,\n                    onChange: e => handleVertexChange(v.vertex_id, \"z\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 332,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 21\n                }, this)]\n              }, v.vertex_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loadVerticesForSelectedZones,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveAllVertices,\n            children: \"Save All Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(TriggerDemo, \"6x35h8bUmOEDLBGdqD/n+dKcXWI=\");\n_c = TriggerDemo;\nexport default TriggerDemo;\nvar _c;\n$RefreshReg$(_c, \"TriggerDemo\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Tabs","Tab","Map","CreateTrigger","jsxDEV","_jsxDEV","TriggerDemo","_s","maps","setMaps","zones","setZones","triggerDirections","setTriggerDirections","selectedMap","setSelectedMap","selectedZone","setSelectedZone","triggerName","setTriggerName","triggerDirection","setTriggerDirection","topElevation","setTopElevation","bottomElevation","setBottomElevation","triggerColor","setTriggerColor","eventList","setEventList","coordinates","setCoordinates","zoneTypes","setZoneTypes","parentZones","setParentZones","selectedZoneLevel","setSelectedZoneLevel","selectedParentZone","setSelectedParentZone","vertices","setVertices","editedVertices","setEditedVertices","loading","setLoading","fetchData","url","setter","key","transform","data","prev","response","fetch","ok","text","Error","status","json","console","log","error","zoneId","i_zn","i_map","handleCreateTrigger","alert","triggerData","name","direction","zone_id","parseInt","top_elevation","bottom_elevation","color","zone_level","parent_zone_id","JSON","parse","map","coord","n_x","n_y","n_z","method","headers","body","stringify","result","trigger_id","message","loadVerticesForSelectedZones","checkedZones","Array","from","document","querySelectorAll","cb","value","filter","id","isNaN","length","vertexPromises","then","allVertices","Promise","all","flat","reduce","acc","v","vertex_id","handleVertexChange","vertexId","field","parseFloat","saveAllVertices","updatedVertices","Object","values","x","y","z","directionOptions","x_dir","children","i_dir","fileName","_jsxFileName","lineNumber","columnNumber","defaultActiveKey","eventKey","title","className","type","placeholder","onChange","e","target","zt","zone_name","find","m","x_nm_map","pz","Number","onClick","zone","checked","toString","onDrawComplete","coords","i","disabled","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport CreateTrigger from \"./components/CreateTrigger\";\nimport \"./TriggerDemo.css\";\n\nconst TriggerDemo = () => {\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"Red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [zoneTypes, setZoneTypes] = useState([]);\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedZoneLevel, setSelectedZoneLevel] = useState(\"\");\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    zoneTypes: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false,\n  });\n\n  // Fetch initial data with enhanced error handling\n  useEffect(() => {\n    const fetchData = async (url, setter, key, transform = (data) => data) => {\n      setLoading((prev) => ({ ...prev, [key]: true }));\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          const text = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n        }\n        const data = await response.json();\n        console.log(`${key} data:`, data);\n        setter(transform(data));\n      } catch (error) {\n        console.error(`Error fetching ${key}:`, error);\n      } finally {\n        setLoading((prev) => ({ ...prev, [key]: false }));\n      }\n    };\n\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_zone_types\", setZoneTypes, \"zoneTypes\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", (data) => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Update zones when a map is selected\n  useEffect(() => {\n    if (selectedMap) {\n      const zoneId = selectedMap.i_zn || selectedMap.i_map;\n      fetchData(`/maps/get_campus_zones/${zoneId}`, setZones, \"zones\", (data) => data.zones || []);\n    }\n  }, [selectedMap]);\n\n  // Helper to fetch data with loading state\n  const fetchData = async (url, setter, key, transform = (data) => data) => {\n    setLoading((prev) => ({ ...prev, [key]: true }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n    } finally {\n      setLoading((prev) => ({ ...prev, [key]: false }));\n    }\n  };\n\n  // Handle trigger creation\n  const handleCreateTrigger = async () => {\n    if (!triggerName || !selectedZone || !selectedMap || !selectedZoneLevel) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Map, Zone Level).\");\n      return;\n    }\n\n    const triggerData = {\n      name: triggerName,\n      direction: triggerDirection,\n      zone_id: parseInt(selectedZone), // Ensure zone_id is a number\n      top_elevation: topElevation,\n      bottom_elevation: bottomElevation,\n      color: triggerColor,\n      zone_level: selectedZoneLevel,\n      parent_zone_id: selectedParentZone ? parseInt(selectedParentZone) : null,\n      coordinates: coordinates ? JSON.parse(coordinates).map(coord => ({ n_x: coord[0], n_y: coord[1], n_z: 0 })) : null,\n    };\n\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(triggerData),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  };\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\"))\n      .map(cb => parseInt(cb.value))\n      .filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n\n    setLoading((prev) => ({ ...prev, vertices: true }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId =>\n        fetch(`/api/get_zone_vertices/${zoneId}`)\n          .then(response => {\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            return response.json();\n          })\n          .then(data => data.vertices || [])\n      );\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({ ...acc, [v.vertex_id]: v }), {}));\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, vertices: false }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: { ...prev[vertexId], [field]: parseFloat(value) }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.vertex_id,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ vertices: updatedVertices }),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", (data) => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map((direction) => (\n      <option key={direction.i_dir} value={direction.x_dir}>\n        {direction.x_dir}\n      </option>\n    ));\n  }, [triggerDirections]);\n\n  return (\n    <div>\n      <h1>ParcoRTLS Trigger Management</h1>\n      <Tabs defaultActiveKey=\"mapAndTrigger\" id=\"trigger-demo-tabs\">\n        <Tab eventKey=\"mapAndTrigger\" title=\"Map & Trigger\">\n          <div className=\"trigger-map-section\">\n            <div className=\"trigger-form\">\n              <h3>Create Trigger</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Trigger Name\"\n                value={triggerName}\n                onChange={(e) => setTriggerName(e.target.value)}\n              />\n              <select value={selectedZoneLevel} onChange={(e) => setSelectedZoneLevel(e.target.value)}>\n                <option value=\"\">Select Zone Level</option>\n                {loading.zoneTypes ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  zoneTypes.map((zt) => (\n                    <option key={zt.zone_level} value={zt.zone_level} data-zone-level={zt.zone_level}>\n                      {zt.zone_name}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={selectedMap ? selectedMap.i_map : \"\"} onChange={(e) => {\n                const map = maps.find(m => m.i_map === parseInt(e.target.value));\n                setSelectedMap(map);\n              }}>\n                <option value=\"\">Select Map</option>\n                {loading.maps ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  maps.map((map) => (\n                    <option key={map.i_map} value={map.i_map}>\n                      {map.x_nm_map}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={selectedParentZone} onChange={(e) => setSelectedParentZone(e.target.value)}>\n                <option value=\"\">None</option>\n                {loading.parentZones ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  parentZones.map((pz) => (\n                    <option key={pz.zone_id} value={pz.zone_id}>{pz.name}</option>\n                  ))\n                )}\n              </select>\n              <select value={triggerDirection} onChange={(e) => setTriggerDirection(e.target.value)}>\n                <option value=\"\">Select Direction</option>\n                {loading.triggerDirections ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  directionOptions\n                )}\n              </select>\n              <input\n                type=\"number\"\n                placeholder=\"Top Elevation\"\n                value={topElevation}\n                onChange={(e) => setTopElevation(Number(e.target.value))}\n              />\n              <input\n                type=\"number\"\n                placeholder=\"Bottom Elevation\"\n                value={bottomElevation}\n                onChange={(e) => setBottomElevation(Number(e.target.value))}\n              />\n              <select value={triggerColor} onChange={(e) => setTriggerColor(e.target.value)}>\n                <option value=\"Red\">Red</option>\n                <option value=\"Blue\">Blue</option>\n                <option value=\"Green\">Green</option>\n              </select>\n              <button onClick={handleCreateTrigger}>Create Trigger</button>\n            </div>\n            <div className=\"map-selection\">\n              <h3>Select a Zone</h3>\n              <div id=\"zoneList\">\n                {loading.zones ? (\n                  <p>Loading zones...</p>\n                ) : zones.length === 0 ? (\n                  <p>No zones available for this map.</p>\n                ) : (\n                  zones.map((zone) => (\n                    <div key={zone.zone_id}>\n                      <input\n                        type=\"checkbox\"\n                        value={zone.zone_id}\n                        checked={selectedZone === zone.zone_id.toString()}\n                        onChange={(e) => setSelectedZone(e.target.value)}\n                      />\n                      <span>{zone.zone_name}</span>\n                    </div>\n                  ))\n                )}\n              </div>\n              {selectedMap && (\n                <Map\n                  zoneId={selectedZone ? parseInt(selectedZone) : selectedMap.i_map}\n                  onDrawComplete={(coords) => setCoordinates(coords)}\n                />\n              )}\n            </div>\n            <h3>Edit Trigger Vertices</h3>\n            <table id=\"vertexTable\">\n              <thead>\n                <tr>\n                  <th>Vertex #</th>\n                  <th>X Coordinate</th>\n                  <th>Y Coordinate</th>\n                  <th>Z Coordinate</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.values(editedVertices).map((v, i) => (\n                  <tr key={v.vertex_id}>\n                    <td>{i + 1}</td>\n                    <td><input type=\"number\" value={v.x || 0} onChange={(e) => handleVertexChange(v.vertex_id, \"x\", e.target.value)} /></td>\n                    <td><input type=\"number\" value={v.y || 0} onChange={(e) => handleVertexChange(v.vertex_id, \"y\", e.target.value)} /></td>\n                    <td><input type=\"number\" value={v.z || 0} onChange={(e) => handleVertexChange(v.vertex_id, \"z\", e.target.value)} /></td>\n                    <td><button>Save</button></td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button onClick={loadVerticesForSelectedZones} disabled={loading.vertices}>\n              {loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"}\n            </button>\n            <button onClick={saveAllVertices}>Save All Changes</button>\n          </div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TriggerDemo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}