{"ast":null,"code":"// Version: 250227 campusMapLoader.js Version 0P.6B.48t ðŸš€\nconsole.log(\"[INFO] Loaded campusMapLoader.js Version 0P.6B.48t ðŸš€\");\n\n// Declare mapImage and vertexData globally\nlet mapImage;\nlet vertexData; // Store vertex data globally\nlet mapMetadata; // Store map metadata globally for scaling\n\nwindow.drawVertices = drawVertices; // Expose drawVertices globally for checkbox toggle\n\n// Define renderZones globally to fix scoping issue\nfunction renderZones(zones, depth = 0) {\n  const zoneList = document.getElementById(\"zoneList\");\n  if (!zoneList) {\n    console.error(`[ERROR] #zoneList not found (Version 0P.6B.48t).`);\n    return;\n  }\n  (zones.zones || zones).forEach(zone => {\n    if (zone.zone_id && zone.zone_name) {\n      // Ensure zone data exists\n      const div = document.createElement(\"div\");\n      div.style.marginLeft = `${depth * 20}px`;\n      const checkbox = document.createElement(\"input\");\n      checkbox.type = \"checkbox\";\n      checkbox.checked = true;\n      checkbox.dataset.zoneId = zone.zone_id;\n      checkbox.addEventListener(\"change\", () => {\n        console.log(`[INFO] Checkbox toggled for zone ${zone.zone_name} (Version 0P.6B.48t):`, checkbox.checked);\n        drawVertices();\n      });\n      div.appendChild(checkbox);\n      const label = document.createElement(\"span\");\n      label.textContent = ` ${zone.zone_name}`;\n      div.appendChild(label);\n      zoneList.appendChild(div);\n      if (zone.children && Array.isArray(zone.children)) {\n        renderZones(zone.children, depth + 1);\n      }\n    } else {\n      console.warn(`[WARN] Invalid zone data skipped:`, zone);\n    }\n  });\n}\n\n// Define drawVertices globally\nfunction drawVertices() {\n  const canvas = document.getElementById(\"zoneCanvas\");\n  if (!canvas) {\n    console.error(`[ERROR] Canvas not found (Version 0P.6B.48t).`);\n    return;\n  }\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    console.error(`[ERROR] Canvas context not available (Version 0P.6B.48t).`);\n    return;\n  }\n  if (!mapImage || !mapMetadata || !vertexData) {\n    console.warn(`[WARN] Missing required data - mapImage: ${!!mapImage}, mapMetadata: ${!!mapMetadata}, vertexData: ${!!vertexData}`);\n    return;\n  }\n  const showVerticesCheckbox = document.getElementById(\"showVertices\");\n  if (!showVerticesCheckbox) {\n    console.error(`[ERROR] Show Vertices checkbox not found (Version 0P.6B.48t).`);\n    return;\n  }\n  const canvasWidth = canvas.width;\n  const canvasHeight = canvas.height;\n  const mapWidth = mapMetadata.max_x - mapMetadata.min_x;\n  const mapHeight = mapMetadata.max_y - mapMetadata.min_y;\n  const scaleX = canvasWidth / mapWidth;\n  const scaleY = canvasHeight / mapHeight;\n  const scale = Math.min(scaleX, scaleY);\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n  if (showVerticesCheckbox.checked) {\n    console.log(`[INFO] Rendering vertices (Version 0P.6B.48t)`);\n    const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked')).map(cb => parseInt(cb.dataset.zoneId)).filter(id => !isNaN(id));\n    console.log(`[DEBUG] Checked zones (Version 0P.6B.48t):`, checkedZones);\n    if (checkedZones.length === 0) {\n      console.warn(`[WARN] No zones checked; skipping vertex rendering (Version 0P.6B.48t).`);\n      return;\n    }\n    checkedZones.forEach(zoneId => {\n      const verticesForZone = vertexData.vertices.filter(v => parseInt(v.zone_id) === zoneId).sort((a, b) => a.order - b.order);\n      console.log(`[DEBUG] Vertices for zone ${zoneId}:`, verticesForZone);\n      verticesForZone.forEach((v, index) => {\n        const scaledX = (v.x - mapMetadata.min_x) * scale;\n        const scaledY = canvasHeight - (v.y - mapMetadata.min_y) * scale;\n        console.log(`[DEBUG] Drawing vertex at (${scaledX}, ${scaledY}) for zone ${zoneId}`);\n        ctx.beginPath();\n        ctx.arc(scaledX, scaledY, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"red\";\n        ctx.fill();\n\n        // Draw vertex number next to the point\n        ctx.font = \"12px Arial\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(index + 1, scaledX + 8, scaledY - 2); // Offset label slightly\n      });\n      for (let i = 0; i < verticesForZone.length; i++) {\n        const v = verticesForZone[i];\n        const nextVertex = verticesForZone[(i + 1) % verticesForZone.length];\n        const scaledX = (v.x - mapMetadata.min_x) * scale;\n        const scaledY = canvasHeight - (v.y - mapMetadata.min_y) * scale;\n        const nextScaledX = (nextVertex.x - mapMetadata.min_x) * scale;\n        const nextScaledY = canvasHeight - (nextVertex.y - mapMetadata.min_y) * scale;\n        ctx.beginPath();\n        ctx.moveTo(scaledX, scaledY);\n        ctx.lineTo(nextScaledX, nextScaledY);\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n    });\n  } else {\n    console.log(`[INFO] Vertices hidden (Show Vertices unchecked)`);\n  }\n}\nfunction loadCampuses() {\n  console.info('Fetching Campuses (Version 0P.6B.48t)...');\n  fetch('/get_campus_zones').then(response => {\n    if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);\n    return response.json();\n  }).then(data => {\n    console.debug('Campus data (Version 0P.6B.48t):', data);\n    const campusDropdown = document.getElementById(\"campusSelect\");\n    campusDropdown.innerHTML = \"<option value=''>Select Campus</option>\";\n\n    // Handle the response as a list of campuses (direct array or hierarchical structure)\n    let campuses = Array.isArray(data) ? data : data.campuses || [];\n    if (!Array.isArray(campuses)) {\n      console.error('Unexpected campus data format (Version 0P.6B.48t):', data);\n      throw new Error('Invalid campus data format');\n    }\n    if (campuses.length === 0) {\n      console.warn(`[WARN] No campuses found in response (Version 0P.6B.48t)`);\n    }\n    campuses.forEach(campus => {\n      // Only process Campus L1 zones (zone_type = 1) for the dropdown, with fallback for missing fields\n      const zoneType = campus.zone_type || (campus.zone_type === 0 ? 0 : null); // Default to null if undefined\n      const mapId = campus.map_id || null;\n      const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n      if (zoneType === 1 && mapId && campusId) {\n        console.debug(`[DEBUG] Adding campus to dropdown: ${campus.name || 'Unnamed'} (map_id: ${mapId}, campus_id: ${campusId})`);\n        const option = document.createElement(\"option\");\n        option.value = mapId;\n        option.textContent = campus.name || `Campus ID ${campusId}`; // Fallback name if missing\n        option.dataset.campusId = String(campusId); // Ensure campus_id is set as a string, then parsed as int\n        campusDropdown.appendChild(option);\n      } else {\n        console.debug(`[DEBUG] Skipping non-CL1 zone or null/invalid data: ${campus.name || 'Unnamed'} (zone_type: ${zoneType}, map_id: ${mapId}, campus_id: ${campusId})`);\n      }\n    });\n    console.info('Campuses loaded successfully (Version 0P.6B.48t).');\n  }).catch(error => {\n    console.error('[ERROR] Fetching campuses failed (Version 0P.6B.48t):', error);\n    alert(\"ðŸš¨ Error fetching campus list.\");\n  });\n}\nfunction processCampus(campus) {\n  console.debug('Processing campus:', campus);\n  if (!campus.map_id) {\n    console.debug(`Skipping campus due to null map_id: ${campus.name || 'Unnamed'} (Version 0P.6B.48t)`);\n    return; // Skip if map_id is null\n  }\n\n  // Recursively process all children for hierarchy in zone list (CL1, BOL2, BL3), but only add CL1 to dropdown\n  const zoneType = campus.zone_type || null;\n  const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n  if (zoneType === 1 && campusId) {\n    // Only add Campus L1 to dropdown, ensure campus_id exists\n    const campusDropdown = document.getElementById(\"campusSelect\");\n    const option = document.createElement(\"option\");\n    option.value = campus.map_id;\n    option.textContent = campus.name || `Campus ID ${campusId}`;\n    option.dataset.campusId = String(campusId); // Ensure campus_id is set as a string, then parsed as int\n    campusDropdown.appendChild(option);\n  }\n\n  // Recursively process all children for hierarchy in zone list\n  if (campus.children && Array.isArray(campus.children)) {\n    campus.children.forEach(child => processCampus(child));\n  }\n  console.info(`Campus loaded successfully: ${campus.name || 'Unnamed'} (map_id: ${campus.map_id}, Version 0P.6B.48t)`);\n}\nfunction loadCampusMap() {\n  const selectedCampus = document.getElementById(\"campusSelect\").value;\n  const campusIdElement = document.getElementById(\"campusSelect\").selectedOptions[0];\n  const campusIdStr = campusIdElement ? campusIdElement.dataset.campusId : null;\n  const campusId = campusIdStr ? parseInt(campusIdStr, 10) : null; // Use null if invalid, not NaN\n  if (!selectedCampus || !campusId || isNaN(campusId)) {\n    console.error(`[ERROR] Invalid campus selection: selectedCampus=${selectedCampus}, campusId=${campusId} (Version 0P.6B.48t)`);\n    alert(\"ðŸš¨ Please select a valid campus.\");\n    return;\n  }\n  console.log(`[INFO] Loading map for Campus map_id ${selectedCampus} (campus_id: ${campusId}, Version 0P.6B.48t)...`);\n  const canvas = document.getElementById(\"zoneCanvas\");\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Add \"Select Zones & Vertices\" and \"Show Vertices\" checkbox immediately\n  const zoneList = document.getElementById(\"zoneList\");\n  if (!zoneList) {\n    console.error(`[ERROR] #zoneList not found (Version 0P.6B.48t).`);\n    return;\n  }\n  zoneList.innerHTML = \"\"; // Clear zone list first\n  if (!document.getElementById(\"showVertices\")) {\n    const vertexToggle = document.createElement(\"div\");\n    vertexToggle.innerHTML = `<input type=\"checkbox\" id=\"showVertices\" checked> Show Vertices`;\n    zoneList.prepend(vertexToggle);\n    document.getElementById(\"showVertices\").addEventListener(\"change\", () => {\n      console.log(`[INFO] Show Vertices toggled: ${document.getElementById(\"showVertices\").checked} (Version 0P.6B.48t)`);\n      drawVertices();\n    });\n  }\n\n  // Fetch and display the map from zonebuilder_api.py on port 5002\n  fetch(`http://192.168.210.231:5002/get_map/${selectedCampus}`).then(response => {\n    console.log(`[DEBUG] Map fetch response for /get_map/${selectedCampus} (Version 0P.6B.48t):`, response);\n    if (!response.ok) throw new Error(`Map fetch failed: ${response.status}`);\n    return response.blob();\n  }).then(blob => {\n    console.log(`[DEBUG] Map blob received (Version 0P.6B.48t):`, blob);\n    mapImage = new Image();\n    mapImage.crossOrigin = \"Anonymous\";\n    mapImage.onload = () => {\n      fetch(`http://192.168.210.231:5002/get_map_metadata/${selectedCampus}`).then(metaResponse => {\n        console.log(`[DEBUG] Map metadata fetch response for /get_map_metadata/${selectedCampus} (Version 0P.6B.48t):`, metaResponse);\n        if (!metaResponse.ok) throw new Error(`Metadata fetch failed: ${metaResponse.status}`);\n        return metaResponse.json();\n      }).then(metadata => {\n        console.log(`[DEBUG] Map metadata (Version 0P.6B.48t):`, metadata);\n        mapMetadata = metadata;\n        if (metadata.min_x && metadata.max_x && metadata.min_y && metadata.max_y) {\n          const mapWidth = metadata.max_x - metadata.min_x;\n          const mapHeight = metadata.max_y - metadata.min_y;\n          const canvasWidth = canvas.width;\n          const canvasHeight = canvas.height;\n          const scaleX = canvasWidth / mapWidth;\n          const scaleY = canvasHeight / mapHeight;\n          const scale = Math.min(scaleX, scaleY);\n          ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n          ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n        } else {\n          ctx.drawImage(mapImage, 0, 0, canvas.width, canvas.height);\n        }\n        if (vertexData) drawVertices(); // Only call if vertices are loaded\n      }).catch(metaError => console.error(`[ERROR] Fetching map metadata failed (Version 0P.6B.48t):`, metaError));\n      console.log(`[DEBUG] Map drawn on canvas (Version 0P.6B.48t).`);\n    };\n    mapImage.src = URL.createObjectURL(blob);\n  }).catch(error => console.error(`[ERROR] Loading map failed (Version 0P.6B.48t):`, error));\n\n  // Fetch and display all zones recursively with event listeners from zonebuilder_api.py on port 5002\n  fetch(`http://192.168.210.231:5002/get_all_zones_for_campus/${campusId}`).then(response => {\n    console.log(`[DEBUG] Zones fetch response for /get_all_zones_for_campus/${campusId} (Version 0P.6B.48t):`, response);\n    if (!response.ok) {\n      console.error(`[ERROR] Zones fetch failed: ${response.status} - ${response.statusText}`);\n      throw new Error(`Zones fetch failed: ${response.status}`);\n    }\n    return response.json();\n  }).then(data => {\n    console.log(`[DEBUG] Zones data (Version 0P.6B.48t):`, data);\n    renderZones(data); // Use global renderZones function\n    console.log(`[INFO] Zones loaded successfully (Version 0P.6B.48t).`);\n    if (mapImage && mapMetadata && vertexData) drawVertices(); // Render if all data is ready\n  }).catch(error => {\n    console.error(`[ERROR] Loading zones failed (Version 0P.6B.48t):`, error);\n    if (error.message.includes('404')) {\n      console.warn(`[WARN] Zones not found for campus ${campusId}, defaulting to empty list`);\n      renderZones([]); // Use global renderZones for empty list\n    }\n  });\n\n  // Fetch and display vertices from zonebuilder_api.py on port 5002\n  fetch(`http://192.168.210.231:5002/get_vertices_for_campus/${campusId}`).then(response => {\n    console.log(`[DEBUG] Vertices fetch response for /get_vertices_for_campus/${campusId} (Version 0P.6B.48t):`, response);\n    if (!response.ok) {\n      console.error(`[ERROR] Vertices fetch failed: ${response.status} - ${response.statusText}`);\n      throw new Error(`Vertices fetch failed: ${response.status}`);\n    }\n    return response.json();\n  }).then(responseData => {\n    console.log(`[DEBUG] Vertices data (Version 0P.6B.48t):`, responseData);\n    vertexData = responseData;\n    if (mapImage && mapMetadata) drawVertices(); // Render once vertices are loaded\n  }).catch(error => {\n    console.error(`[ERROR] Loading vertices failed (Version 0P.6B.48t):`, error);\n    if (error.message.includes('404')) {\n      console.warn(`[WARN] Vertices not found for campus ${campusId}, defaulting to empty data`);\n      vertexData = {\n        vertices: []\n      }; // Default to empty vertices to avoid breaking UI\n      if (mapImage && mapMetadata) drawVertices(); // Render empty vertices\n    }\n  });\n}\n\n// NEW FUNCTION: Load vertices for selected zones and populate the edit table\nfunction loadVerticesForSelectedZones() {\n  const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked')).map(cb => parseInt(cb.dataset.zoneId)).filter(id => !isNaN(id));\n  if (checkedZones.length === 0) {\n    console.warn(`[WARN] No zones selected for vertex loading (Version 0P.6B.48t).`);\n    alert(\"Please select at least one zone to load vertices.\");\n    return;\n  }\n  console.log(`[INFO] Loading vertices for zones:`, checkedZones);\n  const vertexTableBody = document.querySelector(\"#vertexTable tbody\");\n  vertexTableBody.innerHTML = \"\"; // Clear existing rows\n\n  checkedZones.forEach((zoneId, zoneIndex) => {\n    const verticesForZone = vertexData.vertices.filter(v => parseInt(v.zone_id) === zoneId).sort((a, b) => a.order - b.order);\n    verticesForZone.forEach((vertex, index) => {\n      const row = document.createElement(\"tr\");\n      const vertexNum = zoneIndex * 100 + (index + 1); // Unique vertex number across zones (e.g., 101, 102 for zone 1)\n      row.innerHTML = `\n                <td>${vertexNum}</td>\n                <td><input type=\"number\" value=\"${vertex.x}\" data-field=\"x\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.y}\" data-field=\"y\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.z || 0}\" data-field=\"z\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><button disabled>Save</button></td> <!-- Individual save buttons disabled for now -->\n            `;\n      vertexTableBody.appendChild(row);\n    });\n  });\n  drawVertices(); // Refresh the map with current vertex data\n}\n\n// NEW FUNCTION: Save all edited vertices to the backend\nfunction saveAllVertices() {\n  const rows = document.querySelectorAll(\"#vertexTable tbody tr\");\n  const updatedVertices = Array.from(rows).map(row => {\n    const vertexId = row.querySelector('input[data-field=\"x\"]').dataset.vertexId;\n    return {\n      vertex_id: parseInt(vertexId),\n      x: parseFloat(row.querySelector('input[data-field=\"x\"]').value),\n      y: parseFloat(row.querySelector('input[data-field=\"y\"]').value),\n      z: parseFloat(row.querySelector('input[data-field=\"z\"]').value)\n    };\n  });\n  console.log(`[INFO] Saving updated vertices:`, updatedVertices);\n  fetch('http://192.168.210.231:5002/update_vertices', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      vertices: updatedVertices\n    })\n  }).then(response => {\n    if (!response.ok) throw new Error(`Failed to save vertices: ${response.status}`);\n    return response.json();\n  }).then(data => {\n    console.log(`[INFO] Vertices saved successfully:`, data);\n    // Update local vertexData with the new values\n    updatedVertices.forEach(updated => {\n      const vertex = vertexData.vertices.find(v => v.vertex_id === updated.vertex_id);\n      if (vertex) {\n        vertex.x = updated.x;\n        vertex.y = updated.y;\n        vertex.z = updated.z;\n      }\n    });\n    drawVertices(); // Refresh the map with updated vertices\n    alert(\"Vertices updated successfully!\");\n  }).catch(error => {\n    console.error(`[ERROR] Failed to save vertices:`, error);\n    alert(\"Error saving vertices. Check console for details.\");\n  });\n}\n\n// Export all required functions for ES module usage\nexport { loadCampusMap, loadCampuses, loadVerticesForSelectedZones, saveAllVertices, renderZones }; // Export renderZones globally","map":{"version":3,"names":["console","log","mapImage","vertexData","mapMetadata","window","drawVertices","renderZones","zones","depth","zoneList","document","getElementById","error","forEach","zone","zone_id","zone_name","div","createElement","style","marginLeft","checkbox","type","checked","dataset","zoneId","addEventListener","appendChild","label","textContent","children","Array","isArray","warn","canvas","ctx","getContext","showVerticesCheckbox","canvasWidth","width","canvasHeight","height","mapWidth","max_x","min_x","mapHeight","max_y","min_y","scaleX","scaleY","scale","Math","min","clearRect","drawImage","checkedZones","from","querySelectorAll","map","cb","parseInt","filter","id","isNaN","length","verticesForZone","vertices","v","sort","a","b","order","index","scaledX","x","scaledY","y","beginPath","arc","PI","fillStyle","fill","font","fillText","i","nextVertex","nextScaledX","nextScaledY","moveTo","lineTo","strokeStyle","lineWidth","stroke","loadCampuses","info","fetch","then","response","ok","Error","status","json","data","debug","campusDropdown","innerHTML","campuses","campus","zoneType","zone_type","mapId","map_id","campusId","name","option","value","String","catch","alert","processCampus","child","loadCampusMap","selectedCampus","campusIdElement","selectedOptions","campusIdStr","vertexToggle","prepend","blob","Image","crossOrigin","onload","metaResponse","metadata","metaError","src","URL","createObjectURL","statusText","message","includes","responseData","loadVerticesForSelectedZones","vertexTableBody","querySelector","zoneIndex","vertex","row","vertexNum","vertex_id","z","saveAllVertices","rows","updatedVertices","vertexId","parseFloat","method","headers","body","JSON","stringify","updated","find"],"sources":["/home/parcoadmin/parco_fastapi/app/src/campusMapLoader.js"],"sourcesContent":["// Version: 250227 campusMapLoader.js Version 0P.6B.48t ðŸš€\nconsole.log(\"[INFO] Loaded campusMapLoader.js Version 0P.6B.48t ðŸš€\");\n\n// Declare mapImage and vertexData globally\nlet mapImage;\nlet vertexData; // Store vertex data globally\nlet mapMetadata; // Store map metadata globally for scaling\n\nwindow.drawVertices = drawVertices; // Expose drawVertices globally for checkbox toggle\n\n// Define renderZones globally to fix scoping issue\nfunction renderZones(zones, depth = 0) {\n    const zoneList = document.getElementById(\"zoneList\");\n    if (!zoneList) {\n        console.error(`[ERROR] #zoneList not found (Version 0P.6B.48t).`);\n        return;\n    }\n\n    (zones.zones || zones).forEach(zone => {\n        if (zone.zone_id && zone.zone_name) {  // Ensure zone data exists\n            const div = document.createElement(\"div\");\n            div.style.marginLeft = `${depth * 20}px`;\n            const checkbox = document.createElement(\"input\");\n            checkbox.type = \"checkbox\";\n            checkbox.checked = true;\n            checkbox.dataset.zoneId = zone.zone_id;\n            checkbox.addEventListener(\"change\", () => {\n                console.log(`[INFO] Checkbox toggled for zone ${zone.zone_name} (Version 0P.6B.48t):`, checkbox.checked);\n                drawVertices();\n            });\n            div.appendChild(checkbox);\n            const label = document.createElement(\"span\");\n            label.textContent = ` ${zone.zone_name}`;\n            div.appendChild(label);\n            zoneList.appendChild(div);\n            if (zone.children && Array.isArray(zone.children)) {\n                renderZones(zone.children, depth + 1);\n            }\n        } else {\n            console.warn(`[WARN] Invalid zone data skipped:`, zone);\n        }\n    });\n}\n\n// Define drawVertices globally\nfunction drawVertices() {\n    const canvas = document.getElementById(\"zoneCanvas\");\n    if (!canvas) {\n        console.error(`[ERROR] Canvas not found (Version 0P.6B.48t).`);\n        return;\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        console.error(`[ERROR] Canvas context not available (Version 0P.6B.48t).`);\n        return;\n    }\n\n    if (!mapImage || !mapMetadata || !vertexData) {\n        console.warn(`[WARN] Missing required data - mapImage: ${!!mapImage}, mapMetadata: ${!!mapMetadata}, vertexData: ${!!vertexData}`);\n        return;\n    }\n\n    const showVerticesCheckbox = document.getElementById(\"showVertices\");\n    if (!showVerticesCheckbox) {\n        console.error(`[ERROR] Show Vertices checkbox not found (Version 0P.6B.48t).`);\n        return;\n    }\n\n    const canvasWidth = canvas.width;\n    const canvasHeight = canvas.height;\n    const mapWidth = mapMetadata.max_x - mapMetadata.min_x;\n    const mapHeight = mapMetadata.max_y - mapMetadata.min_y;\n    const scaleX = canvasWidth / mapWidth;\n    const scaleY = canvasHeight / mapHeight;\n    const scale = Math.min(scaleX, scaleY);\n\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n\n    if (showVerticesCheckbox.checked) {\n        console.log(`[INFO] Rendering vertices (Version 0P.6B.48t)`);\n        const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked'))\n            .map(cb => parseInt(cb.dataset.zoneId))\n            .filter(id => !isNaN(id));\n        console.log(`[DEBUG] Checked zones (Version 0P.6B.48t):`, checkedZones);\n\n        if (checkedZones.length === 0) {\n            console.warn(`[WARN] No zones checked; skipping vertex rendering (Version 0P.6B.48t).`);\n            return;\n        }\n\n        checkedZones.forEach(zoneId => {\n            const verticesForZone = vertexData.vertices\n                .filter(v => parseInt(v.zone_id) === zoneId)\n                .sort((a, b) => a.order - b.order);\n            console.log(`[DEBUG] Vertices for zone ${zoneId}:`, verticesForZone);\n\n            verticesForZone.forEach((v, index) => {\n                const scaledX = (v.x - mapMetadata.min_x) * scale;\n                const scaledY = canvasHeight - ((v.y - mapMetadata.min_y) * scale);\n                console.log(`[DEBUG] Drawing vertex at (${scaledX}, ${scaledY}) for zone ${zoneId}`);\n\n                ctx.beginPath();\n                ctx.arc(scaledX, scaledY, 5, 0, 2 * Math.PI);\n                ctx.fillStyle = \"red\";\n                ctx.fill();\n\n                // Draw vertex number next to the point\n                ctx.font = \"12px Arial\";\n                ctx.fillStyle = \"black\";\n                ctx.fillText(index + 1, scaledX + 8, scaledY - 2); // Offset label slightly\n            });\n\n            for (let i = 0; i < verticesForZone.length; i++) {\n                const v = verticesForZone[i];\n                const nextVertex = verticesForZone[(i + 1) % verticesForZone.length];\n                const scaledX = (v.x - mapMetadata.min_x) * scale;\n                const scaledY = canvasHeight - ((v.y - mapMetadata.min_y) * scale);\n                const nextScaledX = (nextVertex.x - mapMetadata.min_x) * scale;\n                const nextScaledY = canvasHeight - ((nextVertex.y - mapMetadata.min_y) * scale);\n\n                ctx.beginPath();\n                ctx.moveTo(scaledX, scaledY);\n                ctx.lineTo(nextScaledX, nextScaledY);\n                ctx.strokeStyle = \"red\";\n                ctx.lineWidth = 2;\n                ctx.stroke();\n            }\n        });\n    } else {\n        console.log(`[INFO] Vertices hidden (Show Vertices unchecked)`);\n    }\n}\n\nfunction loadCampuses() {\n    console.info('Fetching Campuses (Version 0P.6B.48t)...');\n    fetch('/get_campus_zones')\n        .then(response => {\n            if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);\n            return response.json();\n        })\n        .then(data => {\n            console.debug('Campus data (Version 0P.6B.48t):', data);\n            const campusDropdown = document.getElementById(\"campusSelect\");\n            campusDropdown.innerHTML = \"<option value=''>Select Campus</option>\";\n\n            // Handle the response as a list of campuses (direct array or hierarchical structure)\n            let campuses = Array.isArray(data) ? data : (data.campuses || []);\n            if (!Array.isArray(campuses)) {\n                console.error('Unexpected campus data format (Version 0P.6B.48t):', data);\n                throw new Error('Invalid campus data format');\n            }\n\n            if (campuses.length === 0) {\n                console.warn(`[WARN] No campuses found in response (Version 0P.6B.48t)`);\n            }\n\n            campuses.forEach(campus => {\n                // Only process Campus L1 zones (zone_type = 1) for the dropdown, with fallback for missing fields\n                const zoneType = campus.zone_type || (campus.zone_type === 0 ? 0 : null); // Default to null if undefined\n                const mapId = campus.map_id || null;\n                const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n                if (zoneType === 1 && mapId && campusId) {  \n                    console.debug(`[DEBUG] Adding campus to dropdown: ${campus.name || 'Unnamed'} (map_id: ${mapId}, campus_id: ${campusId})`);\n                    const option = document.createElement(\"option\");\n                    option.value = mapId;\n                    option.textContent = campus.name || `Campus ID ${campusId}`; // Fallback name if missing\n                    option.dataset.campusId = String(campusId);  // Ensure campus_id is set as a string, then parsed as int\n                    campusDropdown.appendChild(option);\n                } else {\n                    console.debug(`[DEBUG] Skipping non-CL1 zone or null/invalid data: ${campus.name || 'Unnamed'} (zone_type: ${zoneType}, map_id: ${mapId}, campus_id: ${campusId})`);\n                }\n            });\n            console.info('Campuses loaded successfully (Version 0P.6B.48t).');\n        })\n        .catch(error => {\n            console.error('[ERROR] Fetching campuses failed (Version 0P.6B.48t):', error);\n            alert(\"ðŸš¨ Error fetching campus list.\");\n        });\n}\n\nfunction processCampus(campus) {\n    console.debug('Processing campus:', campus);\n    if (!campus.map_id) {\n        console.debug(`Skipping campus due to null map_id: ${campus.name || 'Unnamed'} (Version 0P.6B.48t)`);\n        return; // Skip if map_id is null\n    }\n\n    // Recursively process all children for hierarchy in zone list (CL1, BOL2, BL3), but only add CL1 to dropdown\n    const zoneType = campus.zone_type || null;\n    const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n    if (zoneType === 1 && campusId) {  // Only add Campus L1 to dropdown, ensure campus_id exists\n        const campusDropdown = document.getElementById(\"campusSelect\");\n        const option = document.createElement(\"option\");\n        option.value = campus.map_id;\n        option.textContent = campus.name || `Campus ID ${campusId}`;\n        option.dataset.campusId = String(campusId); // Ensure campus_id is set as a string, then parsed as int\n        campusDropdown.appendChild(option);\n    }\n\n    // Recursively process all children for hierarchy in zone list\n    if (campus.children && Array.isArray(campus.children)) {\n        campus.children.forEach(child => processCampus(child));\n    }\n    console.info(`Campus loaded successfully: ${campus.name || 'Unnamed'} (map_id: ${campus.map_id}, Version 0P.6B.48t)`);\n}\n\nfunction loadCampusMap() {\n    const selectedCampus = document.getElementById(\"campusSelect\").value;\n    const campusIdElement = document.getElementById(\"campusSelect\").selectedOptions[0];\n    const campusIdStr = campusIdElement ? campusIdElement.dataset.campusId : null;\n    const campusId = campusIdStr ? parseInt(campusIdStr, 10) : null; // Use null if invalid, not NaN\n    if (!selectedCampus || !campusId || isNaN(campusId)) {\n        console.error(`[ERROR] Invalid campus selection: selectedCampus=${selectedCampus}, campusId=${campusId} (Version 0P.6B.48t)`);\n        alert(\"ðŸš¨ Please select a valid campus.\");\n        return;\n    }\n\n    console.log(`[INFO] Loading map for Campus map_id ${selectedCampus} (campus_id: ${campusId}, Version 0P.6B.48t)...`);\n    const canvas = document.getElementById(\"zoneCanvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Add \"Select Zones & Vertices\" and \"Show Vertices\" checkbox immediately\n    const zoneList = document.getElementById(\"zoneList\");\n    if (!zoneList) {\n        console.error(`[ERROR] #zoneList not found (Version 0P.6B.48t).`);\n        return;\n    }\n    zoneList.innerHTML = \"\"; // Clear zone list first\n    if (!document.getElementById(\"showVertices\")) {\n        const vertexToggle = document.createElement(\"div\");\n        vertexToggle.innerHTML = `<input type=\"checkbox\" id=\"showVertices\" checked> Show Vertices`;\n        zoneList.prepend(vertexToggle);\n        document.getElementById(\"showVertices\").addEventListener(\"change\", () => {\n            console.log(`[INFO] Show Vertices toggled: ${document.getElementById(\"showVertices\").checked} (Version 0P.6B.48t)`);\n            drawVertices();\n        });\n    }\n\n    // Fetch and display the map from zonebuilder_api.py on port 5002\n    fetch(`http://192.168.210.231:5002/get_map/${selectedCampus}`)  \n        .then(response => {\n            console.log(`[DEBUG] Map fetch response for /get_map/${selectedCampus} (Version 0P.6B.48t):`, response);\n            if (!response.ok) throw new Error(`Map fetch failed: ${response.status}`);\n            return response.blob();\n        })\n        .then(blob => {\n            console.log(`[DEBUG] Map blob received (Version 0P.6B.48t):`, blob);\n            mapImage = new Image();\n            mapImage.crossOrigin = \"Anonymous\";\n            mapImage.onload = () => {\n                fetch(`http://192.168.210.231:5002/get_map_metadata/${selectedCampus}`)  \n                    .then(metaResponse => {\n                        console.log(`[DEBUG] Map metadata fetch response for /get_map_metadata/${selectedCampus} (Version 0P.6B.48t):`, metaResponse);\n                        if (!metaResponse.ok) throw new Error(`Metadata fetch failed: ${metaResponse.status}`);\n                        return metaResponse.json();\n                    })\n                    .then(metadata => {\n                        console.log(`[DEBUG] Map metadata (Version 0P.6B.48t):`, metadata);\n                        mapMetadata = metadata;\n                        if (metadata.min_x && metadata.max_x && metadata.min_y && metadata.max_y) {\n                            const mapWidth = metadata.max_x - metadata.min_x;\n                            const mapHeight = metadata.max_y - metadata.min_y;\n                            const canvasWidth = canvas.width;\n                            const canvasHeight = canvas.height;\n                            const scaleX = canvasWidth / mapWidth;\n                            const scaleY = canvasHeight / mapHeight;\n                            const scale = Math.min(scaleX, scaleY);\n                            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                            ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n                        } else {\n                            ctx.drawImage(mapImage, 0, 0, canvas.width, canvas.height);\n                        }\n                        if (vertexData) drawVertices(); // Only call if vertices are loaded\n                    })\n                    .catch(metaError => console.error(`[ERROR] Fetching map metadata failed (Version 0P.6B.48t):`, metaError));\n                console.log(`[DEBUG] Map drawn on canvas (Version 0P.6B.48t).`);\n            };\n            mapImage.src = URL.createObjectURL(blob);\n        })\n        .catch(error => console.error(`[ERROR] Loading map failed (Version 0P.6B.48t):`, error));\n\n    // Fetch and display all zones recursively with event listeners from zonebuilder_api.py on port 5002\n    fetch(`http://192.168.210.231:5002/get_all_zones_for_campus/${campusId}`)  \n        .then(response => {\n            console.log(`[DEBUG] Zones fetch response for /get_all_zones_for_campus/${campusId} (Version 0P.6B.48t):`, response);\n            if (!response.ok) {\n                console.error(`[ERROR] Zones fetch failed: ${response.status} - ${response.statusText}`);\n                throw new Error(`Zones fetch failed: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(`[DEBUG] Zones data (Version 0P.6B.48t):`, data);\n            renderZones(data); // Use global renderZones function\n            console.log(`[INFO] Zones loaded successfully (Version 0P.6B.48t).`);\n            if (mapImage && mapMetadata && vertexData) drawVertices(); // Render if all data is ready\n        })\n        .catch(error => {\n            console.error(`[ERROR] Loading zones failed (Version 0P.6B.48t):`, error);\n            if (error.message.includes('404')) {\n                console.warn(`[WARN] Zones not found for campus ${campusId}, defaulting to empty list`);\n                renderZones([]); // Use global renderZones for empty list\n            }\n        });\n\n    // Fetch and display vertices from zonebuilder_api.py on port 5002\n    fetch(`http://192.168.210.231:5002/get_vertices_for_campus/${campusId}`)  \n        .then(response => {\n            console.log(`[DEBUG] Vertices fetch response for /get_vertices_for_campus/${campusId} (Version 0P.6B.48t):`, response);\n            if (!response.ok) {\n                console.error(`[ERROR] Vertices fetch failed: ${response.status} - ${response.statusText}`);\n                throw new Error(`Vertices fetch failed: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(responseData => {\n            console.log(`[DEBUG] Vertices data (Version 0P.6B.48t):`, responseData);\n            vertexData = responseData;\n            if (mapImage && mapMetadata) drawVertices(); // Render once vertices are loaded\n        })\n        .catch(error => {\n            console.error(`[ERROR] Loading vertices failed (Version 0P.6B.48t):`, error);\n            if (error.message.includes('404')) {\n                console.warn(`[WARN] Vertices not found for campus ${campusId}, defaulting to empty data`);\n                vertexData = { vertices: [] }; // Default to empty vertices to avoid breaking UI\n                if (mapImage && mapMetadata) drawVertices(); // Render empty vertices\n            }\n        });\n}\n\n// NEW FUNCTION: Load vertices for selected zones and populate the edit table\nfunction loadVerticesForSelectedZones() {\n    const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked'))\n        .map(cb => parseInt(cb.dataset.zoneId))\n        .filter(id => !isNaN(id));\n\n    if (checkedZones.length === 0) {\n        console.warn(`[WARN] No zones selected for vertex loading (Version 0P.6B.48t).`);\n        alert(\"Please select at least one zone to load vertices.\");\n        return;\n    }\n\n    console.log(`[INFO] Loading vertices for zones:`, checkedZones);\n    const vertexTableBody = document.querySelector(\"#vertexTable tbody\");\n    vertexTableBody.innerHTML = \"\"; // Clear existing rows\n\n    checkedZones.forEach((zoneId, zoneIndex) => {\n        const verticesForZone = vertexData.vertices\n            .filter(v => parseInt(v.zone_id) === zoneId)\n            .sort((a, b) => a.order - b.order);\n\n        verticesForZone.forEach((vertex, index) => {\n            const row = document.createElement(\"tr\");\n            const vertexNum = zoneIndex * 100 + (index + 1); // Unique vertex number across zones (e.g., 101, 102 for zone 1)\n            row.innerHTML = `\n                <td>${vertexNum}</td>\n                <td><input type=\"number\" value=\"${vertex.x}\" data-field=\"x\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.y}\" data-field=\"y\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.z || 0}\" data-field=\"z\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><button disabled>Save</button></td> <!-- Individual save buttons disabled for now -->\n            `;\n            vertexTableBody.appendChild(row);\n        });\n    });\n\n    drawVertices(); // Refresh the map with current vertex data\n}\n\n// NEW FUNCTION: Save all edited vertices to the backend\nfunction saveAllVertices() {\n    const rows = document.querySelectorAll(\"#vertexTable tbody tr\");\n    const updatedVertices = Array.from(rows).map(row => {\n        const vertexId = row.querySelector('input[data-field=\"x\"]').dataset.vertexId;\n        return {\n            vertex_id: parseInt(vertexId),\n            x: parseFloat(row.querySelector('input[data-field=\"x\"]').value),\n            y: parseFloat(row.querySelector('input[data-field=\"y\"]').value),\n            z: parseFloat(row.querySelector('input[data-field=\"z\"]').value)\n        };\n    });\n\n    console.log(`[INFO] Saving updated vertices:`, updatedVertices);\n\n    fetch('http://192.168.210.231:5002/update_vertices', {  \n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ vertices: updatedVertices })\n    })\n        .then(response => {\n            if (!response.ok) throw new Error(`Failed to save vertices: ${response.status}`);\n            return response.json();\n        })\n        .then(data => {\n            console.log(`[INFO] Vertices saved successfully:`, data);\n            // Update local vertexData with the new values\n            updatedVertices.forEach(updated => {\n                const vertex = vertexData.vertices.find(v => v.vertex_id === updated.vertex_id);\n                if (vertex) {\n                    vertex.x = updated.x;\n                    vertex.y = updated.y;\n                    vertex.z = updated.z;\n                }\n            });\n            drawVertices(); // Refresh the map with updated vertices\n            alert(\"Vertices updated successfully!\");\n        })\n        .catch(error => {\n            console.error(`[ERROR] Failed to save vertices:`, error);\n            alert(\"Error saving vertices. Check console for details.\");\n        });\n}\n\n// Export all required functions for ES module usage\nexport { loadCampusMap, loadCampuses, loadVerticesForSelectedZones, saveAllVertices, renderZones }; // Export renderZones globally"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}