{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/MapZoneViewer.js\",\n  _s = $RefreshSig$();\n// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneViewer.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapZoneViewer = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  mapId,\n  zones,\n  checkedZones,\n  vertices,\n  onVerticesUpdate,\n  useLeaflet\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasBounds = useRef({\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600\n  });\n\n  // Fetch map data\n  useEffect(() => {\n    if (mapId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/zoneviewer/get_map_data/${mapId}`);\n          if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n          const data = await response.json();\n          console.log(\"✅ Fetched map data:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"❌ Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [mapId]);\n\n  // Canvas rendering\n  useEffect(() => {\n    if (!useLeaflet && mapData && canvasRef.current && !isInitialized.current) {\n      console.log(\"🖌 Initializing Canvas rendering with mapData:\", mapData);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return;\n      ctxRef.current = ctx;\n      canvas.width = 800;\n      canvas.height = 600;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        const mapWidth = mapData.bounds[1][1] - mapData.bounds[0][1];\n        const mapHeight = mapData.bounds[1][0] - mapData.bounds[0][0];\n        const mapAspect = mapWidth / mapHeight;\n        const canvasAspect = canvas.width / canvas.height;\n        let drawWidth = canvas.width;\n        let drawHeight = canvas.height;\n        let offsetX = 0;\n        let offsetY = 0;\n        if (mapAspect > canvasAspect) {\n          drawHeight = canvas.width / mapAspect;\n          offsetY = (canvas.height - drawHeight) / 2;\n        } else {\n          drawWidth = canvas.height * mapAspect;\n          offsetX = (canvas.width - drawWidth) / 2;\n        }\n        canvasBounds.current = {\n          x: offsetX,\n          y: offsetY,\n          width: drawWidth,\n          height: drawHeight\n        };\n        drawCanvas();\n      };\n      img.onerror = () => {\n        setError(\"Failed to load map image.\");\n      };\n      const drawCanvas = () => {\n        if (!ctxRef.current || !imageRef.current) return;\n        const ctx = ctxRef.current;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(imageRef.current, canvasBounds.current.x, canvasBounds.current.y, canvasBounds.current.width, canvasBounds.current.height);\n        checkedZones.forEach(zoneId => {\n          const zoneVertices = vertices.filter(v => v.zone_id === zoneId);\n          if (zoneVertices.length > 0) {\n            ctx.beginPath();\n            zoneVertices.forEach((vertex, index) => {\n              const x = canvasBounds.current.x + (vertex.x - mapData.bounds[0][1]) * (canvasBounds.current.width / mapWidth);\n              const y = canvasBounds.current.y + (mapData.bounds[1][0] - vertex.y) * (canvasBounds.current.height / mapHeight);\n              if (index === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n              ctx.fillStyle = \"red\";\n              ctx.fillRect(x - 2, y - 2, 4, 4);\n            });\n            ctx.closePath();\n            ctx.strokeStyle = \"red\";\n            ctx.stroke();\n          }\n        });\n      };\n      isInitialized.current = true;\n      return () => {\n        isInitialized.current = false;\n      };\n    }\n  }, [mapData, useLeaflet, checkedZones, vertices]);\n\n  // Leaflet rendering\n  useEffect(() => {\n    if (useLeaflet && mapData && mapRef.current && !mapInstance.current) {\n      console.log(\"🗺 Initializing Leaflet with mapData:\", mapData);\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple\n      }).fitBounds(mapData.bounds);\n      L.imageOverlay(mapData.imageUrl, mapData.bounds).addTo(mapInstance.current);\n      mapInstance.current.addLayer(drawnItems.current);\n      checkedZones.forEach(zoneId => {\n        const zoneVertices = vertices.filter(v => v.zone_id === zoneId);\n        if (zoneVertices.length > 0) {\n          const latLngs = zoneVertices.map(v => [v.y, v.x]);\n          L.polygon(latLngs, {\n            color: \"red\",\n            weight: 2\n          }).addTo(drawnItems.current);\n        }\n      });\n      return () => {\n        if (mapInstance.current) {\n          mapInstance.current.remove();\n          mapInstance.current = null;\n        }\n      };\n    }\n  }, [mapData, useLeaflet, checkedZones, vertices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 23\n    }, this), useLeaflet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"600px\",\n        width: \"800px\",\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n}, \"QkWKMp/ggu4acsVzEZQAbHMrQDM=\")), \"QkWKMp/ggu4acsVzEZQAbHMrQDM=\");\n_c2 = MapZoneViewer;\nexport default MapZoneViewer;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapZoneViewer$memo\");\n$RefreshReg$(_c2, \"MapZoneViewer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","MapZoneViewer","_s","_c","mapId","zones","checkedZones","vertices","onVerticesUpdate","useLeaflet","mapRef","mapInstance","canvasRef","mapData","setMapData","error","setError","isInitialized","ctxRef","imageRef","drawnItems","FeatureGroup","canvasBounds","x","y","width","height","fetchMapData","response","fetch","ok","Error","status","data","json","console","log","message","current","canvas","ctx","getContext","img","Image","crossOrigin","src","imageUrl","onload","mapWidth","bounds","mapHeight","mapAspect","canvasAspect","drawWidth","drawHeight","offsetX","offsetY","drawCanvas","onerror","clearRect","drawImage","forEach","zoneId","zoneVertices","filter","v","zone_id","length","beginPath","vertex","index","moveTo","lineTo","fillStyle","fillRect","closePath","strokeStyle","stroke","map","crs","CRS","Simple","fitBounds","imageOverlay","addTo","addLayer","latLngs","polygon","color","weight","remove","children","style","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/MapZoneViewer.js"],"sourcesContent":["// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneViewer.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\n\nconst MapZoneViewer = memo(({ mapId, zones, checkedZones, vertices, onVerticesUpdate, useLeaflet }) => {\n    const mapRef = useRef(null);\n    const mapInstance = useRef(null);\n    const canvasRef = useRef(null);\n    const [mapData, setMapData] = useState(null);\n    const [error, setError] = useState(null);\n    const isInitialized = useRef(false);\n    const ctxRef = useRef(null);\n    const imageRef = useRef(null);\n    const drawnItems = useRef(new L.FeatureGroup());\n    const canvasBounds = useRef({ x: 0, y: 0, width: 800, height: 600 });\n\n    // Fetch map data\n    useEffect(() => {\n        if (mapId) {\n            const fetchMapData = async () => {\n                try {\n                    const response = await fetch(`/zoneviewer/get_map_data/${mapId}`);\n                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n                    const data = await response.json();\n                    console.log(\"✅ Fetched map data:\", data);\n                    setMapData(data);\n                    setError(null);\n                } catch (error) {\n                    console.error(\"❌ Error fetching map data:\", error);\n                    setError(`Error fetching map data: ${error.message}`);\n                }\n            };\n            fetchMapData();\n        }\n    }, [mapId]);\n\n    // Canvas rendering\n    useEffect(() => {\n        if (!useLeaflet && mapData && canvasRef.current && !isInitialized.current) {\n            console.log(\"🖌 Initializing Canvas rendering with mapData:\", mapData);\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) return;\n            ctxRef.current = ctx;\n\n            canvas.width = 800;\n            canvas.height = 600;\n\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.src = mapData.imageUrl;\n            imageRef.current = img;\n\n            img.onload = () => {\n                const mapWidth = mapData.bounds[1][1] - mapData.bounds[0][1];\n                const mapHeight = mapData.bounds[1][0] - mapData.bounds[0][0];\n                const mapAspect = mapWidth / mapHeight;\n                const canvasAspect = canvas.width / canvas.height;\n\n                let drawWidth = canvas.width;\n                let drawHeight = canvas.height;\n                let offsetX = 0;\n                let offsetY = 0;\n\n                if (mapAspect > canvasAspect) {\n                    drawHeight = canvas.width / mapAspect;\n                    offsetY = (canvas.height - drawHeight) / 2;\n                } else {\n                    drawWidth = canvas.height * mapAspect;\n                    offsetX = (canvas.width - drawWidth) / 2;\n                }\n\n                canvasBounds.current = { x: offsetX, y: offsetY, width: drawWidth, height: drawHeight };\n                drawCanvas();\n            };\n\n            img.onerror = () => {\n                setError(\"Failed to load map image.\");\n            };\n\n            const drawCanvas = () => {\n                if (!ctxRef.current || !imageRef.current) return;\n                const ctx = ctxRef.current;\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.drawImage(imageRef.current, canvasBounds.current.x, canvasBounds.current.y, canvasBounds.current.width, canvasBounds.current.height);\n\n                checkedZones.forEach(zoneId => {\n                    const zoneVertices = vertices.filter(v => v.zone_id === zoneId);\n                    if (zoneVertices.length > 0) {\n                        ctx.beginPath();\n                        zoneVertices.forEach((vertex, index) => {\n                            const x = canvasBounds.current.x + (vertex.x - mapData.bounds[0][1]) * (canvasBounds.current.width / (mapWidth));\n                            const y = canvasBounds.current.y + (mapData.bounds[1][0] - vertex.y) * (canvasBounds.current.height / (mapHeight));\n                            if (index === 0) ctx.moveTo(x, y);\n                            else ctx.lineTo(x, y);\n                            ctx.fillStyle = \"red\";\n                            ctx.fillRect(x - 2, y - 2, 4, 4);\n                        });\n                        ctx.closePath();\n                        ctx.strokeStyle = \"red\";\n                        ctx.stroke();\n                    }\n                });\n            };\n\n            isInitialized.current = true;\n            return () => {\n                isInitialized.current = false;\n            };\n        }\n    }, [mapData, useLeaflet, checkedZones, vertices]);\n\n    // Leaflet rendering\n    useEffect(() => {\n        if (useLeaflet && mapData && mapRef.current && !mapInstance.current) {\n            console.log(\"🗺 Initializing Leaflet with mapData:\", mapData);\n            mapInstance.current = L.map(mapRef.current, { crs: L.CRS.Simple }).fitBounds(mapData.bounds);\n            L.imageOverlay(mapData.imageUrl, mapData.bounds).addTo(mapInstance.current);\n            mapInstance.current.addLayer(drawnItems.current);\n\n            checkedZones.forEach(zoneId => {\n                const zoneVertices = vertices.filter(v => v.zone_id === zoneId);\n                if (zoneVertices.length > 0) {\n                    const latLngs = zoneVertices.map(v => [v.y, v.x]);\n                    L.polygon(latLngs, { color: \"red\", weight: 2 }).addTo(drawnItems.current);\n                }\n            });\n\n            return () => {\n                if (mapInstance.current) {\n                    mapInstance.current.remove();\n                    mapInstance.current = null;\n                }\n            };\n        }\n    }, [mapData, useLeaflet, checkedZones, vertices]);\n\n    return (\n        <div>\n            {error && <div style={{ color: \"red\" }}>{error}</div>}\n            {useLeaflet ? (\n                <div ref={mapRef} style={{ height: \"600px\", width: \"800px\", border: \"2px solid black\" }} />\n            ) : (\n                <canvas ref={canvasRef} style={{ border: \"2px solid black\" }} />\n            )}\n        </div>\n    );\n});\n\nexport default MapZoneViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}