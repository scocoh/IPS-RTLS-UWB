{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  zoneId,\n  onDrawComplete\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup()); // Persist drawn items\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false); // Flag to prevent multiple initializations\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]); // Added mapData to dependency to prevent refetching\n\n  // Initialize the Leaflet map when mapData is available\n  useEffect(() => {\n    if (mapData && mapRef.current && !isInitialized.current) {\n      try {\n        // Initialize the map with a simple CRS for non-geographic maps\n        mapInstance.current = L.map(mapRef.current, {\n          crs: L.CRS.Simple,\n          minZoom: -5,\n          maxZoom: 5\n        });\n        const bounds = [[mapData.bounds[0][0], mapData.bounds[0][1]],\n        // [yMin, xMin]\n        [mapData.bounds[1][0], mapData.bounds[1][1]] // [yMax, xMax]\n        ];\n        console.log(\"Map bounds:\", bounds);\n\n        // Test image load with timeout\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.src = mapData.imageUrl;\n        const imageLoadTimeout = setTimeout(() => {\n          if (!img.complete) {\n            setError(\"Map image load timed out. Please check the image URL.\");\n            console.error(\"Map image load timed out:\", mapData.imageUrl);\n          }\n        }, 5000); // 5-second timeout\n\n        img.onload = () => {\n          clearTimeout(imageLoadTimeout);\n          console.log(\"Map image loaded successfully:\", mapData.imageUrl);\n          L.imageOverlay(mapData.imageUrl, bounds).addTo(mapInstance.current);\n          mapInstance.current.fitBounds(bounds);\n\n          // Add persistent drawn items layer\n          mapInstance.current.addLayer(drawnItems.current);\n          const drawControl = new L.Control.Draw({\n            edit: {\n              featureGroup: drawnItems.current\n            },\n            draw: {\n              polygon: true,\n              // Single polygon tool\n              rectangle: false,\n              // Disable rectangle\n              polyline: false,\n              circle: false,\n              marker: false,\n              circlemarker: false\n            }\n          });\n          mapInstance.current.addControl(drawControl);\n          mapInstance.current.on(L.Draw.Event.CREATED, event => {\n            const layer = event.layer;\n            drawnItems.current.addLayer(layer);\n            // Transform coordinates to match X-Y order based on bounds\n            const coords = layer.getLatLngs()[0].map(latLng => {\n              const y = bounds[0][0] + (bounds[1][0] - bounds[0][0]) * (latLng.lat / (bounds[1][0] - bounds[0][0]));\n              const x = bounds[0][1] + (bounds[1][1] - bounds[0][1]) * (latLng.lng / (bounds[1][1] - bounds[0][1]));\n              return [x, y]; // Return [x, y] instead of [lat, lng]\n            });\n            console.log(\"Drawn coordinates (X, Y):\", coords);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(coords));\n            }\n          });\n          isInitialized.current = true; // Mark as initialized\n        };\n        img.onerror = () => {\n          clearTimeout(imageLoadTimeout);\n          console.error(\"Failed to load map image:\", mapData.imageUrl);\n          setError(\"Failed to load map image. Please check the server response.\");\n        };\n      } catch (error) {\n        console.error(\"Error initializing map:\", error);\n        setError(`Error initializing map: ${error.message}`);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false; // Reset initialization flag\n      }\n      if (mapData) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData, onDrawComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"500px\",\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"BSuf+09nlLxTNQnBITiiWvzXCF0=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","Map","zoneId","onDrawComplete","_s","mapRef","mapInstance","drawnItems","FeatureGroup","mapData","setMapData","error","setError","isInitialized","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","current","map","crs","CRS","Simple","minZoom","maxZoom","bounds","img","Image","crossOrigin","src","imageUrl","imageLoadTimeout","setTimeout","complete","onload","clearTimeout","imageOverlay","addTo","fitBounds","addLayer","drawControl","Control","Draw","edit","featureGroup","draw","polygon","rectangle","polyline","circle","marker","circlemarker","addControl","on","Event","CREATED","event","layer","coords","getLatLngs","latLng","y","lat","x","lng","JSON","stringify","onerror","remove","children","style","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","height","width","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\n\nconst Map = ({ zoneId, onDrawComplete }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup()); // Persist drawn items\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false); // Flag to prevent multiple initializations\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n\n      fetchMapData();\n    }\n  }, [zoneId, mapData]); // Added mapData to dependency to prevent refetching\n\n  // Initialize the Leaflet map when mapData is available\n  useEffect(() => {\n    if (mapData && mapRef.current && !isInitialized.current) {\n      try {\n        // Initialize the map with a simple CRS for non-geographic maps\n        mapInstance.current = L.map(mapRef.current, {\n          crs: L.CRS.Simple,\n          minZoom: -5,\n          maxZoom: 5,\n        });\n\n        const bounds = [\n          [mapData.bounds[0][0], mapData.bounds[0][1]], // [yMin, xMin]\n          [mapData.bounds[1][0], mapData.bounds[1][1]], // [yMax, xMax]\n        ];\n        console.log(\"Map bounds:\", bounds);\n\n        // Test image load with timeout\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.src = mapData.imageUrl;\n\n        const imageLoadTimeout = setTimeout(() => {\n          if (!img.complete) {\n            setError(\"Map image load timed out. Please check the image URL.\");\n            console.error(\"Map image load timed out:\", mapData.imageUrl);\n          }\n        }, 5000); // 5-second timeout\n\n        img.onload = () => {\n          clearTimeout(imageLoadTimeout);\n          console.log(\"Map image loaded successfully:\", mapData.imageUrl);\n          L.imageOverlay(mapData.imageUrl, bounds).addTo(mapInstance.current);\n          mapInstance.current.fitBounds(bounds);\n\n          // Add persistent drawn items layer\n          mapInstance.current.addLayer(drawnItems.current);\n\n          const drawControl = new L.Control.Draw({\n            edit: {\n              featureGroup: drawnItems.current,\n            },\n            draw: {\n              polygon: true, // Single polygon tool\n              rectangle: false, // Disable rectangle\n              polyline: false,\n              circle: false,\n              marker: false,\n              circlemarker: false,\n            },\n          });\n          mapInstance.current.addControl(drawControl);\n\n          mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n            const layer = event.layer;\n            drawnItems.current.addLayer(layer);\n            // Transform coordinates to match X-Y order based on bounds\n            const coords = layer\n              .getLatLngs()[0]\n              .map((latLng) => {\n                const y = bounds[0][0] + (bounds[1][0] - bounds[0][0]) * (latLng.lat / (bounds[1][0] - bounds[0][0]));\n                const x = bounds[0][1] + (bounds[1][1] - bounds[0][1]) * (latLng.lng / (bounds[1][1] - bounds[0][1]));\n                return [x, y]; // Return [x, y] instead of [lat, lng]\n              });\n            console.log(\"Drawn coordinates (X, Y):\", coords);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(coords));\n            }\n          });\n\n          isInitialized.current = true; // Mark as initialized\n        };\n\n        img.onerror = () => {\n          clearTimeout(imageLoadTimeout);\n          console.error(\"Failed to load map image:\", mapData.imageUrl);\n          setError(\"Failed to load map image. Please check the server response.\");\n        };\n      } catch (error) {\n        console.error(\"Error initializing map:\", error);\n        setError(`Error initializing map: ${error.message}`);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false; // Reset initialization flag\n      }\n      if (mapData) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData, onDrawComplete]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      <div ref={mapRef} style={{ height: \"500px\", width: \"100%\" }} />\n    </div>\n  );\n};\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}