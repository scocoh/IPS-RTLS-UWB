{"ast":null,"code":"import React,{useState,useEffect,useMemo,useCallback}from\"react\";import{Tabs,Tab}from\"react-bootstrap\";import Map from\"./components/Map\";import\"./TriggerDemo.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const TriggerDemo=()=>{const[maps,setMaps]=useState([]);const[zones,setZones]=useState([]);const[triggerDirections,setTriggerDirections]=useState([]);const[selectedZone,setSelectedZone]=useState(null);const[selectedMapId,setSelectedMapId]=useState(null);// Store map_id\nconst[triggerName,setTriggerName]=useState(\"\");const[triggerDirection,setTriggerDirection]=useState(\"\");const[topElevation,setTopElevation]=useState(8);const[bottomElevation,setBottomElevation]=useState(-1);const[triggerColor,setTriggerColor]=useState(\"red\");const[eventList,setEventList]=useState([]);const[coordinates,setCoordinates]=useState(\"\");const[parentZones,setParentZones]=useState([]);const[selectedParentZone,setSelectedParentZone]=useState(\"\");const[vertices,setVertices]=useState([]);const[editedVertices,setEditedVertices]=useState({});const[loading,setLoading]=useState({maps:false,parentZones:false,triggerDirections:false,zones:false,vertices:false});const[error,setError]=useState(null);const[showMapForDrawing,setShowMapForDrawing]=useState(false);const[useLeaflet,setUseLeaflet]=useState(false);// Toggle between Canvas and Leaflet\n// Fetch data helper\nconst fetchData=async function(url,setter,key){let transform=arguments.length>3&&arguments[3]!==undefined?arguments[3]:data=>data;setLoading(prev=>({...prev,[key]:true}));try{const response=await fetch(url);if(!response.ok){const text=await response.text();throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);}const data=await response.json();console.log(`${key} data:`,data);setter(transform(data));setError(null);}catch(error){console.error(`Error fetching ${key}:`,error);setError(`Error fetching ${key}: ${error.message}`);}finally{setLoading(prev=>({...prev,[key]:false}));}};// Fetch initial data\nuseEffect(()=>{fetchData(\"/maps/get_maps\",setMaps,\"maps\");fetchData(\"/api/get_parent_zones\",setParentZones,\"parentZones\",data=>data.zones);fetchData(\"/api/list_trigger_directions\",setTriggerDirections,\"triggerDirections\");},[]);// Flatten zones hierarchy\nconst flattenZones=zones=>{const result=[];const flatten=zone=>{result.push(zone);if(zone.children&&zone.children.length>0){zone.children.forEach(child=>flatten(child));}};zones.forEach(zone=>flatten(zone));return result;};// Update zones and fetch map_id when a parent zone is selected\nuseEffect(()=>{if(selectedParentZone){const zoneId=parseInt(selectedParentZone);fetchData(`/maps/get_campus_zones/${zoneId}`,data=>{const flattenedZones=flattenZones(data.zones||[]);setZones(flattenedZones);},\"zones\");}},[selectedParentZone]);// Fetch map_id when a zone is selected\nuseEffect(()=>{if(selectedZone){fetch(`/maps/get_map_data/${selectedZone}`).then(response=>response.json()).then(data=>{setSelectedMapId(data.map_id||selectedZone);// Fallback to zoneId if map_id not provided\n}).catch(error=>console.error(\"Error fetching map data:\",error));}},[selectedZone]);// Memoized handleCreateTrigger to prevent unnecessary re-renders\nconst handleCreateTrigger=useCallback(async()=>{if(!triggerName||!selectedZone||!triggerDirection){alert(\"Please fill all required fields (Trigger Name, Zone, Direction).\");return;}if(!showMapForDrawing){setShowMapForDrawing(true);return;}console.log(\"Current coordinates before save:\",coordinates);// Debug log\nif(!coordinates){alert(\"Please draw the trigger on the map (click to add points, double-click to finish).\");return;}// Find the direction ID (i_dir) from the selected direction string\nconst selectedDirectionObj=triggerDirections.find(dir=>dir.x_dir===triggerDirection);const directionId=selectedDirectionObj?selectedDirectionObj.i_dir:null;if(!directionId){alert(\"Invalid direction selected.\");return;}const triggerData={name:triggerName,direction:directionId,zone_id:parseInt(selectedZone),ignore:true,coordinates:JSON.parse(coordinates)};console.log(\"Sending triggerData to /api/add_trigger:\",triggerData);try{const response=await fetch(\"/api/add_trigger\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(triggerData)});if(!response.ok){const text=await response.text();throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);}const result=await response.json();alert(`Trigger created with ID: ${result.trigger_id}`);setEventList([...eventList,`${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);setCoordinates(\"\");setShowMapForDrawing(false);}catch(error){console.error(\"Error creating trigger:\",error);alert(`Error creating trigger: ${error.message}`);}},[triggerName,selectedZone,triggerDirection,coordinates,showMapForDrawing,triggerDirections]);// Memoized onDrawComplete to prevent re-renders\nconst handleDrawComplete=useCallback(coords=>{setCoordinates(coords);},[]);// Load vertices for selected zones\nconst loadVerticesForSelectedZones=async()=>{const checkedZones=Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\")).map(cb=>parseInt(cb.value)).filter(id=>!isNaN(id));if(checkedZones.length===0){alert(\"Please select at least one zone to load vertices.\");return;}setLoading(prev=>({...prev,vertices:true}));try{const vertexPromises=checkedZones.map(zoneId=>fetch(`/api/get_zone_vertices/${zoneId}`).then(response=>{if(!response.ok)throw new Error(`HTTP error! status: ${response.status}`);return response.json();}).then(data=>data.vertices||[]));const allVertices=(await Promise.all(vertexPromises)).flat();if(allVertices.length===0){throw new Error(\"No vertices found for selected zones.\");}console.log(\"Loaded vertices:\",allVertices);setVertices(allVertices);setEditedVertices(allVertices.reduce((acc,v)=>({...acc,[v.i_vtx]:v}),{}));}catch(error){console.error(\"Error loading vertices:\",error);alert(`Error loading vertices: ${error.message}`);}finally{setLoading(prev=>({...prev,vertices:false}));}};// Handle vertex changes\nconst handleVertexChange=(vertexId,field,value)=>{setEditedVertices(prev=>({...prev,[vertexId]:{...prev[vertexId],[field]:parseFloat(value)||0}}));};// Save all edited vertices\nconst saveAllVertices=async()=>{const updatedVertices=Object.values(editedVertices).map(v=>({vertex_id:v.i_vtx,x:v.x,y:v.y,z:v.z||0}));if(updatedVertices.length===0){alert(\"No vertices to save.\");return;}console.log(\"Sending vertices to /api/update_vertices:\",updatedVertices);// Debug log\ntry{const response=await fetch(\"/api/update_vertices\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(updatedVertices)// Send list directly\n});if(!response.ok){const text=await response.text();throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);}alert(\"Vertices updated successfully!\");if(selectedZone){fetchData(`/api/get_zone_vertices/${selectedZone}`,setVertices,\"vertices\",data=>data.vertices||[]);}}catch(error){console.error(\"Error saving vertices:\",error);alert(`Error saving vertices: ${error.message}`);}};// Use useMemo to ensure consistent rendering of direction options\nconst directionOptions=useMemo(()=>{return triggerDirections.map(direction=>/*#__PURE__*/_jsx(\"option\",{value:direction.x_dir,children:direction.x_dir},direction.i_dir));},[triggerDirections]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"ParcoRTLS Trigger Management\"}),/*#__PURE__*/_jsx(Tabs,{defaultActiveKey:\"mapAndTrigger\",id:\"trigger-demo-tabs\",children:/*#__PURE__*/_jsx(Tab,{eventKey:\"mapAndTrigger\",title:\"Map & Trigger\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"trigger-map-section\",children:[error&&/*#__PURE__*/_jsx(\"div\",{style:{color:\"red\"},children:error}),/*#__PURE__*/_jsxs(\"div\",{className:\"trigger-form\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Create Trigger\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Trigger Name\",value:triggerName,onChange:e=>setTriggerName(e.target.value)}),/*#__PURE__*/_jsxs(\"select\",{value:selectedParentZone,onChange:e=>setSelectedParentZone(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Parent Zone\"}),loading.parentZones?/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Loading...\"}):parentZones.map(pz=>/*#__PURE__*/_jsx(\"option\",{value:pz.zone_id.toString(),children:pz.name},pz.zone_id))]}),/*#__PURE__*/_jsxs(\"select\",{value:triggerDirection,onChange:e=>setTriggerDirection(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Direction\"}),loading.triggerDirections?/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Loading...\"}):directionOptions]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Top Elevation (Zmax)\",value:topElevation,onChange:e=>setTopElevation(Number(e.target.value))}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Bottom Elevation (Zmin)\",value:bottomElevation,onChange:e=>setBottomElevation(Number(e.target.value))}),/*#__PURE__*/_jsxs(\"select\",{value:triggerColor,onChange:e=>setTriggerColor(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"red\",children:\"Red\"}),/*#__PURE__*/_jsx(\"option\",{value:\"green\",children:\"Green\"}),/*#__PURE__*/_jsx(\"option\",{value:\"blue\",children:\"Blue\"})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Render with Leaflet:\",/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:useLeaflet,onChange:e=>setUseLeaflet(e.target.checked)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateTrigger,children:showMapForDrawing?\"Save Trigger\":\"Create Trigger\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"map-selection\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Select a Zone\"}),/*#__PURE__*/_jsx(\"div\",{id:\"zoneList\",children:loading.zones?/*#__PURE__*/_jsx(\"p\",{children:\"Loading zones...\"}):zones.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"No zones available for this parent zone.\"}):zones.map(zone=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",value:zone.zone_id.toString(),checked:selectedZone===zone.zone_id.toString(),onChange:e=>setSelectedZone(e.target.value)}),/*#__PURE__*/_jsx(\"span\",{children:zone.zone_name})]},zone.zone_id))}),showMapForDrawing&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{style:{color:\"blue\",margin:\"10px 0\"},children:\"Click to add points, double-click to finish the trigger shape.\"}),/*#__PURE__*/_jsx(Map,{zoneId:parseInt(selectedZone),onDrawComplete:handleDrawComplete,triggerColor:triggerColor,useLeaflet:useLeaflet// Pass the toggle state\n},selectedZone)]})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Edit Trigger Vertices\"}),/*#__PURE__*/_jsxs(\"table\",{id:\"vertexTable\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Vertex #\"}),/*#__PURE__*/_jsx(\"th\",{children:\"X Coordinate\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Y Coordinate\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Z Coordinate\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:Object.values(editedVertices).map((v,i)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:i+1}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:v.x||0,onChange:e=>handleVertexChange(v.i_vtx,\"x\",e.target.value)})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:v.y||0,onChange:e=>handleVertexChange(v.i_vtx,\"y\",e.target.value)})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:v.z||0,onChange:e=>handleVertexChange(v.i_vtx,\"z\",e.target.value)})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"button\",{children:\"Save\"})})]},v.i_vtx))})]}),/*#__PURE__*/_jsx(\"button\",{onClick:loadVerticesForSelectedZones,disabled:loading.vertices,children:loading.vertices?\"Loading...\":\"Load Vertices for Selected Zones\"}),/*#__PURE__*/_jsx(\"button\",{onClick:saveAllVertices,disabled:loading.vertices,children:loading.vertices?\"Saving...\":\"Save All Changes\"})]})})})]});};export default TriggerDemo;","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Tabs","Tab","Map","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TriggerDemo","maps","setMaps","zones","setZones","triggerDirections","setTriggerDirections","selectedZone","setSelectedZone","selectedMapId","setSelectedMapId","triggerName","setTriggerName","triggerDirection","setTriggerDirection","topElevation","setTopElevation","bottomElevation","setBottomElevation","triggerColor","setTriggerColor","eventList","setEventList","coordinates","setCoordinates","parentZones","setParentZones","selectedParentZone","setSelectedParentZone","vertices","setVertices","editedVertices","setEditedVertices","loading","setLoading","error","setError","showMapForDrawing","setShowMapForDrawing","useLeaflet","setUseLeaflet","fetchData","url","setter","key","transform","arguments","length","undefined","data","prev","response","fetch","ok","text","Error","status","json","console","log","message","flattenZones","result","flatten","zone","push","children","forEach","child","zoneId","parseInt","flattenedZones","then","map_id","catch","handleCreateTrigger","alert","selectedDirectionObj","find","dir","x_dir","directionId","i_dir","triggerData","name","direction","zone_id","ignore","JSON","parse","method","headers","body","stringify","trigger_id","handleDrawComplete","coords","loadVerticesForSelectedZones","checkedZones","Array","from","document","querySelectorAll","map","cb","value","filter","id","isNaN","vertexPromises","allVertices","Promise","all","flat","reduce","acc","v","i_vtx","handleVertexChange","vertexId","field","parseFloat","saveAllVertices","updatedVertices","Object","values","vertex_id","x","y","z","directionOptions","defaultActiveKey","eventKey","title","className","style","color","type","placeholder","onChange","e","target","pz","toString","Number","checked","onClick","zone_name","margin","onDrawComplete","i","disabled"],"sources":["/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport \"./TriggerDemo.css\";\n\nconst TriggerDemo = () => {\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(null); // Store map_id\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false,\n  });\n  const [error, setError] = useState(null);\n  const [showMapForDrawing, setShowMapForDrawing] = useState(false);\n  const [useLeaflet, setUseLeaflet] = useState(false); // Toggle between Canvas and Leaflet\n\n  // Fetch data helper\n  const fetchData = async (url, setter, key, transform = (data) => data) => {\n    setLoading((prev) => ({ ...prev, [key]: true }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n      setError(null);\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n      setError(`Error fetching ${key}: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, [key]: false }));\n    }\n  };\n\n  // Fetch initial data\n  useEffect(() => {\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", (data) => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Flatten zones hierarchy\n  const flattenZones = (zones) => {\n    const result = [];\n    const flatten = (zone) => {\n      result.push(zone);\n      if (zone.children && zone.children.length > 0) {\n        zone.children.forEach(child => flatten(child));\n      }\n    };\n    zones.forEach(zone => flatten(zone));\n    return result;\n  };\n\n  // Update zones and fetch map_id when a parent zone is selected\n  useEffect(() => {\n    if (selectedParentZone) {\n      const zoneId = parseInt(selectedParentZone);\n      fetchData(`/maps/get_campus_zones/${zoneId}`, (data) => {\n        const flattenedZones = flattenZones(data.zones || []);\n        setZones(flattenedZones);\n      }, \"zones\");\n    }\n  }, [selectedParentZone]);\n\n  // Fetch map_id when a zone is selected\n  useEffect(() => {\n    if (selectedZone) {\n      fetch(`/maps/get_map_data/${selectedZone}`)\n        .then(response => response.json())\n        .then(data => {\n          setSelectedMapId(data.map_id || selectedZone); // Fallback to zoneId if map_id not provided\n        })\n        .catch(error => console.error(\"Error fetching map data:\", error));\n    }\n  }, [selectedZone]);\n\n  // Memoized handleCreateTrigger to prevent unnecessary re-renders\n  const handleCreateTrigger = useCallback(async () => {\n    if (!triggerName || !selectedZone || !triggerDirection) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Direction).\");\n      return;\n    }\n\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n\n    console.log(\"Current coordinates before save:\", coordinates); // Debug log\n    if (!coordinates) {\n      alert(\"Please draw the trigger on the map (click to add points, double-click to finish).\");\n      return;\n    }\n\n    // Find the direction ID (i_dir) from the selected direction string\n    const selectedDirectionObj = triggerDirections.find(dir => dir.x_dir === triggerDirection);\n    const directionId = selectedDirectionObj ? selectedDirectionObj.i_dir : null;\n\n    if (!directionId) {\n      alert(\"Invalid direction selected.\");\n      return;\n    }\n\n    const triggerData = {\n      name: triggerName,\n      direction: directionId,\n      zone_id: parseInt(selectedZone),\n      ignore: true,\n      coordinates: JSON.parse(coordinates),\n    };\n\n    console.log(\"Sending triggerData to /api/add_trigger:\", triggerData);\n\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(triggerData),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n      setShowMapForDrawing(false);\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  }, [triggerName, selectedZone, triggerDirection, coordinates, showMapForDrawing, triggerDirections]);\n\n  // Memoized onDrawComplete to prevent re-renders\n  const handleDrawComplete = useCallback((coords) => {\n    setCoordinates(coords);\n  }, []);\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\"))\n      .map(cb => parseInt(cb.value))\n      .filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n\n    setLoading((prev) => ({ ...prev, vertices: true }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId =>\n        fetch(`/api/get_zone_vertices/${zoneId}`)\n          .then(response => {\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            return response.json();\n          })\n          .then(data => data.vertices || [])\n      );\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({ ...acc, [v.i_vtx]: v }), {}));\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, vertices: false }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: { ...prev[vertexId], [field]: parseFloat(value) || 0 }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.i_vtx,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n\n    console.log(\"Sending vertices to /api/update_vertices:\", updatedVertices); // Debug log\n\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updatedVertices), // Send list directly\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", (data) => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map((direction) => (\n      <option key={direction.i_dir} value={direction.x_dir}>\n        {direction.x_dir}\n      </option>\n    ));\n  }, [triggerDirections]);\n\n  return (\n    <div>\n      <h1>ParcoRTLS Trigger Management</h1>\n      <Tabs defaultActiveKey=\"mapAndTrigger\" id=\"trigger-demo-tabs\">\n        <Tab eventKey=\"mapAndTrigger\" title=\"Map & Trigger\">\n          <div className=\"trigger-map-section\">\n            {error && <div style={{ color: \"red\" }}>{error}</div>}\n            <div className=\"trigger-form\">\n              <h3>Create Trigger</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Trigger Name\"\n                value={triggerName}\n                onChange={(e) => setTriggerName(e.target.value)}\n              />\n              <select value={selectedParentZone} onChange={(e) => setSelectedParentZone(e.target.value)}>\n                <option value=\"\">Select Parent Zone</option>\n                {loading.parentZones ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  parentZones.map((pz) => (\n                    <option key={pz.zone_id} value={pz.zone_id.toString()}>\n                      {pz.name}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={triggerDirection} onChange={(e) => setTriggerDirection(e.target.value)}>\n                <option value=\"\">Select Direction</option>\n                {loading.triggerDirections ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  directionOptions\n                )}\n              </select>\n              <input\n                type=\"number\"\n                placeholder=\"Top Elevation (Zmax)\"\n                value={topElevation}\n                onChange={(e) => setTopElevation(Number(e.target.value))}\n              />\n              <input\n                type=\"number\"\n                placeholder=\"Bottom Elevation (Zmin)\"\n                value={bottomElevation}\n                onChange={(e) => setBottomElevation(Number(e.target.value))}\n              />\n              <select value={triggerColor} onChange={(e) => setTriggerColor(e.target.value)}>\n                <option value=\"red\">Red</option>\n                <option value=\"green\">Green</option>\n                <option value=\"blue\">Blue</option>\n              </select>\n              <label>\n                Render with Leaflet:\n                <input\n                  type=\"checkbox\"\n                  checked={useLeaflet}\n                  onChange={(e) => setUseLeaflet(e.target.checked)}\n                />\n              </label>\n              <button onClick={handleCreateTrigger}>\n                {showMapForDrawing ? \"Save Trigger\" : \"Create Trigger\"}\n              </button>\n            </div>\n            <div className=\"map-selection\">\n              <h3>Select a Zone</h3>\n              <div id=\"zoneList\">\n                {loading.zones ? (\n                  <p>Loading zones...</p>\n                ) : zones.length === 0 ? (\n                  <p>No zones available for this parent zone.</p>\n                ) : (\n                  zones.map((zone) => (\n                    <div key={zone.zone_id}>\n                      <input\n                        type=\"checkbox\"\n                        value={zone.zone_id.toString()}\n                        checked={selectedZone === zone.zone_id.toString()}\n                        onChange={(e) => setSelectedZone(e.target.value)}\n                      />\n                      <span>{zone.zone_name}</span>\n                    </div>\n                  ))\n                )}\n              </div>\n              {showMapForDrawing && (\n                <>\n                  <div style={{ color: \"blue\", margin: \"10px 0\" }}>\n                    Click to add points, double-click to finish the trigger shape.\n                  </div>\n                  <Map\n                    key={selectedZone}\n                    zoneId={parseInt(selectedZone)}\n                    onDrawComplete={handleDrawComplete}\n                    triggerColor={triggerColor}\n                    useLeaflet={useLeaflet} // Pass the toggle state\n                  />\n                </>\n              )}\n            </div>\n            <h3>Edit Trigger Vertices</h3>\n            <table id=\"vertexTable\">\n              <thead>\n                <tr>\n                  <th>Vertex #</th>\n                  <th>X Coordinate</th>\n                  <th>Y Coordinate</th>\n                  <th>Z Coordinate</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.values(editedVertices).map((v, i) => (\n                  <tr key={v.i_vtx}>\n                    <td>{i + 1}</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.x || 0}\n                        onChange={(e) => handleVertexChange(v.i_vtx, \"x\", e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.y || 0}\n                        onChange={(e) => handleVertexChange(v.i_vtx, \"y\", e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.z || 0}\n                        onChange={(e) => handleVertexChange(v.i_vtx, \"z\", e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <button>Save</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button onClick={loadVerticesForSelectedZones} disabled={loading.vertices}>\n              {loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"}\n            </button>\n            <button onClick={saveAllVertices} disabled={loading.vertices}>\n              {loading.vertices ? \"Saving...\" : \"Save All Changes\"}\n            </button>\n          </div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TriggerDemo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}