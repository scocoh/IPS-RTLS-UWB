{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport \"./Map.css\"; // Ensure this matches the file name (Map.css)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n\n  // Debug mount/unmount\n  useEffect(() => {\n    console.log(\"Map component mounted with zoneId:\", zoneId);\n    return () => {\n      console.log(\"Map component unmounted with zoneId:\", zoneId);\n    };\n  }, [zoneId]);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Initialize the canvas and draw the map image\n  useEffect(() => {\n    if (mapData && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      // Set canvas dimensions to match the container\n      canvas.width = 600;\n      canvas.height = 500;\n\n      // Load the map image\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        // Draw the image scaled to the canvas\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Initialize drawing logic\n        const getCanvasCoordinates = e => {\n          const rect = canvas.getBoundingClientRect();\n          const x = e.clientX - rect.left;\n          const y = e.clientY - rect.top;\n          return {\n            x,\n            y\n          };\n        };\n        const drawPolygon = (points, currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          // Redraw the map image\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n          // Draw the polygon\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) {\n            ctx.lineTo(currentPoint.x, currentPoint.y);\n          }\n          if (close) {\n            ctx.closePath();\n          }\n          ctx.strokeStyle = triggerColor || \"red\";\n          ctx.stroke();\n\n          // Draw circles at vertex points\n          points.forEach(point => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = triggerColor || \"red\";\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n        const scalePoints = points => {\n          const width = canvas.width; // 600\n          const height = canvas.height; // 500\n          const scaledPoints = points.map((point, index) => {\n            const x = -80 + point.x / width * 240; // Map to [-80, 160]\n            const y = 160 - point.y / height * 200; // Map to [-40, 160], flipped\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          });\n          return scaledPoints;\n        };\n\n        // Mouse event listeners\n        const handleMouseDown = e => {\n          if (e.button === 0) {\n            // Left click\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            points.current.push(point);\n            drawPolygon(points.current);\n          }\n        };\n        const handleMouseMove = e => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, point);\n          }\n        };\n        const handleMouseUp = e => {\n          if (e.button === 0) {\n            isDrawing.current = false;\n          }\n        };\n        const handleDoubleClick = () => {\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points:\", scaledPoints);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(scaledPoints));\n            }\n            points.current = []; // Reset points after completing the polygon\n          }\n        };\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n\n        // Cleanup event listeners on unmount\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"map\",\n      style: {\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}, \"ncDTmG+mfKPKnOpvrUkjJn5meDg=\")), \"ncDTmG+mfKPKnOpvrUkjJn5meDg=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"Map$memo\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","jsxDEV","_jsxDEV","Map","_s","_c","zoneId","onDrawComplete","triggerColor","canvasRef","mapData","setMapData","error","setError","points","isDrawing","ctxRef","imageRef","console","log","fetchMapData","response","fetch","ok","text","Error","status","data","json","message","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","getCanvasCoordinates","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","drawPolygon","currentPoint","close","clearRect","length","beginPath","moveTo","i","lineTo","closePath","strokeStyle","stroke","forEach","point","arc","Math","PI","fillStyle","fill","scalePoints","scaledPoints","map","index","n_x","n_y","n_z","n_ord","handleMouseDown","button","push","handleMouseMove","handleMouseUp","handleDoubleClick","JSON","stringify","addEventListener","removeEventListener","onerror","children","style","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","border","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from \"react\";\nimport \"./Map.css\"; // Ensure this matches the file name (Map.css)\n\nconst Map = memo(({ zoneId, onDrawComplete, triggerColor }) => {\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n\n  // Debug mount/unmount\n  useEffect(() => {\n    console.log(\"Map component mounted with zoneId:\", zoneId);\n    return () => {\n      console.log(\"Map component unmounted with zoneId:\", zoneId);\n    };\n  }, [zoneId]);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Initialize the canvas and draw the map image\n  useEffect(() => {\n    if (mapData && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      // Set canvas dimensions to match the container\n      canvas.width = 600;\n      canvas.height = 500;\n\n      // Load the map image\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n\n      img.onload = () => {\n        console.log(\"Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        // Draw the image scaled to the canvas\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        // Initialize drawing logic\n        const getCanvasCoordinates = (e) => {\n          const rect = canvas.getBoundingClientRect();\n          const x = e.clientX - rect.left;\n          const y = e.clientY - rect.top;\n          return { x, y };\n        };\n\n        const drawPolygon = (points, currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          // Redraw the map image\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n          // Draw the polygon\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) {\n            ctx.lineTo(currentPoint.x, currentPoint.y);\n          }\n          if (close) {\n            ctx.closePath();\n          }\n          ctx.strokeStyle = triggerColor || \"red\";\n          ctx.stroke();\n\n          // Draw circles at vertex points\n          points.forEach((point) => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = triggerColor || \"red\";\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n\n        const scalePoints = (points) => {\n          const width = canvas.width; // 600\n          const height = canvas.height; // 500\n          const scaledPoints = points.map((point, index) => {\n            const x = -80 + (point.x / width) * 240; // Map to [-80, 160]\n            const y = 160 - (point.y / height) * 200; // Map to [-40, 160], flipped\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          });\n          return scaledPoints;\n        };\n\n        // Mouse event listeners\n        const handleMouseDown = (e) => {\n          if (e.button === 0) { // Left click\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            points.current.push(point);\n            drawPolygon(points.current);\n          }\n        };\n\n        const handleMouseMove = (e) => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, point);\n          }\n        };\n\n        const handleMouseUp = (e) => {\n          if (e.button === 0) {\n            isDrawing.current = false;\n          }\n        };\n\n        const handleDoubleClick = () => {\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points:\", scaledPoints);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(scaledPoints));\n            }\n            points.current = []; // Reset points after completing the polygon\n          }\n        };\n\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n\n        // Cleanup event listeners on unmount\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n    </div>\n  );\n});\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}