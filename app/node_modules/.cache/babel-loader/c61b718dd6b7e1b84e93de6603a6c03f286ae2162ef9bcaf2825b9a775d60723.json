{"ast":null,"code":"// Version: 250303 campusMapLoader_pac.js Version 0P.7B.58g ðŸš€\n//\n// ParcoRTLS Middletier Services, ParcoRTLS DLL, ParcoDatabases, ParcoMessaging, and other code\n// Copyright (C) 1999 - 2025 Affiliated Commercial Services Inc.\n// Invented by Scott Cohen & Bertrand Dugal.\n// Coded by Jesse Chunn O.B.M.'24 and Michael Farnsworth and Others\n// Published at GitHub https://github.com/scocoh/IPS-RTLS-UWB\n//\n// Licensed under AGPL-3.0: https://www.gnu.org/licenses/agpl-3.0.en.html\n//\n\n// Declare mapImage and vertexData globally\nlet mapImage;\nlet vertexData; // Store vertex data globally\nlet mapMetadata; // Store map metadata globally for scaling\n\nwindow.drawVertices = drawVertices; // Expose drawVertices globally for checkbox toggle\n\n// Define renderZones globally to fix scoping issue\nfunction renderZones(zones, depth = 0) {\n  const zoneList = document.getElementById(\"zoneList\");\n  if (!zoneList) {\n    console.error(`[ERROR] #zoneList not found (Version 0P.7B.58g).`);\n    return;\n  }\n  (zones.zones || zones).forEach(zone => {\n    // Handle both {zones: [...]} and plain array\n    // Check if zone has required fields, even if children is empty\n    if (zone.zone_id && zone.name) {\n      // Use 'name' instead of 'zone_name' to match pac API\n      const div = document.createElement(\"div\");\n      div.style.marginLeft = `${depth * 20}px`;\n      const checkbox = document.createElement(\"input\");\n      checkbox.type = \"checkbox\";\n      checkbox.checked = true;\n      checkbox.dataset.zoneId = zone.zone_id;\n      checkbox.addEventListener(\"change\", () => {\n        console.log(`[INFO] Checkbox toggled for zone ${zone.name} (Version 0P.7B.58g):`, checkbox.checked);\n        drawVertices();\n      });\n      div.appendChild(checkbox);\n      const label = document.createElement(\"span\");\n      label.textContent = ` ${zone.name}`; // Use 'name' as in pac API\n      div.appendChild(label);\n      zoneList.appendChild(div);\n      // Recursively render children if they exist\n      if (zone.children && Array.isArray(zone.children) && zone.children.length > 0) {\n        renderZones(zone.children, depth + 1);\n      }\n    } else {\n      console.warn(`[WARN] Invalid zone data skipped:`, zone);\n    }\n  });\n}\n\n// Define drawVertices globally\nfunction drawVertices() {\n  const canvas = document.getElementById(\"zoneCanvas\");\n  if (!canvas) {\n    console.error(`[ERROR] Canvas not found (Version 0P.7B.58g).`);\n    return;\n  }\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    console.error(`[ERROR] Canvas context not available (Version 0P.7B.58g).`);\n    return;\n  }\n  if (!mapImage || !mapMetadata || !vertexData) {\n    console.warn(`[WARN] Missing required data - mapImage: ${!!mapImage}, mapMetadata: ${!!mapMetadata}, vertexData: ${!!vertexData}`);\n    return;\n  }\n  const showVerticesCheckbox = document.getElementById(\"showVertices\");\n  if (!showVerticesCheckbox) {\n    console.error(`[ERROR] Show Vertices checkbox not found (Version 0P.7B.58g).`);\n    return;\n  }\n  const canvasWidth = canvas.width;\n  const canvasHeight = canvas.height;\n  const mapWidth = mapMetadata.max_x - mapMetadata.min_x;\n  const mapHeight = mapMetadata.max_y - mapMetadata.min_y;\n  const scaleX = canvasWidth / mapWidth;\n  const scaleY = canvasHeight / mapHeight;\n  const scale = Math.min(scaleX, scaleY);\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n  if (showVerticesCheckbox.checked) {\n    console.log(`[INFO] Rendering vertices (Version 0P.7B.58g)`);\n    const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked')).map(cb => parseInt(cb.dataset.zoneId)).filter(id => !isNaN(id));\n    console.log(`[DEBUG] Checked zones (Version 0P.7B.58g):`, checkedZones);\n    if (checkedZones.length === 0) {\n      console.warn(`[WARN] No zones checked; skipping vertex rendering (Version 0P.7B.58g).`);\n      return;\n    }\n    checkedZones.forEach(zoneId => {\n      const verticesForZone = vertexData.vertices.filter(v => parseInt(v.zone_id) === zoneId).sort((a, b) => a.order - b.order);\n      console.log(`[DEBUG] Vertices for zone ${zoneId}:`, verticesForZone);\n      verticesForZone.forEach((v, index) => {\n        const scaledX = (v.x - mapMetadata.min_x) * scale;\n        const scaledY = canvasHeight - (v.y - mapMetadata.min_y) * scale;\n        console.log(`[DEBUG] Drawing vertex at (${scaledX}, ${scaledY}) for zone ${zoneId}`);\n        ctx.beginPath();\n        ctx.arc(scaledX, scaledY, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"red\";\n        ctx.fill();\n\n        // Draw vertex number next to the point\n        ctx.font = \"12px Arial\";\n        ctx.fillStyle = \"black\";\n        ctx.fillText(index + 1, scaledX + 8, scaledY - 2); // Offset label slightly\n      });\n      for (let i = 0; i < verticesForZone.length; i++) {\n        const v = verticesForZone[i];\n        const nextVertex = verticesForZone[(i + 1) % verticesForZone.length];\n        const scaledX = (v.x - mapMetadata.min_x) * scale;\n        const scaledY = canvasHeight - (v.y - mapMetadata.min_y) * scale;\n        const nextScaledX = (nextVertex.x - mapMetadata.min_x) * scale;\n        const nextScaledY = canvasHeight - (nextVertex.y - mapMetadata.min_y) * scale;\n        ctx.beginPath();\n        ctx.moveTo(scaledX, scaledY);\n        ctx.lineTo(nextScaledX, nextScaledY);\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n    });\n  } else {\n    console.log(`[INFO] Vertices hidden (Show Vertices unchecked)`);\n  }\n}\nfunction loadCampuses() {\n  console.info('Fetching Campuses (Version 0P.7B.58g)...');\n  fetch('/get_campus_zones?campus_id=all') // Modified to request all campuses\n  .then(response => {\n    if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);\n    return response.json();\n  }).then(data => {\n    console.debug('Campus data (Version 0P.7B.58g):', data);\n    const campusDropdown = document.getElementById(\"campusSelect\");\n    campusDropdown.innerHTML = \"<option value=''>Select Campus</option>\";\n\n    // Handle the response as a list of campuses (direct array or hierarchical structure)\n    let campuses = Array.isArray(data) ? data : data.zones || []; // Expect {zones: [...]}\n    if (!Array.isArray(campuses)) {\n      console.error('Unexpected campus data format (Version 0P.7B.58g):', data);\n      throw new Error('Invalid campus data format');\n    }\n    if (campuses.length === 0) {\n      console.warn(`[WARN] No campuses found in response (Version 0P.7B.58g)`);\n    }\n    campuses.forEach(campus => {\n      // Only process Campus L1 zones (zone_type = 1) for the dropdown, with fallback for missing fields\n      const zoneType = campus.zone_type || (campus.zone_type === 0 ? 0 : null); // Default to null if undefined\n      const mapId = campus.map_id || null;\n      const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n      if (zoneType === 1 && mapId && campusId) {\n        console.debug(`[DEBUG] Adding campus to dropdown: ${campus.name || 'Unnamed'} (map_id: ${mapId}, campus_id: ${campusId})`);\n        const option = document.createElement(\"option\");\n        option.value = mapId;\n        option.textContent = campus.name || `Campus ID ${campusId}`; // Fallback name if missing\n        option.dataset.campusId = String(campusId); // Ensure campus_id is set as a string, then parsed as int\n        campusDropdown.appendChild(option);\n      } else {\n        console.debug(`[DEBUG] Skipping non-CL1 zone or null/invalid data: ${campus.name || 'Unnamed'} (zone_type: ${zoneType}, map_id: ${mapId}, campus_id: ${campusId})`);\n      }\n    });\n    console.info('Campuses loaded successfully (Version 0P.7B.58g).');\n  }).catch(error => {\n    console.error('[ERROR] Fetching campuses failed (Version 0P.7B.58g):', error);\n    alert(\"ðŸš¨ Error fetching campus list.\");\n  });\n}\nfunction processCampus(campus) {\n  console.debug('Processing campus:', campus);\n  if (!campus.map_id) {\n    console.debug(`Skipping campus due to null map_id: ${campus.name || 'Unnamed'} (Version 0P.7B.58g)`);\n    return; // Skip if map_id is null\n  }\n\n  // Recursively process all children for hierarchy in zone list (CL1, BOL2, BL3, FL4, WL5, RL6), but only add CL1 to dropdown\n  const zoneType = campus.zone_type || null;\n  const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n  if (zoneType === 1 && campusId) {\n    // Only add Campus L1 to dropdown, ensure campus_id exists\n    const campusDropdown = document.getElementById(\"campusSelect\");\n    const option = document.createElement(\"option\");\n    option.value = campus.map_id;\n    option.textContent = campus.name || `Campus ID ${campusId}`;\n    option.dataset.campusId = String(campusId); // Ensure campus_id is set as a string, then parsed as int\n    campusDropdown.appendChild(option);\n  }\n\n  // Recursively process all children for hierarchy in zone list\n  if (campus.children && Array.isArray(campus.children)) {\n    campus.children.forEach(child => processCampus(child));\n  }\n  console.info(`Campus loaded successfully: ${campus.name || 'Unnamed'} (map_id: ${campus.map_id}, Version 0P.7B.58g)`);\n}\nfunction loadCampusMap() {\n  const selectedCampus = document.getElementById(\"campusSelect\").value;\n  const campusIdElement = document.getElementById(\"campusSelect\").selectedOptions[0];\n  const campusIdStr = campusIdElement ? campusIdElement.dataset.campusId : null;\n  const campusId = campusIdStr ? parseInt(campusIdStr, 10) : null; // Use null if invalid, not NaN\n  if (!selectedCampus || !campusId || isNaN(campusId)) {\n    console.error(`[ERROR] Invalid campus selection: selectedCampus=${selectedCampus}, campusId=${campusId} (Version 0P.7B.58g)`);\n    alert(\"ðŸš¨ Please select a valid campus.\");\n    return;\n  }\n  console.log(`[INFO] Loading map for Campus map_id ${selectedCampus} (campus_id: ${campusId}, Version 0P.7B.58g)...`);\n  const canvas = document.getElementById(\"zoneCanvas\");\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Add \"Select Zones & Vertices\" and \"Show Vertices\" checkbox immediately\n  const zoneList = document.getElementById(\"zoneList\");\n  if (!zoneList) {\n    console.error(`[ERROR] #zoneList not found (Version 0P.7B.58g).`);\n    return;\n  }\n  zoneList.innerHTML = \"\"; // Clear zone list first\n  if (!document.getElementById(\"showVertices\")) {\n    const vertexToggle = document.createElement(\"div\");\n    vertexToggle.innerHTML = `<input type=\"checkbox\" id=\"showVertices\" checked> Show Vertices`;\n    zoneList.prepend(vertexToggle);\n    document.getElementById(\"showVertices\").addEventListener(\"change\", () => {\n      console.log(`[INFO] Show Vertices toggled: ${document.getElementById(\"showVertices\").checked} (Version 0P.7B.58g)`);\n      drawVertices();\n    });\n  }\n\n  // Fetch and display the map from zoneviewer_api_pac.py on port 5014\n  fetch(`http://192.168.210.231:5014/get_map/${selectedCampus}`).then(response => {\n    console.log(`[DEBUG] Map fetch response for /get_map/${selectedCampus} (Version 0P.7B.58g):`, response);\n    if (!response.ok) throw new Error(`Map fetch failed: ${response.status}`);\n    return response.blob();\n  }).then(blob => {\n    console.log(`[DEBUG] Map blob received (Version 0P.7B.58g):`, blob);\n    mapImage = new Image();\n    mapImage.crossOrigin = \"Anonymous\";\n    mapImage.onload = () => {\n      fetch(`http://192.168.210.231:5014/get_map_metadata/${selectedCampus}`).then(metaResponse => {\n        console.log(`[DEBUG] Map metadata fetch response for /get_map_metadata/${selectedCampus} (Version 0P.7B.58g):`, metaResponse);\n        if (!metaResponse.ok) throw new Error(`Metadata fetch failed: ${metaResponse.status}`);\n        return metaResponse.json();\n      }).then(metadata => {\n        console.log(`[DEBUG] Map metadata (Version 0P.7B.58g):`, metadata);\n        mapMetadata = metadata;\n        if (metadata.min_x && metadata.max_x && metadata.min_y && metadata.max_y) {\n          const mapWidth = metadata.max_x - metadata.min_x;\n          const mapHeight = metadata.max_y - metadata.min_y;\n          const canvasWidth = canvas.width;\n          const canvasHeight = canvas.height;\n          const scaleX = canvasWidth / mapWidth;\n          const scaleY = canvasHeight / mapHeight;\n          const scale = Math.min(scaleX, scaleY);\n          ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n          ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n        } else {\n          ctx.drawImage(mapImage, 0, 0, canvas.width, canvas.height);\n        }\n        if (vertexData) drawVertices(); // Only call if vertices are loaded\n      }).catch(metaError => console.error(`[ERROR] Fetching map metadata failed (Version 0P.7B.58g):`, metaError));\n      console.log(`[DEBUG] Map drawn on canvas (Version 0P.7B.58g).`);\n    };\n    mapImage.src = URL.createObjectURL(blob);\n  }).catch(error => console.error(`[ERROR] Loading map failed (Version 0P.7B.58g):`, error));\n\n  // Fetch zones for the specific campus, matching non-pac /get_all_zones_for_campus/<campus_id>\n  fetch(`http://192.168.210.231:5014/get_campus_zones?campus_id=${campusId}`).then(response => {\n    console.log(`[DEBUG] Zones fetch response for /get_campus_zones?campus_id=${campusId} (Version 0P.7B.58g):`, response);\n    if (!response.ok) {\n      console.error(`[ERROR] Zones fetch failed: ${response.status} - ${response.statusText}`);\n      throw new Error(`Zones fetch failed: ${response.status}`);\n    }\n    return response.json();\n  }).then(data => {\n    console.log(`[DEBUG] Zones data (Version 0P.7B.58g):`, data);\n    // Handle the response as {zones: [...]}, matching non-pac structure\n    renderZones(data); // Use global renderZones, expecting {zones: [...]}\n    console.log(`[INFO] Zones loaded successfully for campus ${campusId} (Version 0P.7B.58g).`);\n    if (mapImage && mapMetadata && vertexData) drawVertices(); // Render if all data is ready\n  }).catch(error => {\n    console.error(`[ERROR] Loading zones failed (Version 0P.7B.58g):`, error);\n    if (error.message.includes('404')) {\n      console.warn(`[WARN] Zones not found for campus ${campusId}, defaulting to empty list`);\n      renderZones({\n        zones: []\n      }); // Use global renderZones for empty list, matching non-pac structure\n    }\n  });\n\n  // Fetch and display vertices from zoneviewer_api_pac.py on port 5014\n  fetch(`http://192.168.210.231:5014/get_vertices_for_campus/${campusId}`).then(response => {\n    console.log(`[DEBUG] Vertices fetch response for /get_vertices_for_campus/${campusId} (Version 0P.7B.58g):`, response);\n    if (!response.ok) {\n      console.error(`[ERROR] Vertices fetch failed: ${response.status} - ${response.statusText}`);\n      throw new Error(`Vertices fetch failed: ${response.status}`);\n    }\n    return response.json();\n  }).then(responseData => {\n    console.log(`[DEBUG] Vertices data (Version 0P.7B.58g):`, responseData);\n    vertexData = responseData;\n    if (mapImage && mapMetadata) drawVertices(); // Render once vertices are loaded\n  }).catch(error => {\n    console.error(`[ERROR] Loading vertices failed (Version 0P.7B.58g):`, error);\n    if (error.message.includes('404')) {\n      console.warn(`[WARN] Vertices not found for campus ${campusId}, defaulting to empty data`);\n      vertexData = {\n        vertices: []\n      }; // Default to empty vertices to avoid breaking UI\n      if (mapImage && mapMetadata) drawVertices(); // Render empty vertices\n    }\n  });\n}\n\n// NEW FUNCTION: Load vertices for selected zones and populate the edit table\nfunction loadVerticesForSelectedZones() {\n  const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked')).map(cb => parseInt(cb.dataset.zoneId)).filter(id => !isNaN(id));\n  if (checkedZones.length === 0) {\n    console.warn(`[WARN] No zones selected for vertex loading (Version 0P.7B.58g).`);\n    alert(\"Please select at least one zone to load vertices.\");\n    return;\n  }\n  console.log(`[INFO] Loading vertices for zones:`, checkedZones);\n  const vertexTableBody = document.querySelector(\"#vertexTable tbody\");\n  vertexTableBody.innerHTML = \"\"; // Clear existing rows\n\n  checkedZones.forEach((zoneId, zoneIndex) => {\n    const verticesForZone = vertexData.vertices.filter(v => parseInt(v.zone_id) === zoneId).sort((a, b) => a.order - b.order);\n    verticesForZone.forEach((vertex, index) => {\n      const row = document.createElement(\"tr\");\n      const vertexNum = zoneIndex * 100 + (index + 1); // Unique vertex number across zones (e.g., 101, 102 for zone 1)\n      row.innerHTML = `\n                <td>${vertexNum}</td>\n                <td><input type=\"number\" value=\"${vertex.x}\" data-field=\"x\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.y}\" data-field=\"y\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.z || 0}\" data-field=\"z\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><button disabled>Save</button></td> <!-- Individual save buttons disabled for now -->\n            `;\n      vertexTableBody.appendChild(row);\n    });\n  });\n  drawVertices(); // Refresh the map with current vertex data\n}\n\n// NEW FUNCTION: Save all edited vertices to the backend\nfunction saveAllVertices() {\n  const rows = document.querySelectorAll(\"#vertexTable tbody tr\");\n  const updatedVertices = Array.from(rows).map(row => {\n    const vertexId = row.querySelector('input[data-field=\"x\"]').dataset.vertexId;\n    return {\n      vertex_id: parseInt(vertexId),\n      x: parseFloat(row.querySelector('input[data-field=\"x\"]').value),\n      y: parseFloat(row.querySelector('input[data-field=\"y\"]').value),\n      z: parseFloat(row.querySelector('input[data-field=\"z\"]').value)\n    };\n  });\n  console.log(`[INFO] Saving updated vertices:`, updatedVertices);\n  fetch('http://192.168.210.231:5014/update_vertices', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      vertices: updatedVertices\n    })\n  }).then(response => {\n    if (!response.ok) throw new Error(`Failed to save vertices: ${response.status}`);\n    return response.json();\n  }).then(data => {\n    console.log(`[INFO] Vertices saved successfully:`, data);\n    // Update local vertexData with the new values\n    updatedVertices.forEach(updated => {\n      const vertex = vertexData.vertices.find(v => v.vertex_id === updated.vertex_id);\n      if (vertex) {\n        vertex.x = updated.x;\n        vertex.y = updated.y;\n        vertex.z = updated.z;\n      }\n    });\n    drawVertices(); // Refresh the map with updated vertices\n    alert(\"Vertices updated successfully!\");\n  }).catch(error => {\n    console.error(`[ERROR] Failed to save vertices:`, error);\n    alert(\"Error saving vertices. Check console for details.\");\n  });\n}\n\n// Export all required functions for ES module usage\nexport { loadCampusMap, loadCampuses, loadVerticesForSelectedZones, saveAllVertices, renderZones }; // Export renderZones globally","map":{"version":3,"names":["mapImage","vertexData","mapMetadata","window","drawVertices","renderZones","zones","depth","zoneList","document","getElementById","console","error","forEach","zone","zone_id","name","div","createElement","style","marginLeft","checkbox","type","checked","dataset","zoneId","addEventListener","log","appendChild","label","textContent","children","Array","isArray","length","warn","canvas","ctx","getContext","showVerticesCheckbox","canvasWidth","width","canvasHeight","height","mapWidth","max_x","min_x","mapHeight","max_y","min_y","scaleX","scaleY","scale","Math","min","clearRect","drawImage","checkedZones","from","querySelectorAll","map","cb","parseInt","filter","id","isNaN","verticesForZone","vertices","v","sort","a","b","order","index","scaledX","x","scaledY","y","beginPath","arc","PI","fillStyle","fill","font","fillText","i","nextVertex","nextScaledX","nextScaledY","moveTo","lineTo","strokeStyle","lineWidth","stroke","loadCampuses","info","fetch","then","response","ok","Error","status","json","data","debug","campusDropdown","innerHTML","campuses","campus","zoneType","zone_type","mapId","map_id","campusId","option","value","String","catch","alert","processCampus","child","loadCampusMap","selectedCampus","campusIdElement","selectedOptions","campusIdStr","vertexToggle","prepend","blob","Image","crossOrigin","onload","metaResponse","metadata","metaError","src","URL","createObjectURL","statusText","message","includes","responseData","loadVerticesForSelectedZones","vertexTableBody","querySelector","zoneIndex","vertex","row","vertexNum","vertex_id","z","saveAllVertices","rows","updatedVertices","vertexId","parseFloat","method","headers","body","JSON","stringify","updated","find"],"sources":["/home/parcoadmin/parco_fastapi/app/src/campusMapLoader_pac.js"],"sourcesContent":["// Version: 250303 campusMapLoader_pac.js Version 0P.7B.58g ðŸš€\n//\n// ParcoRTLS Middletier Services, ParcoRTLS DLL, ParcoDatabases, ParcoMessaging, and other code\n// Copyright (C) 1999 - 2025 Affiliated Commercial Services Inc.\n// Invented by Scott Cohen & Bertrand Dugal.\n// Coded by Jesse Chunn O.B.M.'24 and Michael Farnsworth and Others\n// Published at GitHub https://github.com/scocoh/IPS-RTLS-UWB\n//\n// Licensed under AGPL-3.0: https://www.gnu.org/licenses/agpl-3.0.en.html\n//\n\n// Declare mapImage and vertexData globally\nlet mapImage;\nlet vertexData; // Store vertex data globally\nlet mapMetadata; // Store map metadata globally for scaling\n\nwindow.drawVertices = drawVertices; // Expose drawVertices globally for checkbox toggle\n\n// Define renderZones globally to fix scoping issue\nfunction renderZones(zones, depth = 0) {\n    const zoneList = document.getElementById(\"zoneList\");\n    if (!zoneList) {\n        console.error(`[ERROR] #zoneList not found (Version 0P.7B.58g).`);\n        return;\n    }\n\n    (zones.zones || zones).forEach(zone => {  // Handle both {zones: [...]} and plain array\n        // Check if zone has required fields, even if children is empty\n        if (zone.zone_id && zone.name) {  // Use 'name' instead of 'zone_name' to match pac API\n            const div = document.createElement(\"div\");\n            div.style.marginLeft = `${depth * 20}px`;\n            const checkbox = document.createElement(\"input\");\n            checkbox.type = \"checkbox\";\n            checkbox.checked = true;\n            checkbox.dataset.zoneId = zone.zone_id;\n            checkbox.addEventListener(\"change\", () => {\n                console.log(`[INFO] Checkbox toggled for zone ${zone.name} (Version 0P.7B.58g):`, checkbox.checked);\n                drawVertices();\n            });\n            div.appendChild(checkbox);\n            const label = document.createElement(\"span\");\n            label.textContent = ` ${zone.name}`;  // Use 'name' as in pac API\n            div.appendChild(label);\n            zoneList.appendChild(div);\n            // Recursively render children if they exist\n            if (zone.children && Array.isArray(zone.children) && zone.children.length > 0) {\n                renderZones(zone.children, depth + 1);\n            }\n        } else {\n            console.warn(`[WARN] Invalid zone data skipped:`, zone);\n        }\n    });\n}\n\n// Define drawVertices globally\nfunction drawVertices() {\n    const canvas = document.getElementById(\"zoneCanvas\");\n    if (!canvas) {\n        console.error(`[ERROR] Canvas not found (Version 0P.7B.58g).`);\n        return;\n    }\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        console.error(`[ERROR] Canvas context not available (Version 0P.7B.58g).`);\n        return;\n    }\n\n    if (!mapImage || !mapMetadata || !vertexData) {\n        console.warn(`[WARN] Missing required data - mapImage: ${!!mapImage}, mapMetadata: ${!!mapMetadata}, vertexData: ${!!vertexData}`);\n        return;\n    }\n\n    const showVerticesCheckbox = document.getElementById(\"showVertices\");\n    if (!showVerticesCheckbox) {\n        console.error(`[ERROR] Show Vertices checkbox not found (Version 0P.7B.58g).`);\n        return;\n    }\n\n    const canvasWidth = canvas.width;\n    const canvasHeight = canvas.height;\n    const mapWidth = mapMetadata.max_x - mapMetadata.min_x;\n    const mapHeight = mapMetadata.max_y - mapMetadata.min_y;\n    const scaleX = canvasWidth / mapWidth;\n    const scaleY = canvasHeight / mapHeight;\n    const scale = Math.min(scaleX, scaleY);\n\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n\n    if (showVerticesCheckbox.checked) {\n        console.log(`[INFO] Rendering vertices (Version 0P.7B.58g)`);\n        const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked'))\n            .map(cb => parseInt(cb.dataset.zoneId))\n            .filter(id => !isNaN(id));\n        console.log(`[DEBUG] Checked zones (Version 0P.7B.58g):`, checkedZones);\n\n        if (checkedZones.length === 0) {\n            console.warn(`[WARN] No zones checked; skipping vertex rendering (Version 0P.7B.58g).`);\n            return;\n        }\n\n        checkedZones.forEach(zoneId => {\n            const verticesForZone = vertexData.vertices\n                .filter(v => parseInt(v.zone_id) === zoneId)\n                .sort((a, b) => a.order - b.order);\n            console.log(`[DEBUG] Vertices for zone ${zoneId}:`, verticesForZone);\n\n            verticesForZone.forEach((v, index) => {\n                const scaledX = (v.x - mapMetadata.min_x) * scale;\n                const scaledY = canvasHeight - ((v.y - mapMetadata.min_y) * scale);\n                console.log(`[DEBUG] Drawing vertex at (${scaledX}, ${scaledY}) for zone ${zoneId}`);\n\n                ctx.beginPath();\n                ctx.arc(scaledX, scaledY, 5, 0, 2 * Math.PI);\n                ctx.fillStyle = \"red\";\n                ctx.fill();\n\n                // Draw vertex number next to the point\n                ctx.font = \"12px Arial\";\n                ctx.fillStyle = \"black\";\n                ctx.fillText(index + 1, scaledX + 8, scaledY - 2); // Offset label slightly\n            });\n\n            for (let i = 0; i < verticesForZone.length; i++) {\n                const v = verticesForZone[i];\n                const nextVertex = verticesForZone[(i + 1) % verticesForZone.length];\n                const scaledX = (v.x - mapMetadata.min_x) * scale;\n                const scaledY = canvasHeight - ((v.y - mapMetadata.min_y) * scale);\n                const nextScaledX = (nextVertex.x - mapMetadata.min_x) * scale;\n                const nextScaledY = canvasHeight - ((nextVertex.y - mapMetadata.min_y) * scale);\n\n                ctx.beginPath();\n                ctx.moveTo(scaledX, scaledY);\n                ctx.lineTo(nextScaledX, nextScaledY);\n                ctx.strokeStyle = \"red\";\n                ctx.lineWidth = 2;\n                ctx.stroke();\n            }\n        });\n    } else {\n        console.log(`[INFO] Vertices hidden (Show Vertices unchecked)`);\n    }\n}\n\nfunction loadCampuses() {\n    console.info('Fetching Campuses (Version 0P.7B.58g)...');\n    fetch('/get_campus_zones?campus_id=all')  // Modified to request all campuses\n        .then(response => {\n            if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);\n            return response.json();\n        })\n        .then(data => {\n            console.debug('Campus data (Version 0P.7B.58g):', data);\n            const campusDropdown = document.getElementById(\"campusSelect\");\n            campusDropdown.innerHTML = \"<option value=''>Select Campus</option>\";\n\n            // Handle the response as a list of campuses (direct array or hierarchical structure)\n            let campuses = Array.isArray(data) ? data : (data.zones || []);  // Expect {zones: [...]}\n            if (!Array.isArray(campuses)) {\n                console.error('Unexpected campus data format (Version 0P.7B.58g):', data);\n                throw new Error('Invalid campus data format');\n            }\n\n            if (campuses.length === 0) {\n                console.warn(`[WARN] No campuses found in response (Version 0P.7B.58g)`);\n            }\n\n            campuses.forEach(campus => {\n                // Only process Campus L1 zones (zone_type = 1) for the dropdown, with fallback for missing fields\n                const zoneType = campus.zone_type || (campus.zone_type === 0 ? 0 : null); // Default to null if undefined\n                const mapId = campus.map_id || null;\n                const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n                if (zoneType === 1 && mapId && campusId) {\n                    console.debug(`[DEBUG] Adding campus to dropdown: ${campus.name || 'Unnamed'} (map_id: ${mapId}, campus_id: ${campusId})`);\n                    const option = document.createElement(\"option\");\n                    option.value = mapId;\n                    option.textContent = campus.name || `Campus ID ${campusId}`; // Fallback name if missing\n                    option.dataset.campusId = String(campusId);  // Ensure campus_id is set as a string, then parsed as int\n                    campusDropdown.appendChild(option);\n                } else {\n                    console.debug(`[DEBUG] Skipping non-CL1 zone or null/invalid data: ${campus.name || 'Unnamed'} (zone_type: ${zoneType}, map_id: ${mapId}, campus_id: ${campusId})`);\n                }\n            });\n            console.info('Campuses loaded successfully (Version 0P.7B.58g).');\n        })\n        .catch(error => {\n            console.error('[ERROR] Fetching campuses failed (Version 0P.7B.58g):', error);\n            alert(\"ðŸš¨ Error fetching campus list.\");\n        });\n}\n\nfunction processCampus(campus) {\n    console.debug('Processing campus:', campus);\n    if (!campus.map_id) {\n        console.debug(`Skipping campus due to null map_id: ${campus.name || 'Unnamed'} (Version 0P.7B.58g)`);\n        return; // Skip if map_id is null\n    }\n\n    // Recursively process all children for hierarchy in zone list (CL1, BOL2, BL3, FL4, WL5, RL6), but only add CL1 to dropdown\n    const zoneType = campus.zone_type || null;\n    const campusId = campus.zone_id || null; // Use zone_id as campus_id since the response uses zone_id\n\n    if (zoneType === 1 && campusId) {  // Only add Campus L1 to dropdown, ensure campus_id exists\n        const campusDropdown = document.getElementById(\"campusSelect\");\n        const option = document.createElement(\"option\");\n        option.value = campus.map_id;\n        option.textContent = campus.name || `Campus ID ${campusId}`;\n        option.dataset.campusId = String(campusId); // Ensure campus_id is set as a string, then parsed as int\n        campusDropdown.appendChild(option);\n    }\n\n    // Recursively process all children for hierarchy in zone list\n    if (campus.children && Array.isArray(campus.children)) {\n        campus.children.forEach(child => processCampus(child));\n    }\n    console.info(`Campus loaded successfully: ${campus.name || 'Unnamed'} (map_id: ${campus.map_id}, Version 0P.7B.58g)`);\n}\n\nfunction loadCampusMap() {\n    const selectedCampus = document.getElementById(\"campusSelect\").value;\n    const campusIdElement = document.getElementById(\"campusSelect\").selectedOptions[0];\n    const campusIdStr = campusIdElement ? campusIdElement.dataset.campusId : null;\n    const campusId = campusIdStr ? parseInt(campusIdStr, 10) : null; // Use null if invalid, not NaN\n    if (!selectedCampus || !campusId || isNaN(campusId)) {\n        console.error(`[ERROR] Invalid campus selection: selectedCampus=${selectedCampus}, campusId=${campusId} (Version 0P.7B.58g)`);\n        alert(\"ðŸš¨ Please select a valid campus.\");\n        return;\n    }\n\n    console.log(`[INFO] Loading map for Campus map_id ${selectedCampus} (campus_id: ${campusId}, Version 0P.7B.58g)...`);\n    const canvas = document.getElementById(\"zoneCanvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Add \"Select Zones & Vertices\" and \"Show Vertices\" checkbox immediately\n    const zoneList = document.getElementById(\"zoneList\");\n    if (!zoneList) {\n        console.error(`[ERROR] #zoneList not found (Version 0P.7B.58g).`);\n        return;\n    }\n    zoneList.innerHTML = \"\"; // Clear zone list first\n    if (!document.getElementById(\"showVertices\")) {\n        const vertexToggle = document.createElement(\"div\");\n        vertexToggle.innerHTML = `<input type=\"checkbox\" id=\"showVertices\" checked> Show Vertices`;\n        zoneList.prepend(vertexToggle);\n        document.getElementById(\"showVertices\").addEventListener(\"change\", () => {\n            console.log(`[INFO] Show Vertices toggled: ${document.getElementById(\"showVertices\").checked} (Version 0P.7B.58g)`);\n            drawVertices();\n        });\n    }\n\n    // Fetch and display the map from zoneviewer_api_pac.py on port 5014\n    fetch(`http://192.168.210.231:5014/get_map/${selectedCampus}`)\n        .then(response => {\n            console.log(`[DEBUG] Map fetch response for /get_map/${selectedCampus} (Version 0P.7B.58g):`, response);\n            if (!response.ok) throw new Error(`Map fetch failed: ${response.status}`);\n            return response.blob();\n        })\n        .then(blob => {\n            console.log(`[DEBUG] Map blob received (Version 0P.7B.58g):`, blob);\n            mapImage = new Image();\n            mapImage.crossOrigin = \"Anonymous\";\n            mapImage.onload = () => {\n                fetch(`http://192.168.210.231:5014/get_map_metadata/${selectedCampus}`)\n                    .then(metaResponse => {\n                        console.log(`[DEBUG] Map metadata fetch response for /get_map_metadata/${selectedCampus} (Version 0P.7B.58g):`, metaResponse);\n                        if (!metaResponse.ok) throw new Error(`Metadata fetch failed: ${metaResponse.status}`);\n                        return metaResponse.json();\n                    })\n                    .then(metadata => {\n                        console.log(`[DEBUG] Map metadata (Version 0P.7B.58g):`, metadata);\n                        mapMetadata = metadata;\n                        if (metadata.min_x && metadata.max_x && metadata.min_y && metadata.max_y) {\n                            const mapWidth = metadata.max_x - metadata.min_x;\n                            const mapHeight = metadata.max_y - metadata.min_y;\n                            const canvasWidth = canvas.width;\n                            const canvasHeight = canvas.height;\n                            const scaleX = canvasWidth / mapWidth;\n                            const scaleY = canvasHeight / mapHeight;\n                            const scale = Math.min(scaleX, scaleY);\n                            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                            ctx.drawImage(mapImage, 0, 0, mapWidth * scale, mapHeight * scale);\n                        } else {\n                            ctx.drawImage(mapImage, 0, 0, canvas.width, canvas.height);\n                        }\n                        if (vertexData) drawVertices(); // Only call if vertices are loaded\n                    })\n                    .catch(metaError => console.error(`[ERROR] Fetching map metadata failed (Version 0P.7B.58g):`, metaError));\n                console.log(`[DEBUG] Map drawn on canvas (Version 0P.7B.58g).`);\n            };\n            mapImage.src = URL.createObjectURL(blob);\n        })\n        .catch(error => console.error(`[ERROR] Loading map failed (Version 0P.7B.58g):`, error));\n\n    // Fetch zones for the specific campus, matching non-pac /get_all_zones_for_campus/<campus_id>\n    fetch(`http://192.168.210.231:5014/get_campus_zones?campus_id=${campusId}`)\n        .then(response => {\n            console.log(`[DEBUG] Zones fetch response for /get_campus_zones?campus_id=${campusId} (Version 0P.7B.58g):`, response);\n            if (!response.ok) {\n                console.error(`[ERROR] Zones fetch failed: ${response.status} - ${response.statusText}`);\n                throw new Error(`Zones fetch failed: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(`[DEBUG] Zones data (Version 0P.7B.58g):`, data);\n            // Handle the response as {zones: [...]}, matching non-pac structure\n            renderZones(data); // Use global renderZones, expecting {zones: [...]}\n            console.log(`[INFO] Zones loaded successfully for campus ${campusId} (Version 0P.7B.58g).`);\n            if (mapImage && mapMetadata && vertexData) drawVertices(); // Render if all data is ready\n        })\n        .catch(error => {\n            console.error(`[ERROR] Loading zones failed (Version 0P.7B.58g):`, error);\n            if (error.message.includes('404')) {\n                console.warn(`[WARN] Zones not found for campus ${campusId}, defaulting to empty list`);\n                renderZones({ zones: [] }); // Use global renderZones for empty list, matching non-pac structure\n            }\n        });\n\n    // Fetch and display vertices from zoneviewer_api_pac.py on port 5014\n    fetch(`http://192.168.210.231:5014/get_vertices_for_campus/${campusId}`)\n        .then(response => {\n            console.log(`[DEBUG] Vertices fetch response for /get_vertices_for_campus/${campusId} (Version 0P.7B.58g):`, response);\n            if (!response.ok) {\n                console.error(`[ERROR] Vertices fetch failed: ${response.status} - ${response.statusText}`);\n                throw new Error(`Vertices fetch failed: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(responseData => {\n            console.log(`[DEBUG] Vertices data (Version 0P.7B.58g):`, responseData);\n            vertexData = responseData;\n            if (mapImage && mapMetadata) drawVertices(); // Render once vertices are loaded\n        })\n        .catch(error => {\n            console.error(`[ERROR] Loading vertices failed (Version 0P.7B.58g):`, error);\n            if (error.message.includes('404')) {\n                console.warn(`[WARN] Vertices not found for campus ${campusId}, defaulting to empty data`);\n                vertexData = { vertices: [] }; // Default to empty vertices to avoid breaking UI\n                if (mapImage && mapMetadata) drawVertices(); // Render empty vertices\n            }\n        });\n}\n\n// NEW FUNCTION: Load vertices for selected zones and populate the edit table\nfunction loadVerticesForSelectedZones() {\n    const checkedZones = Array.from(document.querySelectorAll('#zoneList input[type=\"checkbox\"]:checked'))\n        .map(cb => parseInt(cb.dataset.zoneId))\n        .filter(id => !isNaN(id));\n\n    if (checkedZones.length === 0) {\n        console.warn(`[WARN] No zones selected for vertex loading (Version 0P.7B.58g).`);\n        alert(\"Please select at least one zone to load vertices.\");\n        return;\n    }\n\n    console.log(`[INFO] Loading vertices for zones:`, checkedZones);\n    const vertexTableBody = document.querySelector(\"#vertexTable tbody\");\n    vertexTableBody.innerHTML = \"\"; // Clear existing rows\n\n    checkedZones.forEach((zoneId, zoneIndex) => {\n        const verticesForZone = vertexData.vertices\n            .filter(v => parseInt(v.zone_id) === zoneId)\n            .sort((a, b) => a.order - b.order);\n\n        verticesForZone.forEach((vertex, index) => {\n            const row = document.createElement(\"tr\");\n            const vertexNum = zoneIndex * 100 + (index + 1); // Unique vertex number across zones (e.g., 101, 102 for zone 1)\n            row.innerHTML = `\n                <td>${vertexNum}</td>\n                <td><input type=\"number\" value=\"${vertex.x}\" data-field=\"x\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.y}\" data-field=\"y\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><input type=\"number\" value=\"${vertex.z || 0}\" data-field=\"z\" data-vertex-id=\"${vertex.vertex_id}\"></td>\n                <td><button disabled>Save</button></td> <!-- Individual save buttons disabled for now -->\n            `;\n            vertexTableBody.appendChild(row);\n        });\n    });\n\n    drawVertices(); // Refresh the map with current vertex data\n}\n\n// NEW FUNCTION: Save all edited vertices to the backend\nfunction saveAllVertices() {\n    const rows = document.querySelectorAll(\"#vertexTable tbody tr\");\n    const updatedVertices = Array.from(rows).map(row => {\n        const vertexId = row.querySelector('input[data-field=\"x\"]').dataset.vertexId;\n        return {\n            vertex_id: parseInt(vertexId),\n            x: parseFloat(row.querySelector('input[data-field=\"x\"]').value),\n            y: parseFloat(row.querySelector('input[data-field=\"y\"]').value),\n            z: parseFloat(row.querySelector('input[data-field=\"z\"]').value)\n        };\n    });\n\n    console.log(`[INFO] Saving updated vertices:`, updatedVertices);\n\n    fetch('http://192.168.210.231:5014/update_vertices', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ vertices: updatedVertices })\n    })\n        .then(response => {\n            if (!response.ok) throw new Error(`Failed to save vertices: ${response.status}`);\n            return response.json();\n        })\n        .then(data => {\n            console.log(`[INFO] Vertices saved successfully:`, data);\n            // Update local vertexData with the new values\n            updatedVertices.forEach(updated => {\n                const vertex = vertexData.vertices.find(v => v.vertex_id === updated.vertex_id);\n                if (vertex) {\n                    vertex.x = updated.x;\n                    vertex.y = updated.y;\n                    vertex.z = updated.z;\n                }\n            });\n            drawVertices(); // Refresh the map with updated vertices\n            alert(\"Vertices updated successfully!\");\n        })\n        .catch(error => {\n            console.error(`[ERROR] Failed to save vertices:`, error);\n            alert(\"Error saving vertices. Check console for details.\");\n        });\n}\n\n// Export all required functions for ES module usage\nexport { loadCampusMap, loadCampuses, loadVerticesForSelectedZones, saveAllVertices, renderZones }; // Export renderZones globally"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}