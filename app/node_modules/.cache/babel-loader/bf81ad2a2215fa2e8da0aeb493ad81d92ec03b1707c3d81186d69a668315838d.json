{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\",\n  _s = $RefreshSig$();\n/// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapZoneBuilder = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor,\n  useLeaflet\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n\n  // ✅ Fetch Map Data from FastAPI\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/zonebuilder/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"✅ Map data fetched (ZoneBuilder):\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"❌ Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId]);\n\n  // 🖌 **Canvas Rendering for Zone Drawing**\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      console.log(\"🖌 Restoring Canvas rendering...\");\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n      canvas.width = 800;\n      canvas.height = 600;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"✅ Canvas: Map image loaded successfully\", mapData.imageUrl);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      };\n      img.onerror = () => {\n        console.error(\"❌ Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n      const handleMouseDown = e => {\n        if (e.button === 0) {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]);\n          const scaleY = canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]);\n          const x = mapData.bounds[0][1] + (e.clientX - rect.left) / scaleX;\n          const y = mapData.bounds[1][0] - (e.clientY - rect.top) / scaleY;\n          points.current.push({\n            x,\n            y\n          });\n          console.log(\"🖱 Click registered at (feet):\", {\n            x,\n            y\n          });\n          drawPolygon(points.current);\n          onDrawComplete([...points.current]);\n        }\n      };\n      const drawPolygon = feetPoints => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        if (feetPoints.length === 0) return;\n        ctx.beginPath();\n        feetPoints.forEach((point, index) => {\n          const x = (point.x - mapData.bounds[0][1]) * scaleX;\n          const y = canvas.height - (point.y - mapData.bounds[0][0]) * scaleY;\n          if (index === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n\n          // ✅ Draw small dots at each vertex\n          ctx.fillStyle = \"red\";\n          ctx.beginPath();\n          ctx.arc(x, y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n        });\n        ctx.closePath();\n        ctx.strokeStyle = triggerColor || \"red\";\n        ctx.stroke();\n      };\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      return () => {\n        canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      };\n    }\n  }, [mapData, useLeaflet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"map\",\n      style: {\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}, \"vepcV24Cw1lwC+jmzUdWENsh4aI=\")), \"vepcV24Cw1lwC+jmzUdWENsh4aI=\");\n_c2 = MapZoneBuilder;\nexport default MapZoneBuilder;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapZoneBuilder$memo\");\n$RefreshReg$(_c2, \"MapZoneBuilder\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","MapZoneBuilder","_s","_c","zoneId","onDrawComplete","triggerColor","useLeaflet","mapRef","mapInstance","drawnItems","FeatureGroup","canvasRef","mapData","setMapData","error","setError","isInitialized","points","ctxRef","imageRef","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","onerror","handleMouseDown","e","button","rect","getBoundingClientRect","scaleX","bounds","scaleY","x","clientX","left","y","clientY","top","push","drawPolygon","feetPoints","clearRect","length","beginPath","forEach","point","index","moveTo","lineTo","fillStyle","arc","Math","PI","fill","closePath","strokeStyle","stroke","addEventListener","removeEventListener","children","style","color","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","id","border","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js"],"sourcesContent":["/// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\n\nconst MapZoneBuilder = memo(({ zoneId, onDrawComplete, triggerColor, useLeaflet }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n\n  // ✅ Fetch Map Data from FastAPI\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/zonebuilder/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"✅ Map data fetched (ZoneBuilder):\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"❌ Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId]);\n\n  // 🖌 **Canvas Rendering for Zone Drawing**\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      console.log(\"🖌 Restoring Canvas rendering...\");\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      canvas.width = 800;\n      canvas.height = 600;\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n\n      img.onload = () => {\n        console.log(\"✅ Canvas: Map image loaded successfully\", mapData.imageUrl);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      };\n\n      img.onerror = () => {\n        console.error(\"❌ Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n\n      const handleMouseDown = (e) => {\n        if (e.button === 0) {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]);\n          const scaleY = canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]);\n\n          const x = mapData.bounds[0][1] + ((e.clientX - rect.left) / scaleX);\n          const y = mapData.bounds[1][0] - ((e.clientY - rect.top) / scaleY);\n\n          points.current.push({ x, y });\n          console.log(\"🖱 Click registered at (feet):\", { x, y });\n\n          drawPolygon(points.current);\n          onDrawComplete([...points.current]);\n        }\n      };\n\n      const drawPolygon = (feetPoints) => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        if (feetPoints.length === 0) return;\n\n        ctx.beginPath();\n\n        feetPoints.forEach((point, index) => {\n          const x = (point.x - mapData.bounds[0][1]) * scaleX;\n          const y = canvas.height - ((point.y - mapData.bounds[0][0]) * scaleY);\n\n          if (index === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n\n          // ✅ Draw small dots at each vertex\n          ctx.fillStyle = \"red\";\n          ctx.beginPath();\n          ctx.arc(x, y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n        });\n\n        ctx.closePath();\n        ctx.strokeStyle = triggerColor || \"red\";\n        ctx.stroke();\n      };\n\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      return () => {\n        canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      };\n    }\n  }, [mapData, useLeaflet]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n    </div>\n  );\n});\n\nexport default MapZoneBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}