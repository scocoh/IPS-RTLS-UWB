{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport \"./TriggerDemo.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TriggerDemo = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(null); // Store map_id\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false\n  });\n  const [error, setError] = useState(null);\n  const [showMapForDrawing, setShowMapForDrawing] = useState(false);\n  const [useLeaflet, setUseLeaflet] = useState(false); // Toggle between Canvas and Leaflet\n\n  // Fetch data helper\n  const fetchData = async (url, setter, key, transform = data => data) => {\n    setLoading(prev => ({\n      ...prev,\n      [key]: true\n    }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n      setError(null);\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n      setError(`Error fetching ${key}: ${error.message}`);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [key]: false\n      }));\n    }\n  };\n\n  // Fetch initial data\n  useEffect(() => {\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", data => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Flatten zones hierarchy\n  const flattenZones = zones => {\n    const result = [];\n    const flatten = zone => {\n      result.push(zone);\n      if (zone.children && zone.children.length > 0) {\n        zone.children.forEach(child => flatten(child));\n      }\n    };\n    zones.forEach(zone => flatten(zone));\n    return result;\n  };\n\n  // Update zones and fetch map_id when a parent zone is selected\n  useEffect(() => {\n    if (selectedParentZone) {\n      const zoneId = parseInt(selectedParentZone);\n      fetchData(`/maps/get_campus_zones/${zoneId}`, data => {\n        const flattenedZones = flattenZones(data.zones || []);\n        setZones(flattenedZones);\n      }, \"zones\");\n    }\n  }, [selectedParentZone]);\n\n  // Fetch map_id when a zone is selected\n  useEffect(() => {\n    if (selectedZone) {\n      fetch(`/maps/get_map_data/${selectedZone}`).then(response => response.json()).then(data => {\n        setSelectedMapId(data.map_id || selectedZone); // Fallback to zoneId if map_id not provided\n      }).catch(error => console.error(\"Error fetching map data:\", error));\n    }\n  }, [selectedZone]);\n\n  // Memoized handleCreateTrigger to prevent unnecessary re-renders\n  const handleCreateTrigger = useCallback(async () => {\n    if (!triggerName || !selectedZone || !triggerDirection) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Direction).\");\n      return;\n    }\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n    console.log(\"Current coordinates before save:\", coordinates); // Debug log\n    if (!coordinates) {\n      alert(\"Please draw the trigger on the map (click to add points, double-click to finish).\");\n      return;\n    }\n\n    // Find the direction ID (i_dir) from the selected direction string\n    const selectedDirectionObj = triggerDirections.find(dir => dir.x_dir === triggerDirection);\n    const directionId = selectedDirectionObj ? selectedDirectionObj.i_dir : null;\n    if (!directionId) {\n      alert(\"Invalid direction selected.\");\n      return;\n    }\n    const triggerData = {\n      name: triggerName,\n      direction: directionId,\n      zone_id: parseInt(selectedZone),\n      ignore: true,\n      coordinates: JSON.parse(coordinates)\n    };\n    console.log(\"Sending triggerData to /api/add_trigger:\", triggerData);\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(triggerData)\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n      setShowMapForDrawing(false);\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  }, [triggerName, selectedZone, triggerDirection, coordinates, showMapForDrawing, triggerDirections]);\n\n  // Memoized onDrawComplete to prevent re-renders\n  const handleDrawComplete = useCallback(coords => {\n    setCoordinates(coords);\n  }, []);\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\")).map(cb => parseInt(cb.value)).filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n    setLoading(prev => ({\n      ...prev,\n      vertices: true\n    }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId => fetch(`/api/get_zone_vertices/${zoneId}`).then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      }).then(data => data.vertices || []));\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({\n        ...acc,\n        [v.i_vtx]: v\n      }), {}));\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        vertices: false\n      }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: {\n        ...prev[vertexId],\n        [field]: parseFloat(value) || 0\n      }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.i_vtx,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n    console.log(\"Sending vertices to /api/update_vertices:\", updatedVertices); // Debug log\n\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedVertices) // Send list directly\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", data => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map(direction => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: direction.x_dir,\n      children: direction.x_dir\n    }, direction.i_dir, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this));\n  }, [triggerDirections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ParcoRTLS Trigger Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"mapAndTrigger\",\n      id: \"trigger-demo-tabs\",\n      children: /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"mapAndTrigger\",\n        title: \"Map & Trigger\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trigger-map-section\",\n          children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trigger-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Trigger Name\",\n              value: triggerName,\n              onChange: e => setTriggerName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedParentZone,\n              onChange: e => setSelectedParentZone(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Parent Zone\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this), loading.parentZones ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this) : parentZones.map(pz => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pz.zone_id.toString(),\n                children: pz.name\n              }, pz.zone_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerDirection,\n              onChange: e => setTriggerDirection(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Direction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 17\n              }, this), loading.triggerDirections ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 19\n              }, this) : directionOptions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Top Elevation (Zmax)\",\n              value: topElevation,\n              onChange: e => setTopElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Bottom Elevation (Zmin)\",\n              value: bottomElevation,\n              onChange: e => setBottomElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerColor,\n              onChange: e => setTriggerColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"red\",\n                children: \"Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"green\",\n                children: \"Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"blue\",\n                children: \"Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Render with Leaflet:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: useLeaflet,\n                onChange: e => setUseLeaflet(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCreateTrigger,\n              children: showMapForDrawing ? \"Save Trigger\" : \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Select a Zone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"zoneList\",\n              children: loading.zones ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Loading zones...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this) : zones.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No zones available for this parent zone.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this) : zones.map(zone => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  value: zone.zone_id.toString(),\n                  checked: selectedZone === zone.zone_id.toString(),\n                  onChange: e => setSelectedZone(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: zone.zone_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 23\n                }, this)]\n              }, zone.zone_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this), showMapForDrawing && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: \"blue\",\n                  margin: \"10px 0\"\n                },\n                children: \"Click to add points, double-click to finish the trigger shape.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Map, {\n                zoneId: parseInt(selectedZone),\n                onDrawComplete: handleDrawComplete,\n                triggerColor: triggerColor,\n                useLeaflet: useLeaflet // Pass the toggle state\n              }, selectedZone, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edit Trigger Vertices\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"vertexTable\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Vertex #\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"X Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Y Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Z Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.values(editedVertices).map((v, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: i + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.x || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"x\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.y || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"y\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.z || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"z\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 21\n                }, this)]\n              }, v.i_vtx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loadVerticesForSelectedZones,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveAllVertices,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Saving...\" : \"Save All Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(TriggerDemo, \"ZwoJR3fgdbxV6gT9zaq+E7h/JRI=\");\n_c = TriggerDemo;\nexport default TriggerDemo;\nvar _c;\n$RefreshReg$(_c, \"TriggerDemo\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Tabs","Tab","Map","jsxDEV","_jsxDEV","Fragment","_Fragment","TriggerDemo","_s","maps","setMaps","zones","setZones","triggerDirections","setTriggerDirections","selectedZone","setSelectedZone","selectedMapId","setSelectedMapId","triggerName","setTriggerName","triggerDirection","setTriggerDirection","topElevation","setTopElevation","bottomElevation","setBottomElevation","triggerColor","setTriggerColor","eventList","setEventList","coordinates","setCoordinates","parentZones","setParentZones","selectedParentZone","setSelectedParentZone","vertices","setVertices","editedVertices","setEditedVertices","loading","setLoading","error","setError","showMapForDrawing","setShowMapForDrawing","useLeaflet","setUseLeaflet","fetchData","url","setter","key","transform","data","prev","response","fetch","ok","text","Error","status","json","console","log","message","flattenZones","result","flatten","zone","push","children","length","forEach","child","zoneId","parseInt","flattenedZones","then","map_id","catch","handleCreateTrigger","alert","selectedDirectionObj","find","dir","x_dir","directionId","i_dir","triggerData","name","direction","zone_id","ignore","JSON","parse","method","headers","body","stringify","trigger_id","handleDrawComplete","coords","loadVerticesForSelectedZones","checkedZones","Array","from","document","querySelectorAll","map","cb","value","filter","id","isNaN","vertexPromises","allVertices","Promise","all","flat","reduce","acc","v","i_vtx","handleVertexChange","vertexId","field","parseFloat","saveAllVertices","updatedVertices","Object","values","vertex_id","x","y","z","directionOptions","fileName","_jsxFileName","lineNumber","columnNumber","defaultActiveKey","eventKey","title","className","style","color","type","placeholder","onChange","e","target","pz","toString","Number","checked","onClick","zone_name","margin","onDrawComplete","i","disabled","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport \"./TriggerDemo.css\";\n\nconst TriggerDemo = () => {\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(null); // Store map_id\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false,\n  });\n  const [error, setError] = useState(null);\n  const [showMapForDrawing, setShowMapForDrawing] = useState(false);\n  const [useLeaflet, setUseLeaflet] = useState(false); // Toggle between Canvas and Leaflet\n\n  // Fetch data helper\n  const fetchData = async (url, setter, key, transform = (data) => data) => {\n    setLoading((prev) => ({ ...prev, [key]: true }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n      setError(null);\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n      setError(`Error fetching ${key}: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, [key]: false }));\n    }\n  };\n\n  // Fetch initial data\n  useEffect(() => {\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", (data) => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Flatten zones hierarchy\n  const flattenZones = (zones) => {\n    const result = [];\n    const flatten = (zone) => {\n      result.push(zone);\n      if (zone.children && zone.children.length > 0) {\n        zone.children.forEach(child => flatten(child));\n      }\n    };\n    zones.forEach(zone => flatten(zone));\n    return result;\n  };\n\n  // Update zones and fetch map_id when a parent zone is selected\n  useEffect(() => {\n    if (selectedParentZone) {\n      const zoneId = parseInt(selectedParentZone);\n      fetchData(`/maps/get_campus_zones/${zoneId}`, (data) => {\n        const flattenedZones = flattenZones(data.zones || []);\n        setZones(flattenedZones);\n      }, \"zones\");\n    }\n  }, [selectedParentZone]);\n\n  // Fetch map_id when a zone is selected\n  useEffect(() => {\n    if (selectedZone) {\n      fetch(`/maps/get_map_data/${selectedZone}`)\n        .then(response => response.json())\n        .then(data => {\n          setSelectedMapId(data.map_id || selectedZone); // Fallback to zoneId if map_id not provided\n        })\n        .catch(error => console.error(\"Error fetching map data:\", error));\n    }\n  }, [selectedZone]);\n\n  // Memoized handleCreateTrigger to prevent unnecessary re-renders\n  const handleCreateTrigger = useCallback(async () => {\n    if (!triggerName || !selectedZone || !triggerDirection) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Direction).\");\n      return;\n    }\n\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n\n    console.log(\"Current coordinates before save:\", coordinates); // Debug log\n    if (!coordinates) {\n      alert(\"Please draw the trigger on the map (click to add points, double-click to finish).\");\n      return;\n    }\n\n    // Find the direction ID (i_dir) from the selected direction string\n    const selectedDirectionObj = triggerDirections.find(dir => dir.x_dir === triggerDirection);\n    const directionId = selectedDirectionObj ? selectedDirectionObj.i_dir : null;\n\n    if (!directionId) {\n      alert(\"Invalid direction selected.\");\n      return;\n    }\n\n    const triggerData = {\n      name: triggerName,\n      direction: directionId,\n      zone_id: parseInt(selectedZone),\n      ignore: true,\n      coordinates: JSON.parse(coordinates),\n    };\n\n    console.log(\"Sending triggerData to /api/add_trigger:\", triggerData);\n\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(triggerData),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n      setShowMapForDrawing(false);\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  }, [triggerName, selectedZone, triggerDirection, coordinates, showMapForDrawing, triggerDirections]);\n\n  // Memoized onDrawComplete to prevent re-renders\n  const handleDrawComplete = useCallback((coords) => {\n    setCoordinates(coords);\n  }, []);\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\"))\n      .map(cb => parseInt(cb.value))\n      .filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n\n    setLoading((prev) => ({ ...prev, vertices: true }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId =>\n        fetch(`/api/get_zone_vertices/${zoneId}`)\n          .then(response => {\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            return response.json();\n          })\n          .then(data => data.vertices || [])\n      );\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({ ...acc, [v.i_vtx]: v }), {}));\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, vertices: false }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: { ...prev[vertexId], [field]: parseFloat(value) || 0 }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.i_vtx,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n\n    console.log(\"Sending vertices to /api/update_vertices:\", updatedVertices); // Debug log\n\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updatedVertices), // Send list directly\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", (data) => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map((direction) => (\n      <option key={direction.i_dir} value={direction.x_dir}>\n        {direction.x_dir}\n      </option>\n    ));\n  }, [triggerDirections]);\n\n  return (\n    <div>\n      <h1>ParcoRTLS Trigger Management</h1>\n      <Tabs defaultActiveKey=\"mapAndTrigger\" id=\"trigger-demo-tabs\">\n        <Tab eventKey=\"mapAndTrigger\" title=\"Map & Trigger\">\n          <div className=\"trigger-map-section\">\n            {error && <div style={{ color: \"red\" }}>{error}</div>}\n            <div className=\"trigger-form\">\n              <h3>Create Trigger</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Trigger Name\"\n                value={triggerName}\n                onChange={(e) => setTriggerName(e.target.value)}\n              />\n              <select value={selectedParentZone} onChange={(e) => setSelectedParentZone(e.target.value)}>\n                <option value=\"\">Select Parent Zone</option>\n                {loading.parentZones ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  parentZones.map((pz) => (\n                    <option key={pz.zone_id} value={pz.zone_id.toString()}>\n                      {pz.name}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={triggerDirection} onChange={(e) => setTriggerDirection(e.target.value)}>\n                <option value=\"\">Select Direction</option>\n                {loading.triggerDirections ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  directionOptions\n                )}\n              </select>\n              <input\n                type=\"number\"\n                placeholder=\"Top Elevation (Zmax)\"\n                value={topElevation}\n                onChange={(e) => setTopElevation(Number(e.target.value))}\n              />\n              <input\n                type=\"number\"\n                placeholder=\"Bottom Elevation (Zmin)\"\n                value={bottomElevation}\n                onChange={(e) => setBottomElevation(Number(e.target.value))}\n              />\n              <select value={triggerColor} onChange={(e) => setTriggerColor(e.target.value)}>\n                <option value=\"red\">Red</option>\n                <option value=\"green\">Green</option>\n                <option value=\"blue\">Blue</option>\n              </select>\n              <label>\n                Render with Leaflet:\n                <input\n                  type=\"checkbox\"\n                  checked={useLeaflet}\n                  onChange={(e) => setUseLeaflet(e.target.checked)}\n                />\n              </label>\n              <button onClick={handleCreateTrigger}>\n                {showMapForDrawing ? \"Save Trigger\" : \"Create Trigger\"}\n              </button>\n            </div>\n            <div className=\"map-selection\">\n              <h3>Select a Zone</h3>\n              <div id=\"zoneList\">\n                {loading.zones ? (\n                  <p>Loading zones...</p>\n                ) : zones.length === 0 ? (\n                  <p>No zones available for this parent zone.</p>\n                ) : (\n                  zones.map((zone) => (\n                    <div key={zone.zone_id}>\n                      <input\n                        type=\"checkbox\"\n                        value={zone.zone_id.toString()}\n                        checked={selectedZone === zone.zone_id.toString()}\n                        onChange={(e) => setSelectedZone(e.target.value)}\n                      />\n                      <span>{zone.zone_name}</span>\n                    </div>\n                  ))\n                )}\n              </div>\n              {showMapForDrawing && (\n                <>\n                  <div style={{ color: \"blue\", margin: \"10px 0\" }}>\n                    Click to add points, double-click to finish the trigger shape.\n                  </div>\n                  <Map\n                    key={selectedZone}\n                    zoneId={parseInt(selectedZone)}\n                    onDrawComplete={handleDrawComplete}\n                    triggerColor={triggerColor}\n                    useLeaflet={useLeaflet} // Pass the toggle state\n                  />\n                </>\n              )}\n            </div>\n            <h3>Edit Trigger Vertices</h3>\n            <table id=\"vertexTable\">\n              <thead>\n                <tr>\n                  <th>Vertex #</th>\n                  <th>X Coordinate</th>\n                  <th>Y Coordinate</th>\n                  <th>Z Coordinate</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.values(editedVertices).map((v, i) => (\n                  <tr key={v.i_vtx}>\n                    <td>{i + 1}</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.x || 0}\n                        onChange={(e) => handleVertexChange(v.i_vtx, \"x\", e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.y || 0}\n                        onChange={(e) => handleVertexChange(v.i_vtx, \"y\", e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.z || 0}\n                        onChange={(e) => handleVertexChange(v.i_vtx, \"z\", e.target.value)}\n                      />\n                    </td>\n                    <td>\n                      <button>Save</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button onClick={loadVerticesForSelectedZones} disabled={loading.vertices}>\n              {loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"}\n            </button>\n            <button onClick={saveAllVertices} disabled={loading.vertices}>\n              {loading.vertices ? \"Saving...\" : \"Save All Changes\"}\n            </button>\n          </div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TriggerDemo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}