{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\nimport \"./Map.css\"; // Canvas styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor,\n  useLeaflet\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0); // For debouncing double-click\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Canvas rendering logic\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n      canvas.width = 600;\n      canvas.height = 500;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"Canvas: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        const getCanvasCoordinates = e => {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / rect.width;\n          const scaleY = canvas.height / rect.height;\n          const x = (e.clientX - rect.left) * scaleX;\n          const y = (e.clientY - rect.top) * scaleY;\n          console.log(\"Raw click coordinates:\", {\n            x,\n            y\n          });\n          return {\n            x,\n            y\n          };\n        };\n        const drawPolygon = (points, currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) ctx.lineTo(currentPoint.x, currentPoint.y);\n          if (close) ctx.closePath();\n          ctx.strokeStyle = triggerColor || \"red\";\n          ctx.stroke();\n          points.forEach(point => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = triggerColor || \"red\";\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n        const scalePoints = points => {\n          const xMin = mapData.bounds[0][1]; // -80\n          const xMax = mapData.bounds[1][1]; // 160\n          const yMin = mapData.bounds[0][0]; // -40\n          const yMax = mapData.bounds[1][0]; // 160\n          const xRange = xMax - xMin; // 240\n          const yRange = yMax - yMin; // 200\n          const canvasWidth = canvas.width; // 600\n          const canvasHeight = canvas.height; // 500\n\n          return points.map((point, index) => {\n            const x = xMin + point.x / canvasWidth * xRange;\n            const y = yMax - point.y / canvasHeight * yRange; // Flipped y-axis\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          }).filter((point, index, self) => index === self.findIndex(p => p.n_x === point.n_x && p.n_y === point.n_y));\n        };\n        const handleMouseDown = e => {\n          if (e.button === 0) {\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            if (points.current.length === 0 || Math.hypot(point.x - points.current[points.current.length - 1].x, point.y - points.current[points.current.length - 1].y) > 5) {\n              points.current.push(point);\n              drawPolygon(points.current);\n            }\n          }\n        };\n        const handleMouseMove = e => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, point);\n          }\n        };\n        const handleMouseUp = e => {\n          if (e.button === 0) isDrawing.current = false;\n        };\n        const handleDoubleClick = e => {\n          const now = Date.now();\n          if (now - lastClickTime.current < 500) return;\n          lastClickTime.current = now;\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points (Canvas):\", scaledPoints);\n            if (onDrawComplete) onDrawComplete(JSON.stringify(scaledPoints));\n            points.current = [];\n          }\n        };\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet]);\n\n  // Leaflet rendering logic\n  useEffect(() => {\n    if (mapData && mapRef.current && useLeaflet && !isInitialized.current) {\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple,\n        minZoom: -5,\n        maxZoom: 5,\n        zoomControl: true,\n        attributionControl: false\n      });\n      mapInstance.current.eachLayer(layer => {\n        if (layer instanceof L.TileLayer) mapInstance.current.removeLayer(layer);\n      });\n      const boundsFromApi = [[mapData.bounds[0][1], mapData.bounds[0][0]],\n      // [xMin, yMin] = [-80, -40]\n      [mapData.bounds[1][1], mapData.bounds[1][0]] // [xMax, yMax] = [160, 160]\n      ];\n      const xMin = boundsFromApi[0][0]; // -80\n      const xMax = boundsFromApi[1][0]; // 160\n      const yMin = boundsFromApi[0][1]; // -40\n      const yMax = boundsFromApi[1][1]; // 160\n      const xRange = xMax - xMin; // 240\n      const yRange = yMax - yMin; // 200\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      img.onload = () => {\n        console.log(\"Leaflet: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        const pixelBounds = [[0, 0],\n        // Bottom-left in pixel coordinates\n        [600, 500] // Top-right in pixel coordinates (matching canvas size)\n        ];\n\n        // Use the correct bounds for the image overlay\n        L.imageOverlay(mapData.imageUrl, [[yMin, xMin],\n        // Bottom-left in logical coordinates\n        [yMax, xMax] // Top-right in logical coordinates\n        ]).addTo(mapInstance.current);\n        mapInstance.current.fitBounds([[yMin, xMin], [yMax, xMax]]);\n        mapInstance.current.addLayer(drawnItems.current);\n        const colorMap = {\n          red: \"#ff0000\",\n          green: \"#00ff00\",\n          blue: \"#0000ff\"\n        };\n        const drawControl = new L.Control.Draw({\n          edit: {\n            featureGroup: drawnItems.current\n          },\n          draw: {\n            polygon: {\n              shapeOptions: {\n                color: colorMap[triggerColor] || \"#ff0000\",\n                weight: 2\n              }\n            },\n            rectangle: false,\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false\n          }\n        });\n        mapInstance.current.addControl(drawControl);\n        mapInstance.current.on(L.Draw.Event.CREATED, event => {\n          const layer = event.layer;\n          drawnItems.current.addLayer(layer);\n          const coords = layer.getLatLngs()[0].map((latLng, index) => {\n            console.log(`Raw latLng for point ${index + 1}:`, {\n              lat: latLng.lat,\n              lng: latLng.lng\n            });\n            // Normalize latLng to logical coordinates directly\n            const x = xMin + latLng.lng / 600 * xRange; // Map lng to [-80, 160]\n            const y = yMax - latLng.lat / 500 * yRange; // Map lat to [-40, 160], flipped\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          });\n          console.log(\"Scaled points (Leaflet):\", coords);\n          if (onDrawComplete) onDrawComplete(JSON.stringify(coords));\n        });\n        isInitialized.current = true;\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false;\n      }\n      if (mapData && imageRef.current) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData]);\n  if (useLeaflet) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginBottom: \"10px\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          height: \"500px\",\n          width: \"600px\",\n          border: \"2px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginBottom: \"10px\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        id: \"map\",\n        style: {\n          border: \"2px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this);\n  }\n}, \"byg4eIe6jqT7PeaoHAUHZDfv6P8=\")), \"byg4eIe6jqT7PeaoHAUHZDfv6P8=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"Map$memo\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","Map","_s","_c","zoneId","onDrawComplete","triggerColor","useLeaflet","mapRef","mapInstance","drawnItems","FeatureGroup","canvasRef","mapData","setMapData","error","setError","isInitialized","points","isDrawing","ctxRef","imageRef","lastClickTime","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","getCanvasCoordinates","e","rect","getBoundingClientRect","scaleX","scaleY","x","clientX","left","y","clientY","top","drawPolygon","currentPoint","close","clearRect","length","beginPath","moveTo","i","lineTo","closePath","strokeStyle","stroke","forEach","point","arc","Math","PI","fillStyle","fill","scalePoints","xMin","bounds","xMax","yMin","yMax","xRange","yRange","canvasWidth","canvasHeight","map","index","n_x","n_y","n_z","n_ord","filter","self","findIndex","p","handleMouseDown","button","hypot","push","handleMouseMove","handleMouseUp","handleDoubleClick","now","Date","scaledPoints","JSON","stringify","addEventListener","removeEventListener","onerror","crs","CRS","Simple","minZoom","maxZoom","zoomControl","attributionControl","eachLayer","layer","TileLayer","removeLayer","boundsFromApi","pixelBounds","imageOverlay","addTo","fitBounds","addLayer","colorMap","red","green","blue","drawControl","Control","Draw","edit","featureGroup","draw","polygon","shapeOptions","color","weight","rectangle","polyline","circle","marker","circlemarker","addControl","on","Event","CREATED","event","coords","getLatLngs","latLng","lat","lng","remove","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","id","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\nimport \"./Map.css\"; // Canvas styling\n\nconst Map = memo(({ zoneId, onDrawComplete, triggerColor, useLeaflet }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0); // For debouncing double-click\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Canvas rendering logic\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      canvas.width = 600;\n      canvas.height = 500;\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n\n      img.onload = () => {\n        console.log(\"Canvas: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        const getCanvasCoordinates = (e) => {\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / rect.width;\n          const scaleY = canvas.height / rect.height;\n          const x = (e.clientX - rect.left) * scaleX;\n          const y = (e.clientY - rect.top) * scaleY;\n          console.log(\"Raw click coordinates:\", { x, y });\n          return { x, y };\n        };\n\n        const drawPolygon = (points, currentPoint = null, close = false) => {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          if (points.length === 0) return;\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (let i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          if (currentPoint) ctx.lineTo(currentPoint.x, currentPoint.y);\n          if (close) ctx.closePath();\n          ctx.strokeStyle = triggerColor || \"red\";\n          ctx.stroke();\n          points.forEach((point) => {\n            ctx.beginPath();\n            ctx.arc(point.x, point.y, 5, 0, Math.PI * 2);\n            ctx.fillStyle = triggerColor || \"red\";\n            ctx.fill();\n            ctx.closePath();\n          });\n        };\n\n        const scalePoints = (points) => {\n          const xMin = mapData.bounds[0][1]; // -80\n          const xMax = mapData.bounds[1][1]; // 160\n          const yMin = mapData.bounds[0][0]; // -40\n          const yMax = mapData.bounds[1][0]; // 160\n          const xRange = xMax - xMin; // 240\n          const yRange = yMax - yMin; // 200\n          const canvasWidth = canvas.width; // 600\n          const canvasHeight = canvas.height; // 500\n\n          return points.map((point, index) => {\n            const x = xMin + (point.x / canvasWidth) * xRange;\n            const y = yMax - (point.y / canvasHeight) * yRange; // Flipped y-axis\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          }).filter((point, index, self) =>\n            index === self.findIndex((p) => p.n_x === point.n_x && p.n_y === point.n_y)\n          );\n        };\n\n        const handleMouseDown = (e) => {\n          if (e.button === 0) {\n            isDrawing.current = true;\n            const point = getCanvasCoordinates(e);\n            if (points.current.length === 0 || \n                Math.hypot(point.x - points.current[points.current.length - 1].x, \n                          point.y - points.current[points.current.length - 1].y) > 5) {\n              points.current.push(point);\n              drawPolygon(points.current);\n            }\n          }\n        };\n\n        const handleMouseMove = (e) => {\n          if (isDrawing.current) {\n            const point = getCanvasCoordinates(e);\n            drawPolygon(points.current, point);\n          }\n        };\n\n        const handleMouseUp = (e) => {\n          if (e.button === 0) isDrawing.current = false;\n        };\n\n        const handleDoubleClick = (e) => {\n          const now = Date.now();\n          if (now - lastClickTime.current < 500) return;\n          lastClickTime.current = now;\n          isDrawing.current = false;\n          if (points.current.length >= 3) {\n            drawPolygon(points.current, null, true);\n            const scaledPoints = scalePoints(points.current);\n            console.log(\"Scaled points (Canvas):\", scaledPoints);\n            if (onDrawComplete) onDrawComplete(JSON.stringify(scaledPoints));\n            points.current = [];\n          }\n        };\n\n        canvas.addEventListener(\"mousedown\", handleMouseDown);\n        canvas.addEventListener(\"mousemove\", handleMouseMove);\n        canvas.addEventListener(\"mouseup\", handleMouseUp);\n        canvas.addEventListener(\"dblclick\", handleDoubleClick);\n\n        return () => {\n          canvas.removeEventListener(\"mousedown\", handleMouseDown);\n          canvas.removeEventListener(\"mousemove\", handleMouseMove);\n          canvas.removeEventListener(\"mouseup\", handleMouseUp);\n          canvas.removeEventListener(\"dblclick\", handleDoubleClick);\n        };\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet]);\n\n  // Leaflet rendering logic\n  useEffect(() => {\n    if (mapData && mapRef.current && useLeaflet && !isInitialized.current) {\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple,\n        minZoom: -5,\n        maxZoom: 5,\n        zoomControl: true,\n        attributionControl: false,\n      });\n\n      mapInstance.current.eachLayer((layer) => {\n        if (layer instanceof L.TileLayer) mapInstance.current.removeLayer(layer);\n      });\n\n      const boundsFromApi = [\n        [mapData.bounds[0][1], mapData.bounds[0][0]], // [xMin, yMin] = [-80, -40]\n        [mapData.bounds[1][1], mapData.bounds[1][0]], // [xMax, yMax] = [160, 160]\n      ];\n      const xMin = boundsFromApi[0][0]; // -80\n      const xMax = boundsFromApi[1][0]; // 160\n      const yMin = boundsFromApi[0][1]; // -40\n      const yMax = boundsFromApi[1][1]; // 160\n      const xRange = xMax - xMin; // 240\n      const yRange = yMax - yMin; // 200\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n\n      img.onload = () => {\n        console.log(\"Leaflet: Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n        const pixelBounds = [\n          [0, 0], // Bottom-left in pixel coordinates\n          [600, 500], // Top-right in pixel coordinates (matching canvas size)\n        ];\n\n        // Use the correct bounds for the image overlay\n        L.imageOverlay(mapData.imageUrl, [\n          [yMin, xMin], // Bottom-left in logical coordinates\n          [yMax, xMax], // Top-right in logical coordinates\n        ]).addTo(mapInstance.current);\n        mapInstance.current.fitBounds([\n          [yMin, xMin],\n          [yMax, xMax],\n        ]);\n\n        mapInstance.current.addLayer(drawnItems.current);\n\n        const colorMap = {\n          red: \"#ff0000\",\n          green: \"#00ff00\",\n          blue: \"#0000ff\",\n        };\n\n        const drawControl = new L.Control.Draw({\n          edit: { featureGroup: drawnItems.current },\n          draw: {\n            polygon: {\n              shapeOptions: { color: colorMap[triggerColor] || \"#ff0000\", weight: 2 },\n            },\n            rectangle: false,\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n          },\n        });\n        mapInstance.current.addControl(drawControl);\n\n        mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n          const layer = event.layer;\n          drawnItems.current.addLayer(layer);\n          const coords = layer.getLatLngs()[0].map((latLng, index) => {\n            console.log(`Raw latLng for point ${index + 1}:`, { lat: latLng.lat, lng: latLng.lng });\n            // Normalize latLng to logical coordinates directly\n            const x = xMin + (latLng.lng / 600) * xRange; // Map lng to [-80, 160]\n            const y = yMax - (latLng.lat / 500) * yRange; // Map lat to [-40, 160], flipped\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          });\n          console.log(\"Scaled points (Leaflet):\", coords);\n          if (onDrawComplete) onDrawComplete(JSON.stringify(coords));\n        });\n\n        isInitialized.current = true;\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false;\n      }\n      if (mapData && imageRef.current) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData]);\n\n  if (useLeaflet) {\n    return (\n      <div>\n        {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n        <div ref={mapRef} style={{ height: \"500px\", width: \"600px\", border: \"2px solid black\" }} />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n        <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n      </div>\n    );\n  }\n});\n\nexport default Map;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,QAAQ,OAAO;AAChE,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B,CAAC,CAAC;AACnC,OAAO,oCAAoC,CAAC,CAAC;AAC7C,OAAO,cAAc,CAAC,CAAC;AACvB,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,GAAG,gBAAAC,EAAA,cAAGL,IAAI,CAAAM,EAAA,GAAAD,EAAA,CAAC,CAAC;EAAEE,MAAM;EAAEC,cAAc;EAAEC,YAAY;EAAEC;AAAW,CAAC,KAAK;EAAAL,EAAA;EACzE,MAAMM,MAAM,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMc,WAAW,GAAGd,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMe,UAAU,GAAGf,MAAM,CAAC,IAAIG,CAAC,CAACa,YAAY,CAAC,CAAC,CAAC;EAC/C,MAAMC,SAAS,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMqB,aAAa,GAAGtB,MAAM,CAAC,KAAK,CAAC;EACnC,MAAMuB,MAAM,GAAGvB,MAAM,CAAC,EAAE,CAAC;EACzB,MAAMwB,SAAS,GAAGxB,MAAM,CAAC,KAAK,CAAC;EAC/B,MAAMyB,MAAM,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM0B,QAAQ,GAAG1B,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM2B,aAAa,GAAG3B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEjC;EACAD,SAAS,CAAC,MAAM;IACd,IAAIU,MAAM,IAAI,CAACS,OAAO,EAAE;MACtB,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;QAC/B,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsBrB,MAAM,EAAE,CAAC;UAC5D,IAAI,CAACoB,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;YAClC,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,eAAeF,IAAI,EAAE,CAAC;UAC9E;UACA,MAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;UACtChB,UAAU,CAACgB,IAAI,CAAC;UAChBd,QAAQ,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;UACdiB,OAAO,CAACjB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChDC,QAAQ,CAAC,4BAA4BD,KAAK,CAACmB,OAAO,EAAE,CAAC;QACvD;MACF,CAAC;MACDX,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACnB,MAAM,EAAES,OAAO,CAAC,CAAC;;EAErB;EACAnB,SAAS,CAAC,MAAM;IACd,IAAImB,OAAO,IAAID,SAAS,CAACuB,OAAO,IAAI,CAAC5B,UAAU,IAAI,CAACU,aAAa,CAACkB,OAAO,EAAE;MACzE,MAAMC,MAAM,GAAGxB,SAAS,CAACuB,OAAO;MAChC,MAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;MACnClB,MAAM,CAACe,OAAO,GAAGE,GAAG;MAEpBD,MAAM,CAACG,KAAK,GAAG,GAAG;MAClBH,MAAM,CAACI,MAAM,GAAG,GAAG;MAEnB,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,WAAW,GAAG,WAAW;MAC7BF,GAAG,CAACG,GAAG,GAAG/B,OAAO,CAACgC,QAAQ;MAC1BxB,QAAQ,CAACc,OAAO,GAAGM,GAAG;MAEtBA,GAAG,CAACK,MAAM,GAAG,MAAM;QACjBd,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEpB,OAAO,CAACgC,QAAQ,EAAE,aAAa,EAAEJ,GAAG,CAACF,KAAK,EAAE,GAAG,EAAEE,GAAG,CAACD,MAAM,CAAC;QAClHH,GAAG,CAACU,SAAS,CAACN,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;QAErD,MAAMQ,oBAAoB,GAAIC,CAAC,IAAK;UAClC,MAAMC,IAAI,GAAGd,MAAM,CAACe,qBAAqB,CAAC,CAAC;UAC3C,MAAMC,MAAM,GAAGhB,MAAM,CAACG,KAAK,GAAGW,IAAI,CAACX,KAAK;UACxC,MAAMc,MAAM,GAAGjB,MAAM,CAACI,MAAM,GAAGU,IAAI,CAACV,MAAM;UAC1C,MAAMc,CAAC,GAAG,CAACL,CAAC,CAACM,OAAO,GAAGL,IAAI,CAACM,IAAI,IAAIJ,MAAM;UAC1C,MAAMK,CAAC,GAAG,CAACR,CAAC,CAACS,OAAO,GAAGR,IAAI,CAACS,GAAG,IAAIN,MAAM;UACzCrB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;YAAEqB,CAAC;YAAEG;UAAE,CAAC,CAAC;UAC/C,OAAO;YAAEH,CAAC;YAAEG;UAAE,CAAC;QACjB,CAAC;QAED,MAAMG,WAAW,GAAGA,CAAC1C,MAAM,EAAE2C,YAAY,GAAG,IAAI,EAAEC,KAAK,GAAG,KAAK,KAAK;UAClEzB,GAAG,CAAC0B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE3B,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;UAChDH,GAAG,CAACU,SAAS,CAACN,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACI,MAAM,CAAC;UACrD,IAAItB,MAAM,CAAC8C,MAAM,KAAK,CAAC,EAAE;UACzB3B,GAAG,CAAC4B,SAAS,CAAC,CAAC;UACf5B,GAAG,CAAC6B,MAAM,CAAChD,MAAM,CAAC,CAAC,CAAC,CAACoC,CAAC,EAAEpC,MAAM,CAAC,CAAC,CAAC,CAACuC,CAAC,CAAC;UACpC,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjD,MAAM,CAAC8C,MAAM,EAAEG,CAAC,EAAE,EAAE;YACtC9B,GAAG,CAAC+B,MAAM,CAAClD,MAAM,CAACiD,CAAC,CAAC,CAACb,CAAC,EAAEpC,MAAM,CAACiD,CAAC,CAAC,CAACV,CAAC,CAAC;UACtC;UACA,IAAII,YAAY,EAAExB,GAAG,CAAC+B,MAAM,CAACP,YAAY,CAACP,CAAC,EAAEO,YAAY,CAACJ,CAAC,CAAC;UAC5D,IAAIK,KAAK,EAAEzB,GAAG,CAACgC,SAAS,CAAC,CAAC;UAC1BhC,GAAG,CAACiC,WAAW,GAAGhE,YAAY,IAAI,KAAK;UACvC+B,GAAG,CAACkC,MAAM,CAAC,CAAC;UACZrD,MAAM,CAACsD,OAAO,CAAEC,KAAK,IAAK;YACxBpC,GAAG,CAAC4B,SAAS,CAAC,CAAC;YACf5B,GAAG,CAACqC,GAAG,CAACD,KAAK,CAACnB,CAAC,EAAEmB,KAAK,CAAChB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEkB,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC;YAC5CvC,GAAG,CAACwC,SAAS,GAAGvE,YAAY,IAAI,KAAK;YACrC+B,GAAG,CAACyC,IAAI,CAAC,CAAC;YACVzC,GAAG,CAACgC,SAAS,CAAC,CAAC;UACjB,CAAC,CAAC;QACJ,CAAC;QAED,MAAMU,WAAW,GAAI7D,MAAM,IAAK;UAC9B,MAAM8D,IAAI,GAAGnE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnC,MAAMC,IAAI,GAAGrE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnC,MAAME,IAAI,GAAGtE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnC,MAAMG,IAAI,GAAGvE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnC,MAAMI,MAAM,GAAGH,IAAI,GAAGF,IAAI,CAAC,CAAC;UAC5B,MAAMM,MAAM,GAAGF,IAAI,GAAGD,IAAI,CAAC,CAAC;UAC5B,MAAMI,WAAW,GAAGnD,MAAM,CAACG,KAAK,CAAC,CAAC;UAClC,MAAMiD,YAAY,GAAGpD,MAAM,CAACI,MAAM,CAAC,CAAC;;UAEpC,OAAOtB,MAAM,CAACuE,GAAG,CAAC,CAAChB,KAAK,EAAEiB,KAAK,KAAK;YAClC,MAAMpC,CAAC,GAAG0B,IAAI,GAAIP,KAAK,CAACnB,CAAC,GAAGiC,WAAW,GAAIF,MAAM;YACjD,MAAM5B,CAAC,GAAG2B,IAAI,GAAIX,KAAK,CAAChB,CAAC,GAAG+B,YAAY,GAAIF,MAAM,CAAC,CAAC;YACpD,OAAO;cAAEK,GAAG,EAAErC,CAAC;cAAEsC,GAAG,EAAEnC,CAAC;cAAEoC,GAAG,EAAE,CAAC;cAAEC,KAAK,EAAEJ,KAAK,GAAG;YAAE,CAAC;UACrD,CAAC,CAAC,CAACK,MAAM,CAAC,CAACtB,KAAK,EAAEiB,KAAK,EAAEM,IAAI,KAC3BN,KAAK,KAAKM,IAAI,CAACC,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACP,GAAG,KAAKlB,KAAK,CAACkB,GAAG,IAAIO,CAAC,CAACN,GAAG,KAAKnB,KAAK,CAACmB,GAAG,CAC5E,CAAC;QACH,CAAC;QAED,MAAMO,eAAe,GAAIlD,CAAC,IAAK;UAC7B,IAAIA,CAAC,CAACmD,MAAM,KAAK,CAAC,EAAE;YAClBjF,SAAS,CAACgB,OAAO,GAAG,IAAI;YACxB,MAAMsC,KAAK,GAAGzB,oBAAoB,CAACC,CAAC,CAAC;YACrC,IAAI/B,MAAM,CAACiB,OAAO,CAAC6B,MAAM,KAAK,CAAC,IAC3BW,IAAI,CAAC0B,KAAK,CAAC5B,KAAK,CAACnB,CAAC,GAAGpC,MAAM,CAACiB,OAAO,CAACjB,MAAM,CAACiB,OAAO,CAAC6B,MAAM,GAAG,CAAC,CAAC,CAACV,CAAC,EACtDmB,KAAK,CAAChB,CAAC,GAAGvC,MAAM,CAACiB,OAAO,CAACjB,MAAM,CAACiB,OAAO,CAAC6B,MAAM,GAAG,CAAC,CAAC,CAACP,CAAC,CAAC,GAAG,CAAC,EAAE;cACxEvC,MAAM,CAACiB,OAAO,CAACmE,IAAI,CAAC7B,KAAK,CAAC;cAC1Bb,WAAW,CAAC1C,MAAM,CAACiB,OAAO,CAAC;YAC7B;UACF;QACF,CAAC;QAED,MAAMoE,eAAe,GAAItD,CAAC,IAAK;UAC7B,IAAI9B,SAAS,CAACgB,OAAO,EAAE;YACrB,MAAMsC,KAAK,GAAGzB,oBAAoB,CAACC,CAAC,CAAC;YACrCW,WAAW,CAAC1C,MAAM,CAACiB,OAAO,EAAEsC,KAAK,CAAC;UACpC;QACF,CAAC;QAED,MAAM+B,aAAa,GAAIvD,CAAC,IAAK;UAC3B,IAAIA,CAAC,CAACmD,MAAM,KAAK,CAAC,EAAEjF,SAAS,CAACgB,OAAO,GAAG,KAAK;QAC/C,CAAC;QAED,MAAMsE,iBAAiB,GAAIxD,CAAC,IAAK;UAC/B,MAAMyD,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;UACtB,IAAIA,GAAG,GAAGpF,aAAa,CAACa,OAAO,GAAG,GAAG,EAAE;UACvCb,aAAa,CAACa,OAAO,GAAGuE,GAAG;UAC3BvF,SAAS,CAACgB,OAAO,GAAG,KAAK;UACzB,IAAIjB,MAAM,CAACiB,OAAO,CAAC6B,MAAM,IAAI,CAAC,EAAE;YAC9BJ,WAAW,CAAC1C,MAAM,CAACiB,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC;YACvC,MAAMyE,YAAY,GAAG7B,WAAW,CAAC7D,MAAM,CAACiB,OAAO,CAAC;YAChDH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE2E,YAAY,CAAC;YACpD,IAAIvG,cAAc,EAAEA,cAAc,CAACwG,IAAI,CAACC,SAAS,CAACF,YAAY,CAAC,CAAC;YAChE1F,MAAM,CAACiB,OAAO,GAAG,EAAE;UACrB;QACF,CAAC;QAEDC,MAAM,CAAC2E,gBAAgB,CAAC,WAAW,EAAEZ,eAAe,CAAC;QACrD/D,MAAM,CAAC2E,gBAAgB,CAAC,WAAW,EAAER,eAAe,CAAC;QACrDnE,MAAM,CAAC2E,gBAAgB,CAAC,SAAS,EAAEP,aAAa,CAAC;QACjDpE,MAAM,CAAC2E,gBAAgB,CAAC,UAAU,EAAEN,iBAAiB,CAAC;QAEtD,OAAO,MAAM;UACXrE,MAAM,CAAC4E,mBAAmB,CAAC,WAAW,EAAEb,eAAe,CAAC;UACxD/D,MAAM,CAAC4E,mBAAmB,CAAC,WAAW,EAAET,eAAe,CAAC;UACxDnE,MAAM,CAAC4E,mBAAmB,CAAC,SAAS,EAAER,aAAa,CAAC;UACpDpE,MAAM,CAAC4E,mBAAmB,CAAC,UAAU,EAAEP,iBAAiB,CAAC;QAC3D,CAAC;MACH,CAAC;MAEDhE,GAAG,CAACwE,OAAO,GAAG,MAAM;QAClBjF,OAAO,CAACjB,KAAK,CAAC,2BAA2B,EAAEF,OAAO,CAACgC,QAAQ,CAAC;QAC5D7B,QAAQ,CAAC,6DAA6D,CAAC;MACzE,CAAC;IACH;EACF,CAAC,EAAE,CAACH,OAAO,EAAER,cAAc,EAAEC,YAAY,EAAEC,UAAU,CAAC,CAAC;;EAEvD;EACAb,SAAS,CAAC,MAAM;IACd,IAAImB,OAAO,IAAIL,MAAM,CAAC2B,OAAO,IAAI5B,UAAU,IAAI,CAACU,aAAa,CAACkB,OAAO,EAAE;MACrE1B,WAAW,CAAC0B,OAAO,GAAGrC,CAAC,CAAC2F,GAAG,CAACjF,MAAM,CAAC2B,OAAO,EAAE;QAC1C+E,GAAG,EAAEpH,CAAC,CAACqH,GAAG,CAACC,MAAM;QACjBC,OAAO,EAAE,CAAC,CAAC;QACXC,OAAO,EAAE,CAAC;QACVC,WAAW,EAAE,IAAI;QACjBC,kBAAkB,EAAE;MACtB,CAAC,CAAC;MAEF/G,WAAW,CAAC0B,OAAO,CAACsF,SAAS,CAAEC,KAAK,IAAK;QACvC,IAAIA,KAAK,YAAY5H,CAAC,CAAC6H,SAAS,EAAElH,WAAW,CAAC0B,OAAO,CAACyF,WAAW,CAACF,KAAK,CAAC;MAC1E,CAAC,CAAC;MAEF,MAAMG,aAAa,GAAG,CACpB,CAAChH,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEpE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAAE;MAC9C,CAACpE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEpE,OAAO,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;MAAA,CAC/C;MACD,MAAMD,IAAI,GAAG6C,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,MAAM3C,IAAI,GAAG2C,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,MAAM1C,IAAI,GAAG0C,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,MAAMzC,IAAI,GAAGyC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,MAAMxC,MAAM,GAAGH,IAAI,GAAGF,IAAI,CAAC,CAAC;MAC5B,MAAMM,MAAM,GAAGF,IAAI,GAAGD,IAAI,CAAC,CAAC;;MAE5B,MAAM1C,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,WAAW,GAAG,WAAW;MAC7BF,GAAG,CAACG,GAAG,GAAG/B,OAAO,CAACgC,QAAQ;MAE1BJ,GAAG,CAACK,MAAM,GAAG,MAAM;QACjBd,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEpB,OAAO,CAACgC,QAAQ,EAAE,aAAa,EAAEJ,GAAG,CAACF,KAAK,EAAE,GAAG,EAAEE,GAAG,CAACD,MAAM,CAAC;QACnH,MAAMsF,WAAW,GAAG,CAClB,CAAC,CAAC,EAAE,CAAC,CAAC;QAAE;QACR,CAAC,GAAG,EAAE,GAAG,CAAC,CAAE;QAAA,CACb;;QAED;QACAhI,CAAC,CAACiI,YAAY,CAAClH,OAAO,CAACgC,QAAQ,EAAE,CAC/B,CAACsC,IAAI,EAAEH,IAAI,CAAC;QAAE;QACd,CAACI,IAAI,EAAEF,IAAI,CAAC,CAAE;QAAA,CACf,CAAC,CAAC8C,KAAK,CAACvH,WAAW,CAAC0B,OAAO,CAAC;QAC7B1B,WAAW,CAAC0B,OAAO,CAAC8F,SAAS,CAAC,CAC5B,CAAC9C,IAAI,EAAEH,IAAI,CAAC,EACZ,CAACI,IAAI,EAAEF,IAAI,CAAC,CACb,CAAC;QAEFzE,WAAW,CAAC0B,OAAO,CAAC+F,QAAQ,CAACxH,UAAU,CAACyB,OAAO,CAAC;QAEhD,MAAMgG,QAAQ,GAAG;UACfC,GAAG,EAAE,SAAS;UACdC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE;QACR,CAAC;QAED,MAAMC,WAAW,GAAG,IAAIzI,CAAC,CAAC0I,OAAO,CAACC,IAAI,CAAC;UACrCC,IAAI,EAAE;YAAEC,YAAY,EAAEjI,UAAU,CAACyB;UAAQ,CAAC;UAC1CyG,IAAI,EAAE;YACJC,OAAO,EAAE;cACPC,YAAY,EAAE;gBAAEC,KAAK,EAAEZ,QAAQ,CAAC7H,YAAY,CAAC,IAAI,SAAS;gBAAE0I,MAAM,EAAE;cAAE;YACxE,CAAC;YACDC,SAAS,EAAE,KAAK;YAChBC,QAAQ,EAAE,KAAK;YACfC,MAAM,EAAE,KAAK;YACbC,MAAM,EAAE,KAAK;YACbC,YAAY,EAAE;UAChB;QACF,CAAC,CAAC;QACF5I,WAAW,CAAC0B,OAAO,CAACmH,UAAU,CAACf,WAAW,CAAC;QAE3C9H,WAAW,CAAC0B,OAAO,CAACoH,EAAE,CAACzJ,CAAC,CAAC2I,IAAI,CAACe,KAAK,CAACC,OAAO,EAAGC,KAAK,IAAK;UACtD,MAAMhC,KAAK,GAAGgC,KAAK,CAAChC,KAAK;UACzBhH,UAAU,CAACyB,OAAO,CAAC+F,QAAQ,CAACR,KAAK,CAAC;UAClC,MAAMiC,MAAM,GAAGjC,KAAK,CAACkC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAACnE,GAAG,CAAC,CAACoE,MAAM,EAAEnE,KAAK,KAAK;YAC1D1D,OAAO,CAACC,GAAG,CAAC,wBAAwByD,KAAK,GAAG,CAAC,GAAG,EAAE;cAAEoE,GAAG,EAAED,MAAM,CAACC,GAAG;cAAEC,GAAG,EAAEF,MAAM,CAACE;YAAI,CAAC,CAAC;YACvF;YACA,MAAMzG,CAAC,GAAG0B,IAAI,GAAI6E,MAAM,CAACE,GAAG,GAAG,GAAG,GAAI1E,MAAM,CAAC,CAAC;YAC9C,MAAM5B,CAAC,GAAG2B,IAAI,GAAIyE,MAAM,CAACC,GAAG,GAAG,GAAG,GAAIxE,MAAM,CAAC,CAAC;YAC9C,OAAO;cAAEK,GAAG,EAAErC,CAAC;cAAEsC,GAAG,EAAEnC,CAAC;cAAEoC,GAAG,EAAE,CAAC;cAAEC,KAAK,EAAEJ,KAAK,GAAG;YAAE,CAAC;UACrD,CAAC,CAAC;UACF1D,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE0H,MAAM,CAAC;UAC/C,IAAItJ,cAAc,EAAEA,cAAc,CAACwG,IAAI,CAACC,SAAS,CAAC6C,MAAM,CAAC,CAAC;QAC5D,CAAC,CAAC;QAEF1I,aAAa,CAACkB,OAAO,GAAG,IAAI;MAC9B,CAAC;MAEDM,GAAG,CAACwE,OAAO,GAAG,MAAM;QAClBjF,OAAO,CAACjB,KAAK,CAAC,2BAA2B,EAAEF,OAAO,CAACgC,QAAQ,CAAC;QAC5D7B,QAAQ,CAAC,6DAA6D,CAAC;MACzE,CAAC;IACH;EACF,CAAC,EAAE,CAACH,OAAO,EAAER,cAAc,EAAEC,YAAY,EAAEC,UAAU,CAAC,CAAC;;EAEvD;EACAb,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIe,WAAW,CAAC0B,OAAO,EAAE;QACvB1B,WAAW,CAAC0B,OAAO,CAAC6H,MAAM,CAAC,CAAC;QAC5BvJ,WAAW,CAAC0B,OAAO,GAAG,IAAI;QAC1BlB,aAAa,CAACkB,OAAO,GAAG,KAAK;MAC/B;MACA,IAAItB,OAAO,IAAIQ,QAAQ,CAACc,OAAO,EAAE;QAC/B,MAAMM,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;QACvBD,GAAG,CAACG,GAAG,GAAG/B,OAAO,CAACgC,QAAQ,CAAC,CAAC;MAC9B;IACF,CAAC;EACH,CAAC,EAAE,CAAChC,OAAO,CAAC,CAAC;EAEb,IAAIN,UAAU,EAAE;IACd,oBACEP,OAAA;MAAAiK,QAAA,GACGlJ,KAAK,iBAAIf,OAAA;QAAKkK,KAAK,EAAE;UAAEnB,KAAK,EAAE,KAAK;UAAEoB,YAAY,EAAE;QAAO,CAAE;QAAAF,QAAA,EAAElJ;MAAK;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3EvK,OAAA;QAAKwK,GAAG,EAAEhK,MAAO;QAAC0J,KAAK,EAAE;UAAE1H,MAAM,EAAE,OAAO;UAAED,KAAK,EAAE,OAAO;UAAEkI,MAAM,EAAE;QAAkB;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxF,CAAC;EAEV,CAAC,MAAM;IACL,oBACEvK,OAAA;MAAAiK,QAAA,GACGlJ,KAAK,iBAAIf,OAAA;QAAKkK,KAAK,EAAE;UAAEnB,KAAK,EAAE,KAAK;UAAEoB,YAAY,EAAE;QAAO,CAAE;QAAAF,QAAA,EAAElJ;MAAK;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3EvK,OAAA;QAAQwK,GAAG,EAAE5J,SAAU;QAAC8J,EAAE,EAAC,KAAK;QAACR,KAAK,EAAE;UAAEO,MAAM,EAAE;QAAkB;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC;EAEV;AACF,CAAC,kCAAC;AAACI,GAAA,GAjSG1K,GAAG;AAmST,eAAeA,GAAG;AAAC,IAAAE,EAAA,EAAAwK,GAAA;AAAAC,YAAA,CAAAzK,EAAA;AAAAyK,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}