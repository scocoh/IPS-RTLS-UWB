{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport CreateTrigger from \"./components/CreateTrigger\";\nimport \"./TriggerDemo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TriggerDemo = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"Red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [zoneTypes, setZoneTypes] = useState([]);\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedZoneLevel, setSelectedZoneLevel] = useState(\"\");\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    zoneTypes: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false\n  });\n  const [error, setError] = useState(null);\n\n  // Fetch initial data with enhanced error handling\n  useEffect(() => {\n    const fetchData = async (url, setter, key, transform = data => data) => {\n      setLoading(prev => ({\n        ...prev,\n        [key]: true\n      }));\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          const text = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n        }\n        const data = await response.json();\n        console.log(`${key} data:`, data);\n        setter(transform(data));\n        setError(null); // Clear error on success\n      } catch (error) {\n        console.error(`Error fetching ${key}:`, error);\n        setError(`Error fetching ${key}: ${error.message}`);\n      } finally {\n        setLoading(prev => ({\n          ...prev,\n          [key]: false\n        }));\n      }\n    };\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_zone_types\", setZoneTypes, \"zoneTypes\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", data => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Update zones when a map is selected\n  useEffect(() => {\n    if (selectedMap) {\n      const zoneId = selectedMap.i_zn || selectedMap.i_map;\n      fetchData(`/maps/get_campus_zones/${zoneId}`, setZones, \"zones\", data => data.zones || []);\n    }\n  }, [selectedMap]);\n\n  // Handle trigger creation\n  const handleCreateTrigger = async () => {\n    if (!triggerName || !selectedZone || !selectedMap || !selectedZoneLevel) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Map, Zone Level).\");\n      return;\n    }\n    const triggerData = {\n      name: triggerName,\n      direction: triggerDirection,\n      zone_id: parseInt(selectedZone),\n      top_elevation: topElevation,\n      bottom_elevation: bottomElevation,\n      color: triggerColor,\n      zone_level: selectedZoneLevel,\n      parent_zone_id: selectedParentZone ? parseInt(selectedParentZone) : null,\n      coordinates: coordinates ? JSON.parse(coordinates).map(coord => ({\n        n_x: coord[0],\n        n_y: coord[1],\n        n_z: 0\n      })) : null\n    };\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(triggerData)\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  };\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\")).map(cb => parseInt(cb.value)).filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n    setLoading(prev => ({\n      ...prev,\n      vertices: true\n    }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId => fetch(`/api/get_zone_vertices/${zoneId}`).then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      }).then(data => data.vertices || []));\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({\n        ...acc,\n        [v.i_vtx]: v\n      }), {})); // Use i_vtx as key\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        vertices: false\n      }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: {\n        ...prev[vertexId],\n        [field]: parseFloat(value) || 0\n      }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.i_vtx,\n      // Use i_vtx to match backend\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          vertices: updatedVertices\n        })\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", data => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map(direction => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: direction.x_dir,\n      children: direction.x_dir\n    }, direction.i_dir, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this));\n  }, [triggerDirections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ParcoRTLS Trigger Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"mapAndTrigger\",\n      id: \"trigger-demo-tabs\",\n      children: /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"mapAndTrigger\",\n        title: \"Map & Trigger\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trigger-map-section\",\n          children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trigger-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Trigger Name\",\n              value: triggerName,\n              onChange: e => setTriggerName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedZoneLevel,\n              onChange: e => setSelectedZoneLevel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Zone Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 17\n              }, this), loading.zoneTypes ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 19\n              }, this) : zoneTypes.map(zt => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: zt.zone_level,\n                children: zt.zone_name\n              }, zt.zone_level, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedMap ? selectedMap.i_map : \"\",\n              onChange: e => {\n                const map = maps.find(m => m.i_map === parseInt(e.target.value));\n                setSelectedMap(map);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Map\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 17\n              }, this), loading.maps ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this) : maps.map(map => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: map.i_map,\n                children: map.x_nm_map\n              }, map.i_map, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedParentZone,\n              onChange: e => setSelectedParentZone(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"None\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this), loading.parentZones ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this) : parentZones.map(pz => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pz.zone_id.toString(),\n                children: pz.name\n              }, pz.zone_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerDirection,\n              onChange: e => setTriggerDirection(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Direction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this), loading.triggerDirections ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this) : directionOptions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Top Elevation\",\n              value: topElevation,\n              onChange: e => setTopElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Bottom Elevation\",\n              value: bottomElevation,\n              onChange: e => setBottomElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerColor,\n              onChange: e => setTriggerColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Red\",\n                children: \"Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Blue\",\n                children: \"Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Green\",\n                children: \"Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCreateTrigger,\n              children: \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Select a Zone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"zoneList\",\n              children: loading.zones ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Loading zones...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this) : zones.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No zones available for this map.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this) : zones.map(zone => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  value: zone.zone_id.toString(),\n                  checked: selectedZone === zone.zone_id.toString(),\n                  onChange: e => setSelectedZone(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: zone.zone_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 23\n                }, this)]\n              }, zone.zone_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), selectedMap && /*#__PURE__*/_jsxDEV(Map, {\n              zoneId: selectedZone ? parseInt(selectedZone) : selectedMap.i_map,\n              onDrawComplete: coords => setCoordinates(coords)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edit Trigger Vertices\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"vertexTable\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Vertex #\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"X Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Y Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Z Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.values(editedVertices).map((v, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: i + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.x || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"x\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.y || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"y\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.z || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"z\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 21\n                }, this)]\n              }, v.i_vtx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loadVerticesForSelectedZones,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveAllVertices,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Saving...\" : \"Save All Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(TriggerDemo, \"453HLwKWqLv9f8YN4XmWF6H0t1E=\");\n_c = TriggerDemo;\nexport default TriggerDemo;\nvar _c;\n$RefreshReg$(_c, \"TriggerDemo\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Tabs","Tab","Map","CreateTrigger","jsxDEV","_jsxDEV","TriggerDemo","_s","maps","setMaps","zones","setZones","triggerDirections","setTriggerDirections","selectedMap","setSelectedMap","selectedZone","setSelectedZone","triggerName","setTriggerName","triggerDirection","setTriggerDirection","topElevation","setTopElevation","bottomElevation","setBottomElevation","triggerColor","setTriggerColor","eventList","setEventList","coordinates","setCoordinates","zoneTypes","setZoneTypes","parentZones","setParentZones","selectedZoneLevel","setSelectedZoneLevel","selectedParentZone","setSelectedParentZone","vertices","setVertices","editedVertices","setEditedVertices","loading","setLoading","error","setError","fetchData","url","setter","key","transform","data","prev","response","fetch","ok","text","Error","status","json","console","log","message","zoneId","i_zn","i_map","handleCreateTrigger","alert","triggerData","name","direction","zone_id","parseInt","top_elevation","bottom_elevation","color","zone_level","parent_zone_id","JSON","parse","map","coord","n_x","n_y","n_z","method","headers","body","stringify","result","trigger_id","loadVerticesForSelectedZones","checkedZones","Array","from","document","querySelectorAll","cb","value","filter","id","isNaN","length","vertexPromises","then","allVertices","Promise","all","flat","reduce","acc","v","i_vtx","handleVertexChange","vertexId","field","parseFloat","saveAllVertices","updatedVertices","Object","values","vertex_id","x","y","z","directionOptions","x_dir","children","i_dir","fileName","_jsxFileName","lineNumber","columnNumber","defaultActiveKey","eventKey","title","className","style","type","placeholder","onChange","e","target","zt","zone_name","find","m","x_nm_map","pz","toString","Number","onClick","zone","checked","onDrawComplete","coords","i","disabled","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport CreateTrigger from \"./components/CreateTrigger\";\nimport \"./TriggerDemo.css\";\n\nconst TriggerDemo = () => {\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"Red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [zoneTypes, setZoneTypes] = useState([]);\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedZoneLevel, setSelectedZoneLevel] = useState(\"\");\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    zoneTypes: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false,\n  });\n  const [error, setError] = useState(null);\n\n  // Fetch initial data with enhanced error handling\n  useEffect(() => {\n    const fetchData = async (url, setter, key, transform = (data) => data) => {\n      setLoading((prev) => ({ ...prev, [key]: true }));\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          const text = await response.text();\n          throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n        }\n        const data = await response.json();\n        console.log(`${key} data:`, data);\n        setter(transform(data));\n        setError(null); // Clear error on success\n      } catch (error) {\n        console.error(`Error fetching ${key}:`, error);\n        setError(`Error fetching ${key}: ${error.message}`);\n      } finally {\n        setLoading((prev) => ({ ...prev, [key]: false }));\n      }\n    };\n\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_zone_types\", setZoneTypes, \"zoneTypes\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", (data) => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n  }, []);\n\n  // Update zones when a map is selected\n  useEffect(() => {\n    if (selectedMap) {\n      const zoneId = selectedMap.i_zn || selectedMap.i_map;\n      fetchData(`/maps/get_campus_zones/${zoneId}`, setZones, \"zones\", (data) => data.zones || []);\n    }\n  }, [selectedMap]);\n\n  // Handle trigger creation\n  const handleCreateTrigger = async () => {\n    if (!triggerName || !selectedZone || !selectedMap || !selectedZoneLevel) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Map, Zone Level).\");\n      return;\n    }\n\n    const triggerData = {\n      name: triggerName,\n      direction: triggerDirection,\n      zone_id: parseInt(selectedZone),\n      top_elevation: topElevation,\n      bottom_elevation: bottomElevation,\n      color: triggerColor,\n      zone_level: selectedZoneLevel,\n      parent_zone_id: selectedParentZone ? parseInt(selectedParentZone) : null,\n      coordinates: coordinates ? JSON.parse(coordinates).map(coord => ({ n_x: coord[0], n_y: coord[1], n_z: 0 })) : null,\n    };\n\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(triggerData),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  };\n\n  // Load vertices for selected zones\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\"))\n      .map(cb => parseInt(cb.value))\n      .filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n\n    setLoading((prev) => ({ ...prev, vertices: true }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId =>\n        fetch(`/api/get_zone_vertices/${zoneId}`)\n          .then(response => {\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            return response.json();\n          })\n          .then(data => data.vertices || [])\n      );\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({ ...acc, [v.i_vtx]: v }), {})); // Use i_vtx as key\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, vertices: false }));\n    }\n  };\n\n  // Handle vertex changes\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: { ...prev[vertexId], [field]: parseFloat(value) || 0 }\n    }));\n  };\n\n  // Save all edited vertices\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.i_vtx, // Use i_vtx to match backend\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ vertices: updatedVertices }),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", (data) => data.vertices || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Use useMemo to ensure consistent rendering of direction options\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map((direction) => (\n      <option key={direction.i_dir} value={direction.x_dir}>\n        {direction.x_dir}\n      </option>\n    ));\n  }, [triggerDirections]);\n\n  return (\n    <div>\n      <h1>ParcoRTLS Trigger Management</h1>\n      <Tabs defaultActiveKey=\"mapAndTrigger\" id=\"trigger-demo-tabs\">\n        <Tab eventKey=\"mapAndTrigger\" title=\"Map & Trigger\">\n          <div className=\"trigger-map-section\">\n            {error && <div style={{ color: \"red\" }}>{error}</div>}\n            <div className=\"trigger-form\">\n              <h3>Create Trigger</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Trigger Name\"\n                value={triggerName}\n                onChange={(e) => setTriggerName(e.target.value)}\n              />\n              <select value={selectedZoneLevel} onChange={(e) => setSelectedZoneLevel(e.target.value)}>\n                <option value=\"\">Select Zone Level</option>\n                {loading.zoneTypes ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  zoneTypes.map((zt) => (\n                    <option key={zt.zone_level} value={zt.zone_level}>\n                      {zt.zone_name}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={selectedMap ? selectedMap.i_map : \"\"} onChange={(e) => {\n                const map = maps.find(m => m.i_map === parseInt(e.target.value));\n                setSelectedMap(map);\n              }}>\n                <option value=\"\">Select Map</option>\n                {loading.maps ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  maps.map((map) => (\n                    <option key={map.i_map} value={map.i_map}>\n                      {map.x_nm_map}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={selectedParentZone} onChange={(e) => setSelectedParentZone(e.target.value)}>\n                <option value=\"\">None</option>\n                {loading.parentZones ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  parentZones.map((pz) => (\n                    <option key={pz.zone_id} value={pz.zone_id.toString()}>\n                      {pz.name}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select value={triggerDirection} onChange={(e) => setTriggerDirection(e.target.value)}>\n                <option value=\"\">Select Direction</option>\n                {loading.triggerDirections ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  directionOptions\n                )}\n              </select>\n              <input\n                type=\"number\"\n                placeholder=\"Top Elevation\"\n                value={topElevation}\n                onChange={(e) => setTopElevation(Number(e.target.value))}\n              />\n              <input\n                type=\"number\"\n                placeholder=\"Bottom Elevation\"\n                value={bottomElevation}\n                onChange={(e) => setBottomElevation(Number(e.target.value))}\n              />\n              <select value={triggerColor} onChange={(e) => setTriggerColor(e.target.value)}>\n                <option value=\"Red\">Red</option>\n                <option value=\"Blue\">Blue</option>\n                <option value=\"Green\">Green</option>\n              </select>\n              <button onClick={handleCreateTrigger}>Create Trigger</button>\n            </div>\n            <div className=\"map-selection\">\n              <h3>Select a Zone</h3>\n              <div id=\"zoneList\">\n                {loading.zones ? (\n                  <p>Loading zones...</p>\n                ) : zones.length === 0 ? (\n                  <p>No zones available for this map.</p>\n                ) : (\n                  zones.map((zone) => (\n                    <div key={zone.zone_id}>\n                      <input\n                        type=\"checkbox\"\n                        value={zone.zone_id.toString()}\n                        checked={selectedZone === zone.zone_id.toString()}\n                        onChange={(e) => setSelectedZone(e.target.value)}\n                      />\n                      <span>{zone.zone_name}</span>\n                    </div>\n                  ))\n                )}\n              </div>\n              {selectedMap && (\n                <Map\n                  zoneId={selectedZone ? parseInt(selectedZone) : selectedMap.i_map}\n                  onDrawComplete={(coords) => setCoordinates(coords)}\n                />\n              )}\n            </div>\n            <h3>Edit Trigger Vertices</h3>\n            <table id=\"vertexTable\">\n              <thead>\n                <tr>\n                  <th>Vertex #</th>\n                  <th>X Coordinate</th>\n                  <th>Y Coordinate</th>\n                  <th>Z Coordinate</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.values(editedVertices).map((v, i) => (\n                  <tr key={v.i_vtx}>\n                    <td>{i + 1}</td>\n                    <td><input type=\"number\" value={v.x || 0} onChange={(e) => handleVertexChange(v.i_vtx, \"x\", e.target.value)} /></td>\n                    <td><input type=\"number\" value={v.y || 0} onChange={(e) => handleVertexChange(v.i_vtx, \"y\", e.target.value)} /></td>\n                    <td><input type=\"number\" value={v.z || 0} onChange={(e) => handleVertexChange(v.i_vtx, \"z\", e.target.value)} /></td>\n                    <td><button>Save</button></td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button onClick={loadVerticesForSelectedZones} disabled={loading.vertices}>\n              {loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"}\n            </button>\n            <button onClick={saveAllVertices} disabled={loading.vertices}>\n              {loading.vertices ? \"Saving...\" : \"Save All Changes\"}\n            </button>\n          </div>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default TriggerDemo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}