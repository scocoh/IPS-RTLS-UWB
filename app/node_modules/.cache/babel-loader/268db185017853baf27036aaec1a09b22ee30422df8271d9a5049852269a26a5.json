{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\",\n  _s = $RefreshSig$();\n// /home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport MapZoneBuilder from \"./MapZoneBuilder\";\nimport \"./ZoneBuilder.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ZoneBuilder = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedMapId, setSelectedMapId] = useState(null);\n  const [selectedZoneType, setSelectedZoneType] = useState(null);\n  const [selectedParentZone, setSelectedParentZone] = useState(null);\n  const [zoneName, setZoneName] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [useLeaflet, setUseLeaflet] = useState(false);\n  const drawnItems = useRef(new L.FeatureGroup());\n\n  // Fetch maps, zone types, and parent zones\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const mapsResponse = await fetch(\"/zonebuilder/get_maps\");\n        const mapsData = await mapsResponse.json();\n        setMaps(mapsData.maps);\n        console.log(\"✅ Fetched maps:\", mapsData.maps);\n        const zonesResponse = await fetch(\"/zonebuilder/get_zone_types\");\n        const zonesData = await zonesResponse.json();\n        setZones(zonesData);\n        console.log(\"✅ Fetched zone types:\", zonesData);\n        const parentZonesResponse = await fetch(\"/zonebuilder/get_parent_zones\");\n        const parentZonesData = await parentZonesResponse.json();\n        setParentZones(parentZonesData.zones);\n        console.log(\"✅ Fetched parent zones:\", parentZonesData.zones);\n      } catch (error) {\n        console.error(\"❌ Error fetching initial data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Save Zone with Correct X, Y, Z Coordinates (Feet-Based), adding closing vertex\n  const saveZone = async () => {\n    if (!zoneName || !selectedMapId || !selectedZoneType) {\n      alert(\"⚠️ Please fill in all required fields (zone name, map, zone type).\");\n      return;\n    }\n    let zoneVertices = [];\n    if (useLeaflet) {\n      drawnItems.current.eachLayer(layer => {\n        if (layer instanceof L.Polygon) {\n          const leafletVertices = layer.getLatLngs()[0].map((point, index) => ({\n            n_x: point.lng,\n            n_y: point.lat,\n            n_z: 0,\n            n_ord: index + 1\n          }));\n          zoneVertices = [...zoneVertices, ...leafletVertices];\n        }\n      });\n      // Validate only if no layers are drawn yet\n      if (zoneVertices.length === 0) {\n        alert(\"⚠️ No polygon drawn. Please draw a zone and click 'Finish' before saving.\");\n        return;\n      }\n    } else {\n      zoneVertices = vertices.map((v, index) => ({\n        n_x: v.x,\n        n_y: v.y,\n        n_z: 0,\n        n_ord: index + 1\n      }));\n      if (zoneVertices.length < 3) {\n        alert(\"⚠️ At least 3 vertices are required to define a zone.\");\n        console.error(\"❌ Insufficient vertices:\", zoneVertices);\n        return;\n      }\n    }\n\n    // Add closing vertex (last vertex = first vertex) to close the polygon\n    if (zoneVertices.length > 0) {\n      zoneVertices.push({\n        ...zoneVertices[0],\n        n_ord: zoneVertices.length + 1\n      });\n      console.log(\"✅ Added closing vertex:\", zoneVertices[zoneVertices.length - 1]);\n    }\n\n    // Convert parent_zone_id to integer or null\n    let parentZoneId = selectedParentZone;\n    if (parentZoneId === \"\" || parentZoneId === null) {\n      parentZoneId = null;\n    } else {\n      parentZoneId = parseInt(parentZoneId, 10);\n      if (isNaN(parentZoneId)) {\n        alert(\"⚠️ Invalid parent zone ID. Please select a valid parent zone or leave it blank.\");\n        return;\n      }\n    }\n    const zoneData = {\n      zone_name: zoneName,\n      map_id: selectedMapId,\n      zone_level: selectedZoneType,\n      parent_zone_id: parentZoneId,\n      vertices: zoneVertices\n    };\n    console.log(\"📡 Sending Zone Data to /zonebuilder/create_zone:\", zoneData);\n    try {\n      const response = await fetch(\"/zonebuilder/create_zone\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(zoneData)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        console.log(\"✅ Zone creation response:\", result);\n        alert(`✅ Zone '${zoneName}' created successfully! Zone ID: ${result.zone_id}`);\n        setVertices([]); // Clear vertices after saving\n        drawnItems.current.clearLayers(); // Clear Leaflet layers\n      } else {\n        console.error(\"❌ Zone creation failed:\", result);\n        alert(`❌ Error: ${result.detail || \"Unknown error\"}`);\n      }\n    } catch (error) {\n      console.error(\"❌ Network error creating zone:\", error);\n      alert(\"⚠️ Failed to create zone. Check console for details.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Zone Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Zone Type:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedZoneType(e.target.value),\n      value: selectedZoneType || \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Zone Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), zones.map(zone => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: zone.zone_level,\n        children: zone.zone_name\n      }, zone.zone_level, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Map:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedMapId(e.target.value),\n      value: selectedMapId || \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), maps.map(map => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: map.map_id,\n        children: map.name\n      }, map.map_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Parent Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedParentZone(e.target.value),\n      value: selectedParentZone || \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"(None - Parent Zone)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), parentZones.map(zone => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: zone.zone_id,\n        children: zone.name\n      }, zone.zone_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Zone Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: zoneName,\n      onChange: e => setZoneName(e.target.value),\n      placeholder: \"Enter Zone Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Render with Leaflet:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: useLeaflet,\n      onChange: e => setUseLeaflet(e.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        marginTop: \"10px\"\n      },\n      children: useLeaflet ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"zoneMap\",\n        style: {\n          height: \"600px\",\n          width: \"800px\",\n          border: \"2px solid black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MapZoneBuilder, {\n          zoneId: selectedMapId,\n          onDrawComplete: setVertices,\n          useLeaflet: true,\n          drawnItems: drawnItems.current\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"zoneCanvas\",\n        style: {\n          height: \"600px\",\n          width: \"800px\",\n          border: \"2px solid black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(MapZoneBuilder, {\n          zoneId: selectedMapId,\n          onDrawComplete: setVertices,\n          useLeaflet: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveZone,\n      style: {\n        marginTop: \"10px\"\n      },\n      children: \"Save Zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(ZoneBuilder, \"OsY+phRviGOjpxl/P90oaAYpgqQ=\");\n_c = ZoneBuilder;\nexport default ZoneBuilder;\nvar _c;\n$RefreshReg$(_c, \"ZoneBuilder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","L","MapZoneBuilder","jsxDEV","_jsxDEV","ZoneBuilder","_s","maps","setMaps","zones","setZones","parentZones","setParentZones","selectedMapId","setSelectedMapId","selectedZoneType","setSelectedZoneType","selectedParentZone","setSelectedParentZone","zoneName","setZoneName","vertices","setVertices","useLeaflet","setUseLeaflet","drawnItems","FeatureGroup","fetchData","mapsResponse","fetch","mapsData","json","console","log","zonesResponse","zonesData","parentZonesResponse","parentZonesData","error","saveZone","alert","zoneVertices","current","eachLayer","layer","Polygon","leafletVertices","getLatLngs","map","point","index","n_x","lng","n_y","lat","n_z","n_ord","length","v","x","y","push","parentZoneId","parseInt","isNaN","zoneData","zone_name","map_id","zone_level","parent_zone_id","response","method","headers","body","JSON","stringify","result","ok","zone_id","clearLayers","detail","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","zone","name","type","placeholder","checked","style","display","flexDirection","marginTop","id","height","width","border","zoneId","onDrawComplete","onClick","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js"],"sourcesContent":["// /home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport MapZoneBuilder from \"./MapZoneBuilder\";\nimport \"./ZoneBuilder.css\";\n\nconst ZoneBuilder = () => {\n    const [maps, setMaps] = useState([]);\n    const [zones, setZones] = useState([]);\n    const [parentZones, setParentZones] = useState([]);\n    const [selectedMapId, setSelectedMapId] = useState(null);\n    const [selectedZoneType, setSelectedZoneType] = useState(null);\n    const [selectedParentZone, setSelectedParentZone] = useState(null);\n    const [zoneName, setZoneName] = useState(\"\");\n    const [vertices, setVertices] = useState([]);\n    const [useLeaflet, setUseLeaflet] = useState(false);\n    const drawnItems = useRef(new L.FeatureGroup());\n\n    // Fetch maps, zone types, and parent zones\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const mapsResponse = await fetch(\"/zonebuilder/get_maps\");\n                const mapsData = await mapsResponse.json();\n                setMaps(mapsData.maps);\n                console.log(\"✅ Fetched maps:\", mapsData.maps);\n\n                const zonesResponse = await fetch(\"/zonebuilder/get_zone_types\");\n                const zonesData = await zonesResponse.json();\n                setZones(zonesData);\n                console.log(\"✅ Fetched zone types:\", zonesData);\n\n                const parentZonesResponse = await fetch(\"/zonebuilder/get_parent_zones\");\n                const parentZonesData = await parentZonesResponse.json();\n                setParentZones(parentZonesData.zones);\n                console.log(\"✅ Fetched parent zones:\", parentZonesData.zones);\n            } catch (error) {\n                console.error(\"❌ Error fetching initial data:\", error);\n            }\n        };\n        fetchData();\n    }, []);\n\n    // Save Zone with Correct X, Y, Z Coordinates (Feet-Based), adding closing vertex\n    const saveZone = async () => {\n        if (!zoneName || !selectedMapId || !selectedZoneType) {\n            alert(\"⚠️ Please fill in all required fields (zone name, map, zone type).\");\n            return;\n        }\n\n        let zoneVertices = [];\n        if (useLeaflet) {\n            drawnItems.current.eachLayer(layer => {\n                if (layer instanceof L.Polygon) {\n                    const leafletVertices = layer.getLatLngs()[0].map((point, index) => ({\n                        n_x: point.lng,\n                        n_y: point.lat,\n                        n_z: 0,\n                        n_ord: index + 1\n                    }));\n                    zoneVertices = [...zoneVertices, ...leafletVertices];\n                }\n            });\n            // Validate only if no layers are drawn yet\n            if (zoneVertices.length === 0) {\n                alert(\"⚠️ No polygon drawn. Please draw a zone and click 'Finish' before saving.\");\n                return;\n            }\n        } else {\n            zoneVertices = vertices.map((v, index) => ({\n                n_x: v.x,\n                n_y: v.y,\n                n_z: 0,\n                n_ord: index + 1\n            }));\n            if (zoneVertices.length < 3) {\n                alert(\"⚠️ At least 3 vertices are required to define a zone.\");\n                console.error(\"❌ Insufficient vertices:\", zoneVertices);\n                return;\n            }\n        }\n\n        // Add closing vertex (last vertex = first vertex) to close the polygon\n        if (zoneVertices.length > 0) {\n            zoneVertices.push({ ...zoneVertices[0], n_ord: zoneVertices.length + 1 });\n            console.log(\"✅ Added closing vertex:\", zoneVertices[zoneVertices.length - 1]);\n        }\n\n        // Convert parent_zone_id to integer or null\n        let parentZoneId = selectedParentZone;\n        if (parentZoneId === \"\" || parentZoneId === null) {\n            parentZoneId = null;\n        } else {\n            parentZoneId = parseInt(parentZoneId, 10);\n            if (isNaN(parentZoneId)) {\n                alert(\"⚠️ Invalid parent zone ID. Please select a valid parent zone or leave it blank.\");\n                return;\n            }\n        }\n\n        const zoneData = {\n            zone_name: zoneName,\n            map_id: selectedMapId,\n            zone_level: selectedZoneType,\n            parent_zone_id: parentZoneId,\n            vertices: zoneVertices,\n        };\n\n        console.log(\"📡 Sending Zone Data to /zonebuilder/create_zone:\", zoneData);\n\n        try {\n            const response = await fetch(\"/zonebuilder/create_zone\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(zoneData),\n            });\n\n            const result = await response.json();\n            if (response.ok) {\n                console.log(\"✅ Zone creation response:\", result);\n                alert(`✅ Zone '${zoneName}' created successfully! Zone ID: ${result.zone_id}`);\n                setVertices([]); // Clear vertices after saving\n                drawnItems.current.clearLayers(); // Clear Leaflet layers\n            } else {\n                console.error(\"❌ Zone creation failed:\", result);\n                alert(`❌ Error: ${result.detail || \"Unknown error\"}`);\n            }\n        } catch (error) {\n            console.error(\"❌ Network error creating zone:\", error);\n            alert(\"⚠️ Failed to create zone. Check console for details.\");\n        }\n    };\n\n    return (\n        <div>\n            <h2>Zone Builder</h2>\n\n            <label>Zone Type:</label>\n            <select onChange={(e) => setSelectedZoneType(e.target.value)} value={selectedZoneType || \"\"}>\n                <option value=\"\">Select Zone Type</option>\n                {zones.map(zone => (\n                    <option key={zone.zone_level} value={zone.zone_level}>\n                        {zone.zone_name}\n                    </option>\n                ))}\n            </select>\n\n            <label>Map:</label>\n            <select onChange={(e) => setSelectedMapId(e.target.value)} value={selectedMapId || \"\"}>\n                <option value=\"\">Select Map</option>\n                {maps.map(map => (\n                    <option key={map.map_id} value={map.map_id}>\n                        {map.name}\n                    </option>\n                ))}\n            </select>\n\n            <label>Parent Zone:</label>\n            <select onChange={(e) => setSelectedParentZone(e.target.value)} value={selectedParentZone || \"\"}>\n                <option value=\"\">(None - Parent Zone)</option>\n                {parentZones.map(zone => (\n                    <option key={zone.zone_id} value={zone.zone_id}>\n                        {zone.name}\n                    </option>\n                ))}\n            </select>\n\n            <label>Zone Name:</label>\n            <input\n                type=\"text\"\n                value={zoneName}\n                onChange={(e) => setZoneName(e.target.value)}\n                placeholder=\"Enter Zone Name\"\n            />\n\n            <label>Render with Leaflet:</label>\n            <input\n                type=\"checkbox\"\n                checked={useLeaflet}\n                onChange={(e) => setUseLeaflet(e.target.checked)}\n            />\n\n            <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: \"10px\" }}>\n                {useLeaflet ? (\n                    <div id=\"zoneMap\" style={{ height: \"600px\", width: \"800px\", border: \"2px solid black\" }}>\n                        <MapZoneBuilder\n                            zoneId={selectedMapId}\n                            onDrawComplete={setVertices}\n                            useLeaflet={true}\n                            drawnItems={drawnItems.current}\n                        />\n                    </div>\n                ) : (\n                    <div id=\"zoneCanvas\" style={{ height: \"600px\", width: \"800px\", border: \"2px solid black\" }}>\n                        <MapZoneBuilder\n                            zoneId={selectedMapId}\n                            onDrawComplete={setVertices}\n                            useLeaflet={false}\n                        />\n                    </div>\n                )}\n            </div>\n\n            <button onClick={saveZone} style={{ marginTop: \"10px\" }}>Save Zone</button>\n        </div>\n    );\n};\n\nexport default ZoneBuilder;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,cAAc;AACrB,OAAO,0BAA0B;AACjC,OAAO,oCAAoC;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACe,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM2B,UAAU,GAAGzB,MAAM,CAAC,IAAIC,CAAC,CAACyB,YAAY,CAAC,CAAC,CAAC;;EAE/C;EACA3B,SAAS,CAAC,MAAM;IACZ,MAAM4B,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,YAAY,GAAG,MAAMC,KAAK,CAAC,uBAAuB,CAAC;QACzD,MAAMC,QAAQ,GAAG,MAAMF,YAAY,CAACG,IAAI,CAAC,CAAC;QAC1CvB,OAAO,CAACsB,QAAQ,CAACvB,IAAI,CAAC;QACtByB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,QAAQ,CAACvB,IAAI,CAAC;QAE7C,MAAM2B,aAAa,GAAG,MAAML,KAAK,CAAC,6BAA6B,CAAC;QAChE,MAAMM,SAAS,GAAG,MAAMD,aAAa,CAACH,IAAI,CAAC,CAAC;QAC5CrB,QAAQ,CAACyB,SAAS,CAAC;QACnBH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,SAAS,CAAC;QAE/C,MAAMC,mBAAmB,GAAG,MAAMP,KAAK,CAAC,+BAA+B,CAAC;QACxE,MAAMQ,eAAe,GAAG,MAAMD,mBAAmB,CAACL,IAAI,CAAC,CAAC;QACxDnB,cAAc,CAACyB,eAAe,CAAC5B,KAAK,CAAC;QACrCuB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEI,eAAe,CAAC5B,KAAK,CAAC;MACjE,CAAC,CAAC,OAAO6B,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D;IACJ,CAAC;IACDX,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI,CAACpB,QAAQ,IAAI,CAACN,aAAa,IAAI,CAACE,gBAAgB,EAAE;MAClDyB,KAAK,CAAC,oEAAoE,CAAC;MAC3E;IACJ;IAEA,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAIlB,UAAU,EAAE;MACZE,UAAU,CAACiB,OAAO,CAACC,SAAS,CAACC,KAAK,IAAI;QAClC,IAAIA,KAAK,YAAY3C,CAAC,CAAC4C,OAAO,EAAE;UAC5B,MAAMC,eAAe,GAAGF,KAAK,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,MAAM;YACjEC,GAAG,EAAEF,KAAK,CAACG,GAAG;YACdC,GAAG,EAAEJ,KAAK,CAACK,GAAG;YACdC,GAAG,EAAE,CAAC;YACNC,KAAK,EAAEN,KAAK,GAAG;UACnB,CAAC,CAAC,CAAC;UACHT,YAAY,GAAG,CAAC,GAAGA,YAAY,EAAE,GAAGK,eAAe,CAAC;QACxD;MACJ,CAAC,CAAC;MACF;MACA,IAAIL,YAAY,CAACgB,MAAM,KAAK,CAAC,EAAE;QAC3BjB,KAAK,CAAC,2EAA2E,CAAC;QAClF;MACJ;IACJ,CAAC,MAAM;MACHC,YAAY,GAAGpB,QAAQ,CAAC2B,GAAG,CAAC,CAACU,CAAC,EAAER,KAAK,MAAM;QACvCC,GAAG,EAAEO,CAAC,CAACC,CAAC;QACRN,GAAG,EAAEK,CAAC,CAACE,CAAC;QACRL,GAAG,EAAE,CAAC;QACNC,KAAK,EAAEN,KAAK,GAAG;MACnB,CAAC,CAAC,CAAC;MACH,IAAIT,YAAY,CAACgB,MAAM,GAAG,CAAC,EAAE;QACzBjB,KAAK,CAAC,uDAAuD,CAAC;QAC9DR,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAEG,YAAY,CAAC;QACvD;MACJ;IACJ;;IAEA;IACA,IAAIA,YAAY,CAACgB,MAAM,GAAG,CAAC,EAAE;MACzBhB,YAAY,CAACoB,IAAI,CAAC;QAAE,GAAGpB,YAAY,CAAC,CAAC,CAAC;QAAEe,KAAK,EAAEf,YAAY,CAACgB,MAAM,GAAG;MAAE,CAAC,CAAC;MACzEzB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,YAAY,CAACA,YAAY,CAACgB,MAAM,GAAG,CAAC,CAAC,CAAC;IACjF;;IAEA;IACA,IAAIK,YAAY,GAAG7C,kBAAkB;IACrC,IAAI6C,YAAY,KAAK,EAAE,IAAIA,YAAY,KAAK,IAAI,EAAE;MAC9CA,YAAY,GAAG,IAAI;IACvB,CAAC,MAAM;MACHA,YAAY,GAAGC,QAAQ,CAACD,YAAY,EAAE,EAAE,CAAC;MACzC,IAAIE,KAAK,CAACF,YAAY,CAAC,EAAE;QACrBtB,KAAK,CAAC,iFAAiF,CAAC;QACxF;MACJ;IACJ;IAEA,MAAMyB,QAAQ,GAAG;MACbC,SAAS,EAAE/C,QAAQ;MACnBgD,MAAM,EAAEtD,aAAa;MACrBuD,UAAU,EAAErD,gBAAgB;MAC5BsD,cAAc,EAAEP,YAAY;MAC5BzC,QAAQ,EAAEoB;IACd,CAAC;IAEDT,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEgC,QAAQ,CAAC;IAE1E,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMzC,KAAK,CAAC,0BAA0B,EAAE;QACrD0C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,QAAQ;MACjC,CAAC,CAAC;MAEF,MAAMW,MAAM,GAAG,MAAMN,QAAQ,CAACvC,IAAI,CAAC,CAAC;MACpC,IAAIuC,QAAQ,CAACO,EAAE,EAAE;QACb7C,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE2C,MAAM,CAAC;QAChDpC,KAAK,CAAC,WAAWrB,QAAQ,oCAAoCyD,MAAM,CAACE,OAAO,EAAE,CAAC;QAC9ExD,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QACjBG,UAAU,CAACiB,OAAO,CAACqC,WAAW,CAAC,CAAC,CAAC,CAAC;MACtC,CAAC,MAAM;QACH/C,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEsC,MAAM,CAAC;QAChDpC,KAAK,CAAC,YAAYoC,MAAM,CAACI,MAAM,IAAI,eAAe,EAAE,CAAC;MACzD;IACJ,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACZN,OAAO,CAACM,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDE,KAAK,CAAC,sDAAsD,CAAC;IACjE;EACJ,CAAC;EAED,oBACIpC,OAAA;IAAA6E,QAAA,gBACI7E,OAAA;MAAA6E,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAErBjF,OAAA;MAAA6E,QAAA,EAAO;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACzBjF,OAAA;MAAQkF,QAAQ,EAAGC,CAAC,IAAKvE,mBAAmB,CAACuE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAACA,KAAK,EAAE1E,gBAAgB,IAAI,EAAG;MAAAkE,QAAA,gBACxF7E,OAAA;QAAQqF,KAAK,EAAC,EAAE;QAAAR,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACzC5E,KAAK,CAACuC,GAAG,CAAC0C,IAAI,iBACXtF,OAAA;QAA8BqF,KAAK,EAAEC,IAAI,CAACtB,UAAW;QAAAa,QAAA,EAChDS,IAAI,CAACxB;MAAS,GADNwB,IAAI,CAACtB,UAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEpB,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAETjF,OAAA;MAAA6E,QAAA,EAAO;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACnBjF,OAAA;MAAQkF,QAAQ,EAAGC,CAAC,IAAKzE,gBAAgB,CAACyE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAACA,KAAK,EAAE5E,aAAa,IAAI,EAAG;MAAAoE,QAAA,gBAClF7E,OAAA;QAAQqF,KAAK,EAAC,EAAE;QAAAR,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACnC9E,IAAI,CAACyC,GAAG,CAACA,GAAG,iBACT5C,OAAA;QAAyBqF,KAAK,EAAEzC,GAAG,CAACmB,MAAO;QAAAc,QAAA,EACtCjC,GAAG,CAAC2C;MAAI,GADA3C,GAAG,CAACmB,MAAM;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEf,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAETjF,OAAA;MAAA6E,QAAA,EAAO;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC3BjF,OAAA;MAAQkF,QAAQ,EAAGC,CAAC,IAAKrE,qBAAqB,CAACqE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAACA,KAAK,EAAExE,kBAAkB,IAAI,EAAG;MAAAgE,QAAA,gBAC5F7E,OAAA;QAAQqF,KAAK,EAAC,EAAE;QAAAR,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC7C1E,WAAW,CAACqC,GAAG,CAAC0C,IAAI,iBACjBtF,OAAA;QAA2BqF,KAAK,EAAEC,IAAI,CAACZ,OAAQ;QAAAG,QAAA,EAC1CS,IAAI,CAACC;MAAI,GADDD,IAAI,CAACZ,OAAO;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAETjF,OAAA;MAAA6E,QAAA,EAAO;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACzBjF,OAAA;MACIwF,IAAI,EAAC,MAAM;MACXH,KAAK,EAAEtE,QAAS;MAChBmE,QAAQ,EAAGC,CAAC,IAAKnE,WAAW,CAACmE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAC7CI,WAAW,EAAC;IAAiB;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAEFjF,OAAA;MAAA6E,QAAA,EAAO;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACnCjF,OAAA;MACIwF,IAAI,EAAC,UAAU;MACfE,OAAO,EAAEvE,UAAW;MACpB+D,QAAQ,EAAGC,CAAC,IAAK/D,aAAa,CAAC+D,CAAC,CAACC,MAAM,CAACM,OAAO;IAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eAEFjF,OAAA;MAAK2F,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAjB,QAAA,EACpE1D,UAAU,gBACPnB,OAAA;QAAK+F,EAAE,EAAC,SAAS;QAACJ,KAAK,EAAE;UAAEK,MAAM,EAAE,OAAO;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAkB,CAAE;QAAArB,QAAA,eACpF7E,OAAA,CAACF,cAAc;UACXqG,MAAM,EAAE1F,aAAc;UACtB2F,cAAc,EAAElF,WAAY;UAC5BC,UAAU,EAAE,IAAK;UACjBE,UAAU,EAAEA,UAAU,CAACiB;QAAQ;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,gBAENjF,OAAA;QAAK+F,EAAE,EAAC,YAAY;QAACJ,KAAK,EAAE;UAAEK,MAAM,EAAE,OAAO;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAkB,CAAE;QAAArB,QAAA,eACvF7E,OAAA,CAACF,cAAc;UACXqG,MAAM,EAAE1F,aAAc;UACtB2F,cAAc,EAAElF,WAAY;UAC5BC,UAAU,EAAE;QAAM;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IACR;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAENjF,OAAA;MAAQqG,OAAO,EAAElE,QAAS;MAACwD,KAAK,EAAE;QAAEG,SAAS,EAAE;MAAO,CAAE;MAAAjB,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEd,CAAC;AAAC/E,EAAA,CAxMID,WAAW;AAAAqG,EAAA,GAAXrG,WAAW;AA0MjB,eAAeA,WAAW;AAAC,IAAAqG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}