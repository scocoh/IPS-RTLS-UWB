{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\nimport \"./Map.css\"; // Canvas styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor,\n  useLeaflet\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0); // For debouncing double-click\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Leaflet rendering logic (Fixed scaling issue)\n  useEffect(() => {\n    if (mapData && mapRef.current && useLeaflet && !isInitialized.current) {\n      // Initialize Leaflet map\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple,\n        minZoom: -5,\n        maxZoom: 5,\n        zoomControl: true,\n        attributionControl: false\n      });\n\n      // Remove default tile layer\n      mapInstance.current.eachLayer(layer => {\n        if (layer instanceof L.TileLayer) mapInstance.current.removeLayer(layer);\n      });\n\n      // ✅ Corrected Bounds Order: Ensure correct [min_x, min_y], [max_x, max_y] order\n      const boundsFromApi = [[mapData.bounds[0][0], mapData.bounds[0][1]],\n      // Correct: [min_x, min_y]\n      [mapData.bounds[1][0], mapData.bounds[1][1]] // Correct: [max_x, max_y]\n      ];\n      const xMin = boundsFromApi[0][0];\n      const xMax = boundsFromApi[1][0];\n      const yMin = boundsFromApi[0][1];\n      const yMax = boundsFromApi[1][1];\n      const xRange = xMax - xMin;\n      const yRange = yMax - yMin;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      img.onload = () => {\n        // ✅ Fix Image Overlay: Ensure correct map scaling\n        L.imageOverlay(mapData.imageUrl, boundsFromApi).addTo(mapInstance.current);\n        mapInstance.current.fitBounds(boundsFromApi);\n        mapInstance.current.addLayer(drawnItems.current);\n        const colorMap = {\n          red: \"#ff0000\",\n          green: \"#00ff00\",\n          blue: \"#0000ff\"\n        };\n        const drawControl = new L.Control.Draw({\n          edit: {\n            featureGroup: drawnItems.current\n          },\n          draw: {\n            polygon: {\n              shapeOptions: {\n                color: colorMap[triggerColor] || \"#ff0000\",\n                weight: 2\n              }\n            },\n            rectangle: false,\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false\n          }\n        });\n        mapInstance.current.addControl(drawControl);\n        mapInstance.current.on(L.Draw.Event.CREATED, event => {\n          const layer = event.layer;\n          drawnItems.current.addLayer(layer);\n\n          // ✅ Fix Trigger Scaling: Convert LatLng to Correct `n_x, n_y` values\n          const coords = layer.getLatLngs()[0].map((latLng, index) => {\n            const x = xMin + (latLng.lng - xMin) / (xMax - xMin) * xRange;\n            const y = yMax - (latLng.lat - yMin) / (yMax - yMin) * yRange; // Flip y-axis\n\n            return {\n              n_x: x,\n              n_y: y,\n              n_z: 0,\n              n_ord: index + 1\n            };\n          });\n          console.log(\"Corrected Scaled Points (Leaflet):\", coords);\n          if (onDrawComplete) onDrawComplete(JSON.stringify(coords));\n        });\n        isInitialized.current = true;\n      };\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false;\n      }\n      if (mapData && imageRef.current) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData]);\n  if (useLeaflet) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginBottom: \"10px\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          height: \"500px\",\n          width: \"600px\",\n          border: \"2px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: \"red\",\n          marginBottom: \"10px\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        id: \"map\",\n        style: {\n          border: \"2px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n}, \"EI8l5aLdB35i+ycwhzkIOJMQcdo=\")), \"EI8l5aLdB35i+ycwhzkIOJMQcdo=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"Map$memo\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","Map","_s","_c","zoneId","onDrawComplete","triggerColor","useLeaflet","mapRef","mapInstance","drawnItems","FeatureGroup","canvasRef","mapData","setMapData","error","setError","isInitialized","points","isDrawing","ctxRef","imageRef","lastClickTime","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","current","map","crs","CRS","Simple","minZoom","maxZoom","zoomControl","attributionControl","eachLayer","layer","TileLayer","removeLayer","boundsFromApi","bounds","xMin","xMax","yMin","yMax","xRange","yRange","img","Image","crossOrigin","src","imageUrl","onload","imageOverlay","addTo","fitBounds","addLayer","colorMap","red","green","blue","drawControl","Control","Draw","edit","featureGroup","draw","polygon","shapeOptions","color","weight","rectangle","polyline","circle","marker","circlemarker","addControl","on","Event","CREATED","event","coords","getLatLngs","latLng","index","x","lng","y","lat","n_x","n_y","n_z","n_ord","JSON","stringify","onerror","remove","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","height","width","border","id","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\nimport \"./Map.css\"; // Canvas styling\n\nconst Map = memo(({ zoneId, onDrawComplete, triggerColor, useLeaflet }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  const lastClickTime = useRef(0); // For debouncing double-click\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Leaflet rendering logic (Fixed scaling issue)\n  useEffect(() => {\n    if (mapData && mapRef.current && useLeaflet && !isInitialized.current) {\n      // Initialize Leaflet map\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple,\n        minZoom: -5,\n        maxZoom: 5,\n        zoomControl: true,\n        attributionControl: false,\n      });\n\n      // Remove default tile layer\n      mapInstance.current.eachLayer((layer) => {\n        if (layer instanceof L.TileLayer) mapInstance.current.removeLayer(layer);\n      });\n\n      // ✅ Corrected Bounds Order: Ensure correct [min_x, min_y], [max_x, max_y] order\n      const boundsFromApi = [\n        [mapData.bounds[0][0], mapData.bounds[0][1]], // Correct: [min_x, min_y]\n        [mapData.bounds[1][0], mapData.bounds[1][1]]  // Correct: [max_x, max_y]\n      ];\n\n      const xMin = boundsFromApi[0][0];\n      const xMax = boundsFromApi[1][0];\n      const yMin = boundsFromApi[0][1];\n      const yMax = boundsFromApi[1][1];\n\n      const xRange = xMax - xMin;\n      const yRange = yMax - yMin;\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n\n      img.onload = () => {\n        // ✅ Fix Image Overlay: Ensure correct map scaling\n        L.imageOverlay(mapData.imageUrl, boundsFromApi).addTo(mapInstance.current);\n        mapInstance.current.fitBounds(boundsFromApi);\n\n        mapInstance.current.addLayer(drawnItems.current);\n\n        const colorMap = {\n          red: \"#ff0000\",\n          green: \"#00ff00\",\n          blue: \"#0000ff\",\n        };\n\n        const drawControl = new L.Control.Draw({\n          edit: { featureGroup: drawnItems.current },\n          draw: {\n            polygon: {\n              shapeOptions: { color: colorMap[triggerColor] || \"#ff0000\", weight: 2 },\n            },\n            rectangle: false,\n            polyline: false,\n            circle: false,\n            marker: false,\n            circlemarker: false,\n          },\n        });\n        mapInstance.current.addControl(drawControl);\n\n        mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n          const layer = event.layer;\n          drawnItems.current.addLayer(layer);\n\n          // ✅ Fix Trigger Scaling: Convert LatLng to Correct `n_x, n_y` values\n          const coords = layer.getLatLngs()[0].map((latLng, index) => {\n            const x = xMin + ((latLng.lng - xMin) / (xMax - xMin)) * xRange;\n            const y = yMax - ((latLng.lat - yMin) / (yMax - yMin)) * yRange; // Flip y-axis\n\n            return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 };\n          });\n\n          console.log(\"Corrected Scaled Points (Leaflet):\", coords);\n          if (onDrawComplete) onDrawComplete(JSON.stringify(coords));\n        });\n\n        isInitialized.current = true;\n      };\n\n      img.onerror = () => {\n        console.error(\"Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n    }\n  }, [mapData, onDrawComplete, triggerColor, useLeaflet]);\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false;\n      }\n      if (mapData && imageRef.current) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData]);\n\n  if (useLeaflet) {\n    return (\n      <div>\n        {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n        <div ref={mapRef} style={{ height: \"500px\", width: \"600px\", border: \"2px solid black\" }} />\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n        <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n      </div>\n    );\n  }\n});\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}