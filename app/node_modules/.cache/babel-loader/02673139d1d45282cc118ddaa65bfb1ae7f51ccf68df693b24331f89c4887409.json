{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, ImageOverlay, TileLayer, FeatureGroup, useMap } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ZoneBuilder = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [zones, setZones] = useState([]);\n  useEffect(() => {\n    fetchMaps();\n  }, []);\n  const fetchMaps = async () => {\n    try {\n      const response = await fetch(\"/maps/get_maps\");\n      const data = await response.json();\n      if (response.ok) {\n        setMaps(data);\n      } else {\n        throw new Error(\"Failed to load maps.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading maps:\", error);\n    }\n  };\n  const handleMapChange = async mapId => {\n    setSelectedMap(mapId);\n    setImageSrc(null); // Reset image\n    try {\n      const response = await fetch(`/maps/map_image/${mapId}`);\n      if (!response.ok) throw new Error(\"Failed to load image.\");\n      const blob = await response.blob();\n      setImageSrc(URL.createObjectURL(blob));\n    } catch (error) {\n      console.error(\"Error loading map image:\", error);\n    }\n\n    // Fetch zones for the selected map\n    try {\n      const response = await fetch(`/zones/get_zones_by_map/${mapId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setZones(data || []); // Ensure it's always an array\n      } else {\n        throw new Error(\"Failed to load zones.\");\n      }\n    } catch (error) {\n      console.error(\"Error loading zones:\", error);\n      setZones([]); // Default to empty array\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Zone Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Map:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => handleMapChange(e.target.value),\n      value: selectedMap || \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"-- Select a Map --\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), maps.map(map => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: map.i_map,\n        children: map.x_nm_map\n      }, map.i_map, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), imageSrc ? /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [0, 0],\n      zoom: 2,\n      style: {\n        height: \"500px\",\n        width: \"80%\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: imageSrc,\n        bounds: [[-100, -100], [100, 100]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FeatureGroup, {\n        children: /*#__PURE__*/_jsxDEV(EditControl, {\n          position: \"topright\",\n          draw: {\n            rectangle: false,\n            circle: false,\n            circlemarker: false,\n            marker: false\n          },\n          onCreated: e => console.log(\"Created zone:\", e.layer.toGeoJSON())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: \"20px\",\n        color: \"red\"\n      },\n      children: \"No image available for this map. Please select a different map.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(ZoneBuilder, \"waTIlQsEMxTt7V67EhspV0v321s=\");\n_c = ZoneBuilder;\nexport default ZoneBuilder;\nvar _c;\n$RefreshReg$(_c, \"ZoneBuilder\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","ImageOverlay","TileLayer","FeatureGroup","useMap","EditControl","jsxDEV","_jsxDEV","ZoneBuilder","_s","maps","setMaps","selectedMap","setSelectedMap","imageSrc","setImageSrc","zones","setZones","fetchMaps","response","fetch","data","json","ok","Error","error","console","handleMapChange","mapId","blob","URL","createObjectURL","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","map","i_map","x_nm_map","center","zoom","height","width","marginTop","url","attribution","bounds","position","draw","rectangle","circle","circlemarker","marker","onCreated","log","layer","toGeoJSON","color","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MapContainer, ImageOverlay, TileLayer, FeatureGroup, useMap } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\n\nconst ZoneBuilder = () => {\n    const [maps, setMaps] = useState([]);\n    const [selectedMap, setSelectedMap] = useState(null);\n    const [imageSrc, setImageSrc] = useState(null);\n    const [zones, setZones] = useState([]);\n\n    useEffect(() => {\n        fetchMaps();\n    }, []);\n\n    const fetchMaps = async () => {\n        try {\n            const response = await fetch(\"/maps/get_maps\");\n            const data = await response.json();\n            if (response.ok) {\n                setMaps(data);\n            } else {\n                throw new Error(\"Failed to load maps.\");\n            }\n        } catch (error) {\n            console.error(\"Error loading maps:\", error);\n        }\n    };\n\n    const handleMapChange = async (mapId) => {\n        setSelectedMap(mapId);\n        setImageSrc(null); // Reset image\n        try {\n            const response = await fetch(`/maps/map_image/${mapId}`);\n            if (!response.ok) throw new Error(\"Failed to load image.\");\n            const blob = await response.blob();\n            setImageSrc(URL.createObjectURL(blob));\n        } catch (error) {\n            console.error(\"Error loading map image:\", error);\n        }\n\n        // Fetch zones for the selected map\n        try {\n            const response = await fetch(`/zones/get_zones_by_map/${mapId}`);\n            const data = await response.json();\n            if (response.ok) {\n                setZones(data || []); // Ensure it's always an array\n            } else {\n                throw new Error(\"Failed to load zones.\");\n            }\n        } catch (error) {\n            console.error(\"Error loading zones:\", error);\n            setZones([]); // Default to empty array\n        }\n    };\n\n    return (\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n            <h2>Zone Builder</h2>\n            <label>Select Map:</label>\n            <select onChange={(e) => handleMapChange(e.target.value)} value={selectedMap || \"\"}>\n                <option value=\"\">-- Select a Map --</option>\n                {maps.map((map) => (\n                    <option key={map.i_map} value={map.i_map}>{map.x_nm_map}</option>\n                ))}\n            </select>\n\n            {imageSrc ? (\n                <MapContainer\n                    center={[0, 0]}\n                    zoom={2}\n                    style={{ height: \"500px\", width: \"80%\", marginTop: \"20px\" }}\n                >\n                    <TileLayer\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                    />\n                    <ImageOverlay url={imageSrc} bounds={[[-100, -100], [100, 100]]} />\n                    <FeatureGroup>\n                        <EditControl\n                            position=\"topright\"\n                            draw={{\n                                rectangle: false,\n                                circle: false,\n                                circlemarker: false,\n                                marker: false,\n                            }}\n                            onCreated={(e) => console.log(\"Created zone:\", e.layer.toGeoJSON())}\n                        />\n                    </FeatureGroup>\n                </MapContainer>\n            ) : (\n                <p style={{ marginTop: \"20px\", color: \"red\" }}>\n                    No image available for this map. Please select a different map.\n                </p>\n            )}\n        </div>\n    );\n};\n\nexport default ZoneBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}