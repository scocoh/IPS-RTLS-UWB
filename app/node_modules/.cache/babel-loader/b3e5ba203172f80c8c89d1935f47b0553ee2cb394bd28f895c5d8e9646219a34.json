{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\",\n  _s = $RefreshSig$();\n// /home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport MapZoneBuilder from \"./MapZoneBuilder\";\nimport \"./ZoneBuilder.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ZoneBuilder = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedMapId, setSelectedMapId] = useState(null);\n  const [selectedZoneType, setSelectedZoneType] = useState(null);\n  const [selectedParentZone, setSelectedParentZone] = useState(null);\n  const [zoneName, setZoneName] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  useEffect(() => {\n    fetch(\"/zonebuilder/get_maps\").then(response => response.json()).then(data => setMaps(data.maps)).catch(error => console.error(\"‚ùå Error fetching maps:\", error));\n    fetch(\"/zonebuilder/get_zone_types\").then(response => response.json()).then(data => setZones(data)).catch(error => console.error(\"‚ùå Error fetching zones:\", error));\n    fetch(\"/zonebuilder/get_parent_zones\").then(response => response.json()).then(data => setParentZones(data.zones)).catch(error => console.error(\"‚ùå Error fetching parent zones:\", error));\n  }, []);\n  const saveZone = async () => {\n    if (vertices.length === 0) {\n      alert(\"‚ö†Ô∏è No vertices detected! Please draw a zone before saving.\");\n      return;\n    }\n    const zoneData = {\n      zone_name: zoneName,\n      map_id: selectedMapId,\n      zone_level: selectedZoneType,\n      parent_zone_id: selectedParentZone || null,\n      vertices: vertices\n    };\n    console.log(\"üì° Sending Zone Data:\", zoneData);\n    try {\n      const response = await fetch(\"/zonebuilder/create_zone\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(zoneData)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        alert(`‚úÖ Zone '${zoneName}' created successfully!`);\n      } else {\n        alert(`‚ùå Error: ${result.detail}`);\n      }\n    } catch (error) {\n      console.error(\"‚ùå Error creating zone:\", error);\n      alert(\"‚ö†Ô∏è Failed to create zone\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Zone Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapZoneBuilder, {\n      zoneId: selectedMapId,\n      onDrawComplete: setVertices\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveZone,\n      children: \"Save Zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(ZoneBuilder, \"u/+wQ3+ssIbJOBV4RQFxR5Bp4+Y=\");\n_c = ZoneBuilder;\nexport default ZoneBuilder;\nvar _c;\n$RefreshReg$(_c, \"ZoneBuilder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","L","MapZoneBuilder","jsxDEV","_jsxDEV","ZoneBuilder","_s","maps","setMaps","zones","setZones","parentZones","setParentZones","selectedMapId","setSelectedMapId","selectedZoneType","setSelectedZoneType","selectedParentZone","setSelectedParentZone","zoneName","setZoneName","vertices","setVertices","fetch","then","response","json","data","catch","error","console","saveZone","length","alert","zoneData","zone_name","map_id","zone_level","parent_zone_id","log","method","headers","body","JSON","stringify","result","ok","detail","children","fileName","_jsxFileName","lineNumber","columnNumber","zoneId","onDrawComplete","onClick","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js"],"sourcesContent":["// /home/parcoadmin/parco_fastapi/app/src/components/ZoneBuilder.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport MapZoneBuilder from \"./MapZoneBuilder\";\nimport \"./ZoneBuilder.css\";\n\nconst ZoneBuilder = () => {\n    const [maps, setMaps] = useState([]);\n    const [zones, setZones] = useState([]);\n    const [parentZones, setParentZones] = useState([]);\n    const [selectedMapId, setSelectedMapId] = useState(null);\n    const [selectedZoneType, setSelectedZoneType] = useState(null);\n    const [selectedParentZone, setSelectedParentZone] = useState(null);\n    const [zoneName, setZoneName] = useState(\"\");\n    const [vertices, setVertices] = useState([]); \n\n    useEffect(() => {\n        fetch(\"/zonebuilder/get_maps\")\n            .then(response => response.json())\n            .then(data => setMaps(data.maps))\n            .catch(error => console.error(\"‚ùå Error fetching maps:\", error));\n\n        fetch(\"/zonebuilder/get_zone_types\")\n            .then(response => response.json())\n            .then(data => setZones(data))\n            .catch(error => console.error(\"‚ùå Error fetching zones:\", error));\n\n        fetch(\"/zonebuilder/get_parent_zones\")\n            .then(response => response.json())\n            .then(data => setParentZones(data.zones))\n            .catch(error => console.error(\"‚ùå Error fetching parent zones:\", error));\n    }, []);\n\n    const saveZone = async () => {\n        if (vertices.length === 0) {\n            alert(\"‚ö†Ô∏è No vertices detected! Please draw a zone before saving.\");\n            return;\n        }\n\n        const zoneData = {\n            zone_name: zoneName,\n            map_id: selectedMapId,\n            zone_level: selectedZoneType,\n            parent_zone_id: selectedParentZone || null,\n            vertices: vertices,\n        };\n\n        console.log(\"üì° Sending Zone Data:\", zoneData);\n\n        try {\n            const response = await fetch(\"/zonebuilder/create_zone\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(zoneData),\n            });\n\n            const result = await response.json();\n            if (response.ok) {\n                alert(`‚úÖ Zone '${zoneName}' created successfully!`);\n            } else {\n                alert(`‚ùå Error: ${result.detail}`);\n            }\n        } catch (error) {\n            console.error(\"‚ùå Error creating zone:\", error);\n            alert(\"‚ö†Ô∏è Failed to create zone\");\n        }\n    };\n\n    return (\n        <div>\n            <h2>Zone Builder</h2>\n            <MapZoneBuilder zoneId={selectedMapId} onDrawComplete={setVertices} />\n            <button onClick={saveZone}>Save Zone</button>\n        </div>\n    );\n};\n\nexport default ZoneBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}