{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport \"./TriggerDemo.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TriggerDemo = () => {\n  _s();\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(null);\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false\n  });\n  const [error, setError] = useState(null);\n  const [showMapForDrawing, setShowMapForDrawing] = useState(false);\n  const [useLeaflet, setUseLeaflet] = useState(false);\n  const [zoneName, setZoneName] = useState(\"\");\n  const [selectedZoneForEdit, setSelectedZoneForEdit] = useState(null);\n  const [zoneVertices, setZoneVertices] = useState([]);\n  const fetchData = async (url, setter, key, transform = data => data) => {\n    setLoading(prev => ({\n      ...prev,\n      [key]: true\n    }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n      setError(null);\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n      setError(`Error fetching ${key}: ${error.message}`);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [key]: false\n      }));\n    }\n  };\n  useEffect(() => {\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", data => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n    fetchData(\"/api/get_all_zones\", setZones, \"zones\");\n  }, []);\n  const flattenZones = zones => {\n    const result = [];\n    const flatten = zone => {\n      result.push(zone);\n      if (zone.children && zone.children.length > 0) {\n        zone.children.forEach(child => flatten(child));\n      }\n    };\n    zones.forEach(zone => flatten(zone));\n    return result;\n  };\n  useEffect(() => {\n    if (selectedParentZone) {\n      const zoneId = parseInt(selectedParentZone);\n      fetchData(`/maps/get_campus_zones/${zoneId}`, data => {\n        const flattenedZones = flattenZones(data.zones || []);\n        setZones(flattenedZones);\n      }, \"zones\");\n    }\n  }, [selectedParentZone]);\n  useEffect(() => {\n    if (selectedZone) {\n      fetch(`/maps/get_map_data/${selectedZone}`).then(response => response.json()).then(data => {\n        setSelectedMapId(data.map_id || selectedZone);\n      }).catch(error => console.error(\"Error fetching map data:\", error));\n    }\n  }, [selectedZone]);\n  const handleCreateTrigger = useCallback(async () => {\n    if (!triggerName || !selectedZone || !triggerDirection) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Direction).\");\n      return;\n    }\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n    console.log(\"Current coordinates before save:\", coordinates);\n    if (!coordinates) {\n      alert(\"Please draw the trigger on the map (click to add points, double-click to finish).\");\n      return;\n    }\n    const selectedDirectionObj = triggerDirections.find(dir => dir.x_dir === triggerDirection);\n    const directionId = selectedDirectionObj ? selectedDirectionObj.i_dir : null;\n    if (!directionId) {\n      alert(\"Invalid direction selected.\");\n      return;\n    }\n    const triggerData = {\n      name: triggerName,\n      direction: directionId,\n      zone_id: parseInt(selectedZone),\n      ignore: true,\n      coordinates: JSON.parse(coordinates)\n    };\n    console.log(\"Sending triggerData to /api/add_trigger:\", triggerData);\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(triggerData)\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([...eventList, `${triggerName} created at ${coordinates} with ${triggerDirection} direction`]);\n      setCoordinates(\"\");\n      setShowMapForDrawing(false);\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  }, [triggerName, selectedZone, triggerDirection, coordinates, showMapForDrawing, triggerDirections]);\n  const handleDrawComplete = useCallback(coords => {\n    setCoordinates(coords);\n  }, []);\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\")).map(cb => parseInt(cb.value)).filter(id => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n    setLoading(prev => ({\n      ...prev,\n      vertices: true\n    }));\n    try {\n      const vertexPromises = checkedZones.map(zoneId => fetch(`/api/get_zone_vertices/${zoneId}`).then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      }).then(data => data || []));\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(allVertices.reduce((acc, v) => ({\n        ...acc,\n        [v.i_vtx]: v\n      }), {}));\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        vertices: false\n      }));\n    }\n  };\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: {\n        ...prev[vertexId],\n        [field]: parseFloat(value) || 0\n      }\n    }));\n  };\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map(v => ({\n      vertex_id: v.i_vtx,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n    console.log(\"Sending vertices to /api/update_vertices:\", updatedVertices);\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedVertices)\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(`/api/get_zone_vertices/${selectedZone}`, setVertices, \"vertices\", data => data || []);\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Zone Builder Logic\n  const handleCreateZone = async () => {\n    if (!zoneName || !selectedZone) {\n      alert(\"Please provide a zone name and select a zone.\");\n      return;\n    }\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n    if (!coordinates) {\n      alert(\"Please draw the zone on the map (click to add points, double-click to finish).\");\n      return;\n    }\n    const zoneData = {\n      name: zoneName,\n      vertices: JSON.parse(coordinates)\n    };\n    try {\n      const response = await fetch(\"/api/add_zone\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(zoneData)\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Zone created with ID: ${result.zone_id}`);\n      setCoordinates(\"\");\n      setZoneName(\"\");\n      setShowMapForDrawing(false);\n      fetchData(\"/api/get_all_zones\", setZones, \"zones\"); // Refresh zones\n    } catch (error) {\n      console.error(\"Error creating zone:\", error);\n      alert(`Error creating zone: ${error.message}`);\n    }\n  };\n\n  // Zone Editor Logic\n  const loadZoneVertices = async zoneId => {\n    try {\n      const response = await fetch(`/api/get_zone_vertices/${zoneId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch zone vertices\");\n      const vertices = await response.json();\n      setZoneVertices(vertices);\n    } catch (error) {\n      console.error(\"Error loading zone vertices:\", error);\n      alert(`Error loading zone vertices: ${error.message}`);\n    }\n  };\n  const handleZoneVertexChange = (ord, field, value) => {\n    setZoneVertices(prev => prev.map(v => v.ord === ord ? {\n      ...v,\n      [field]: parseFloat(value) || 0\n    } : v));\n  };\n  const saveZoneVertices = async () => {\n    try {\n      const response = await fetch(\"/api/update_zone_vertices\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(zoneVertices.map(v => ({\n          zone_id: selectedZoneForEdit,\n          x: v.x,\n          y: v.y,\n          z: v.z,\n          ord: v.ord\n        })))\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Zone vertices updated successfully!\");\n    } catch (error) {\n      console.error(\"Error saving zone vertices:\", error);\n      alert(`Error saving zone vertices: ${error.message}`);\n    }\n  };\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map(direction => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: direction.x_dir,\n      children: direction.x_dir\n    }, direction.i_dir, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this));\n  }, [triggerDirections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ParcoRTLS Trigger Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"mapAndTrigger\",\n      id: \"trigger-demo-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"mapAndTrigger\",\n        title: \"Map & Trigger\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trigger-map-section\",\n          children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trigger-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Trigger Name\",\n              value: triggerName,\n              onChange: e => setTriggerName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedParentZone,\n              onChange: e => setSelectedParentZone(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Parent Zone\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 17\n              }, this), loading.parentZones ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this) : parentZones.map(pz => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: pz.zone_id.toString(),\n                children: pz.name\n              }, pz.zone_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerDirection,\n              onChange: e => setTriggerDirection(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Direction\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 17\n              }, this), loading.triggerDirections ? /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 19\n              }, this) : directionOptions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Top Elevation (Zmax)\",\n              value: topElevation,\n              onChange: e => setTopElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Bottom Elevation (Zmin)\",\n              value: bottomElevation,\n              onChange: e => setBottomElevation(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: triggerColor,\n              onChange: e => setTriggerColor(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"red\",\n                children: \"Red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"green\",\n                children: \"Green\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"blue\",\n                children: \"Blue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Render with Leaflet:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: useLeaflet,\n                onChange: e => setUseLeaflet(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCreateTrigger,\n              children: showMapForDrawing ? \"Save Trigger\" : \"Create Trigger\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Select a Zone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"zoneList\",\n              children: loading.zones ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Loading zones...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this) : zones.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No zones available for this parent zone.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 19\n              }, this) : zones.map(zone => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  value: zone.zone_id.toString(),\n                  checked: selectedZone === zone.zone_id.toString(),\n                  onChange: e => setSelectedZone(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: zone.zone_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 23\n                }, this)]\n              }, zone.zone_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this), showMapForDrawing && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  color: \"blue\",\n                  margin: \"10px 0\"\n                },\n                children: \"Click to add points, double-click to finish the trigger shape.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Map, {\n                zoneId: parseInt(selectedZone),\n                onDrawComplete: handleDrawComplete,\n                triggerColor: triggerColor,\n                useLeaflet: useLeaflet\n              }, selectedZone, false, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edit Trigger Vertices\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"vertexTable\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Vertex #\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"X Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Y Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Z Coordinate\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: Object.values(editedVertices).map((v, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: i + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.x || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"x\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 468,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 467,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.y || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"y\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 477,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    value: v.z || 0,\n                    onChange: e => handleVertexChange(v.i_vtx, \"z\", e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 486,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 21\n                }, this)]\n              }, v.i_vtx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: loadVerticesForSelectedZones,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: saveAllVertices,\n            disabled: loading.vertices,\n            children: loading.vertices ? \"Saving...\" : \"Save All Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"zoneBuilder\",\n        title: \"Zone Builder\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"zone-builder-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Create Zone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Zone Name\",\n            value: zoneName,\n            onChange: e => setZoneName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedZone,\n            onChange: e => setSelectedZone(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Zone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 15\n            }, this), zones.map(zone => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: zone.zone_id.toString(),\n              children: zone.name\n            }, zone.zone_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCreateZone,\n            children: showMapForDrawing ? \"Save Zone\" : \"Create Zone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this), showMapForDrawing && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: \"blue\",\n                margin: \"10px 0\"\n              },\n              children: \"Click to add points, double-click to finish the zone shape.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Map, {\n              zoneId: parseInt(selectedZone),\n              onDrawComplete: handleDrawComplete,\n              triggerColor: triggerColor,\n              useLeaflet: useLeaflet\n            }, selectedZone, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"zoneViewer\",\n        title: \"Zone Viewer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"zone-viewer-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"View Zones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedZone,\n            onChange: e => setSelectedZone(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Zone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 15\n            }, this), zones.map(zone => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: zone.zone_id.toString(),\n              children: zone.name\n            }, zone.zone_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), selectedZone && /*#__PURE__*/_jsxDEV(Map, {\n            zoneId: parseInt(selectedZone),\n            onDrawComplete: () => {},\n            triggerColor: triggerColor,\n            useLeaflet: useLeaflet\n          }, selectedZone, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"zoneEditor\",\n        title: \"Zone Editor\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"zone-editor-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Edit Zones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedZoneForEdit || \"\",\n            onChange: e => {\n              setSelectedZoneForEdit(e.target.value);\n              if (e.target.value) loadZoneVertices(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Zone to Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 15\n            }, this), zones.map(zone => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: zone.zone_id.toString(),\n              children: zone.name\n            }, zone.zone_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this), selectedZoneForEdit && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Vertex #\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 598,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"X Coordinate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 599,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Y Coordinate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 600,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Z Coordinate\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 601,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 596,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: zoneVertices.map(v => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: v.ord\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 607,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"number\",\n                      value: v.x,\n                      onChange: e => handleZoneVertexChange(v.ord, \"x\", e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 609,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 608,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"number\",\n                      value: v.y,\n                      onChange: e => handleZoneVertexChange(v.ord, \"y\", e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 618,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"number\",\n                      value: v.z,\n                      onChange: e => handleZoneVertexChange(v.ord, \"z\", e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 627,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 626,\n                    columnNumber: 25\n                  }, this)]\n                }, v.ord, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveZoneVertices,\n              children: \"Save Zone Vertices\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Map, {\n              zoneId: parseInt(selectedZone),\n              onDrawComplete: () => {},\n              triggerColor: triggerColor,\n              useLeaflet: useLeaflet\n            }, selectedZoneForEdit, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this); // Ensure this closing parenthesis is correctly placed\n};\n_s(TriggerDemo, \"IGyiqU4WNruXlqszDtEsMN3ape4=\");\n_c = TriggerDemo;\nexport default TriggerDemo; // Ensure this is outside the function block\nvar _c;\n$RefreshReg$(_c, \"TriggerDemo\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Tabs","Tab","Map","jsxDEV","_jsxDEV","Fragment","_Fragment","TriggerDemo","_s","maps","setMaps","zones","setZones","triggerDirections","setTriggerDirections","selectedZone","setSelectedZone","selectedMapId","setSelectedMapId","triggerName","setTriggerName","triggerDirection","setTriggerDirection","topElevation","setTopElevation","bottomElevation","setBottomElevation","triggerColor","setTriggerColor","eventList","setEventList","coordinates","setCoordinates","parentZones","setParentZones","selectedParentZone","setSelectedParentZone","vertices","setVertices","editedVertices","setEditedVertices","loading","setLoading","error","setError","showMapForDrawing","setShowMapForDrawing","useLeaflet","setUseLeaflet","zoneName","setZoneName","selectedZoneForEdit","setSelectedZoneForEdit","zoneVertices","setZoneVertices","fetchData","url","setter","key","transform","data","prev","response","fetch","ok","text","Error","status","json","console","log","message","flattenZones","result","flatten","zone","push","children","length","forEach","child","zoneId","parseInt","flattenedZones","then","map_id","catch","handleCreateTrigger","alert","selectedDirectionObj","find","dir","x_dir","directionId","i_dir","triggerData","name","direction","zone_id","ignore","JSON","parse","method","headers","body","stringify","trigger_id","handleDrawComplete","coords","loadVerticesForSelectedZones","checkedZones","Array","from","document","querySelectorAll","map","cb","value","filter","id","isNaN","vertexPromises","allVertices","Promise","all","flat","reduce","acc","v","i_vtx","handleVertexChange","vertexId","field","parseFloat","saveAllVertices","updatedVertices","Object","values","vertex_id","x","y","z","handleCreateZone","zoneData","loadZoneVertices","handleZoneVertexChange","ord","saveZoneVertices","directionOptions","fileName","_jsxFileName","lineNumber","columnNumber","defaultActiveKey","eventKey","title","className","style","color","type","placeholder","onChange","e","target","pz","toString","Number","checked","onClick","zone_name","margin","onDrawComplete","i","disabled","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/TriggerDemo.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport Map from \"./components/Map\";\nimport \"./TriggerDemo.css\";\n\nconst TriggerDemo = () => {\n  const [maps, setMaps] = useState([]);\n  const [zones, setZones] = useState([]);\n  const [triggerDirections, setTriggerDirections] = useState([]);\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(null);\n  const [triggerName, setTriggerName] = useState(\"\");\n  const [triggerDirection, setTriggerDirection] = useState(\"\");\n  const [topElevation, setTopElevation] = useState(8);\n  const [bottomElevation, setBottomElevation] = useState(-1);\n  const [triggerColor, setTriggerColor] = useState(\"red\");\n  const [eventList, setEventList] = useState([]);\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [parentZones, setParentZones] = useState([]);\n  const [selectedParentZone, setSelectedParentZone] = useState(\"\");\n  const [vertices, setVertices] = useState([]);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [loading, setLoading] = useState({\n    maps: false,\n    parentZones: false,\n    triggerDirections: false,\n    zones: false,\n    vertices: false,\n  });\n  const [error, setError] = useState(null);\n  const [showMapForDrawing, setShowMapForDrawing] = useState(false);\n  const [useLeaflet, setUseLeaflet] = useState(false);\n  const [zoneName, setZoneName] = useState(\"\");\n  const [selectedZoneForEdit, setSelectedZoneForEdit] = useState(null);\n  const [zoneVertices, setZoneVertices] = useState([]);\n\n  const fetchData = async (url, setter, key, transform = (data) => data) => {\n    setLoading((prev) => ({ ...prev, [key]: true }));\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const data = await response.json();\n      console.log(`${key} data:`, data);\n      setter(transform(data));\n      setError(null);\n    } catch (error) {\n      console.error(`Error fetching ${key}:`, error);\n      setError(`Error fetching ${key}: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, [key]: false }));\n    }\n  };\n\n  useEffect(() => {\n    fetchData(\"/maps/get_maps\", setMaps, \"maps\");\n    fetchData(\"/api/get_parent_zones\", setParentZones, \"parentZones\", (data) => data.zones);\n    fetchData(\"/api/list_trigger_directions\", setTriggerDirections, \"triggerDirections\");\n    fetchData(\"/api/get_all_zones\", setZones, \"zones\");\n  }, []);\n\n  const flattenZones = (zones) => {\n    const result = [];\n    const flatten = (zone) => {\n      result.push(zone);\n      if (zone.children && zone.children.length > 0) {\n        zone.children.forEach((child) => flatten(child));\n      }\n    };\n    zones.forEach((zone) => flatten(zone));\n    return result;\n  };\n\n  useEffect(() => {\n    if (selectedParentZone) {\n      const zoneId = parseInt(selectedParentZone);\n      fetchData(`/maps/get_campus_zones/${zoneId}`, (data) => {\n        const flattenedZones = flattenZones(data.zones || []);\n        setZones(flattenedZones);\n      }, \"zones\");\n    }\n  }, [selectedParentZone]);\n\n  useEffect(() => {\n    if (selectedZone) {\n      fetch(`/maps/get_map_data/${selectedZone}`)\n        .then((response) => response.json())\n        .then((data) => {\n          setSelectedMapId(data.map_id || selectedZone);\n        })\n        .catch((error) => console.error(\"Error fetching map data:\", error));\n    }\n  }, [selectedZone]);\n\n  const handleCreateTrigger = useCallback(async () => {\n    if (!triggerName || !selectedZone || !triggerDirection) {\n      alert(\"Please fill all required fields (Trigger Name, Zone, Direction).\");\n      return;\n    }\n\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n\n    console.log(\"Current coordinates before save:\", coordinates);\n    if (!coordinates) {\n      alert(\"Please draw the trigger on the map (click to add points, double-click to finish).\");\n      return;\n    }\n\n    const selectedDirectionObj = triggerDirections.find(\n      (dir) => dir.x_dir === triggerDirection\n    );\n    const directionId = selectedDirectionObj ? selectedDirectionObj.i_dir : null;\n\n    if (!directionId) {\n      alert(\"Invalid direction selected.\");\n      return;\n    }\n\n    const triggerData = {\n      name: triggerName,\n      direction: directionId,\n      zone_id: parseInt(selectedZone),\n      ignore: true,\n      coordinates: JSON.parse(coordinates),\n    };\n\n    console.log(\"Sending triggerData to /api/add_trigger:\", triggerData);\n\n    try {\n      const response = await fetch(\"/api/add_trigger\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(triggerData),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Trigger created with ID: ${result.trigger_id}`);\n      setEventList([\n        ...eventList,\n        `${triggerName} created at ${coordinates} with ${triggerDirection} direction`,\n      ]);\n      setCoordinates(\"\");\n      setShowMapForDrawing(false);\n    } catch (error) {\n      console.error(\"Error creating trigger:\", error);\n      alert(`Error creating trigger: ${error.message}`);\n    }\n  }, [triggerName, selectedZone, triggerDirection, coordinates, showMapForDrawing, triggerDirections]);\n\n  const handleDrawComplete = useCallback((coords) => {\n    setCoordinates(coords);\n  }, []);\n\n  const loadVerticesForSelectedZones = async () => {\n    const checkedZones = Array.from(\n      document.querySelectorAll(\"#zoneList input[type='checkbox']:checked\")\n    )\n      .map((cb) => parseInt(cb.value))\n      .filter((id) => !isNaN(id));\n    if (checkedZones.length === 0) {\n      alert(\"Please select at least one zone to load vertices.\");\n      return;\n    }\n\n    setLoading((prev) => ({ ...prev, vertices: true }));\n    try {\n      const vertexPromises = checkedZones.map((zoneId) =>\n        fetch(`/api/get_zone_vertices/${zoneId}`)\n          .then((response) => {\n            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n            return response.json();\n          })\n          .then((data) => data || [])\n      );\n      const allVertices = (await Promise.all(vertexPromises)).flat();\n      if (allVertices.length === 0) {\n        throw new Error(\"No vertices found for selected zones.\");\n      }\n      console.log(\"Loaded vertices:\", allVertices);\n      setVertices(allVertices);\n      setEditedVertices(\n        allVertices.reduce((acc, v) => ({ ...acc, [v.i_vtx]: v }), {})\n      );\n    } catch (error) {\n      console.error(\"Error loading vertices:\", error);\n      alert(`Error loading vertices: ${error.message}`);\n    } finally {\n      setLoading((prev) => ({ ...prev, vertices: false }));\n    }\n  };\n\n  const handleVertexChange = (vertexId, field, value) => {\n    setEditedVertices((prev) => ({\n      ...prev,\n      [vertexId]: { ...prev[vertexId], [field]: parseFloat(value) || 0 },\n    }));\n  };\n\n  const saveAllVertices = async () => {\n    const updatedVertices = Object.values(editedVertices).map((v) => ({\n      vertex_id: v.i_vtx,\n      x: v.x,\n      y: v.y,\n      z: v.z || 0,\n    }));\n    if (updatedVertices.length === 0) {\n      alert(\"No vertices to save.\");\n      return;\n    }\n\n    console.log(\"Sending vertices to /api/update_vertices:\", updatedVertices);\n\n    try {\n      const response = await fetch(\"/api/update_vertices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(updatedVertices),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Vertices updated successfully!\");\n      if (selectedZone) {\n        fetchData(\n          `/api/get_zone_vertices/${selectedZone}`,\n          setVertices,\n          \"vertices\",\n          (data) => data || []\n        );\n      }\n    } catch (error) {\n      console.error(\"Error saving vertices:\", error);\n      alert(`Error saving vertices: ${error.message}`);\n    }\n  };\n\n  // Zone Builder Logic\n  const handleCreateZone = async () => {\n    if (!zoneName || !selectedZone) {\n      alert(\"Please provide a zone name and select a zone.\");\n      return;\n    }\n\n    if (!showMapForDrawing) {\n      setShowMapForDrawing(true);\n      return;\n    }\n\n    if (!coordinates) {\n      alert(\"Please draw the zone on the map (click to add points, double-click to finish).\");\n      return;\n    }\n\n    const zoneData = {\n      name: zoneName,\n      vertices: JSON.parse(coordinates),\n    };\n\n    try {\n      const response = await fetch(\"/api/add_zone\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(zoneData),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      const result = await response.json();\n      alert(`Zone created with ID: ${result.zone_id}`);\n      setCoordinates(\"\");\n      setZoneName(\"\");\n      setShowMapForDrawing(false);\n      fetchData(\"/api/get_all_zones\", setZones, \"zones\"); // Refresh zones\n    } catch (error) {\n      console.error(\"Error creating zone:\", error);\n      alert(`Error creating zone: ${error.message}`);\n    }\n  };\n\n  // Zone Editor Logic\n  const loadZoneVertices = async (zoneId) => {\n    try {\n      const response = await fetch(`/api/get_zone_vertices/${zoneId}`);\n      if (!response.ok) throw new Error(\"Failed to fetch zone vertices\");\n      const vertices = await response.json();\n      setZoneVertices(vertices);\n    } catch (error) {\n      console.error(\"Error loading zone vertices:\", error);\n      alert(`Error loading zone vertices: ${error.message}`);\n    }\n  };\n\n  const handleZoneVertexChange = (ord, field, value) => {\n    setZoneVertices((prev) =>\n      prev.map((v) => (v.ord === ord ? { ...v, [field]: parseFloat(value) || 0 } : v))\n    );\n  };\n\n  const saveZoneVertices = async () => {\n    try {\n      const response = await fetch(\"/api/update_zone_vertices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(\n          zoneVertices.map((v) => ({\n            zone_id: selectedZoneForEdit,\n            x: v.x,\n            y: v.y,\n            z: v.z,\n            ord: v.ord,\n          }))\n        ),\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n      }\n      alert(\"Zone vertices updated successfully!\");\n    } catch (error) {\n      console.error(\"Error saving zone vertices:\", error);\n      alert(`Error saving zone vertices: ${error.message}`);\n    }\n  };\n\n  const directionOptions = useMemo(() => {\n    return triggerDirections.map((direction) => (\n      <option key={direction.i_dir} value={direction.x_dir}>\n        {direction.x_dir}\n      </option>\n    ));\n  }, [triggerDirections]);\n\n  return (\n    <div>\n      <h1>ParcoRTLS Trigger Management</h1>\n      <Tabs defaultActiveKey=\"mapAndTrigger\" id=\"trigger-demo-tabs\">\n        <Tab eventKey=\"mapAndTrigger\" title=\"Map & Trigger\">\n          <div className=\"trigger-map-section\">\n            {error && <div style={{ color: \"red\" }}>{error}</div>}\n            <div className=\"trigger-form\">\n              <h3>Create Trigger</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Trigger Name\"\n                value={triggerName}\n                onChange={(e) => setTriggerName(e.target.value)}\n              />\n              <select\n                value={selectedParentZone}\n                onChange={(e) => setSelectedParentZone(e.target.value)}\n              >\n                <option value=\"\">Select Parent Zone</option>\n                {loading.parentZones ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  parentZones.map((pz) => (\n                    <option key={pz.zone_id} value={pz.zone_id.toString()}>\n                      {pz.name}\n                    </option>\n                  ))\n                )}\n              </select>\n              <select\n                value={triggerDirection}\n                onChange={(e) => setTriggerDirection(e.target.value)}\n              >\n                <option value=\"\">Select Direction</option>\n                {loading.triggerDirections ? (\n                  <option value=\"\">Loading...</option>\n                ) : (\n                  directionOptions\n                )}\n              </select>\n              <input\n                type=\"number\"\n                placeholder=\"Top Elevation (Zmax)\"\n                value={topElevation}\n                onChange={(e) => setTopElevation(Number(e.target.value))}\n              />\n              <input\n                type=\"number\"\n                placeholder=\"Bottom Elevation (Zmin)\"\n                value={bottomElevation}\n                onChange={(e) => setBottomElevation(Number(e.target.value))}\n              />\n              <select\n                value={triggerColor}\n                onChange={(e) => setTriggerColor(e.target.value)}\n              >\n                <option value=\"red\">Red</option>\n                <option value=\"green\">Green</option>\n                <option value=\"blue\">Blue</option>\n              </select>\n              <label>\n                Render with Leaflet:\n                <input\n                  type=\"checkbox\"\n                  checked={useLeaflet}\n                  onChange={(e) => setUseLeaflet(e.target.checked)}\n                />\n              </label>\n              <button onClick={handleCreateTrigger}>\n                {showMapForDrawing ? \"Save Trigger\" : \"Create Trigger\"}\n              </button>\n            </div>\n            <div className=\"map-selection\">\n              <h3>Select a Zone</h3>\n              <div id=\"zoneList\">\n                {loading.zones ? (\n                  <p>Loading zones...</p>\n                ) : zones.length === 0 ? (\n                  <p>No zones available for this parent zone.</p>\n                ) : (\n                  zones.map((zone) => (\n                    <div key={zone.zone_id}>\n                      <input\n                        type=\"checkbox\"\n                        value={zone.zone_id.toString()}\n                        checked={selectedZone === zone.zone_id.toString()}\n                        onChange={(e) => setSelectedZone(e.target.value)}\n                      />\n                      <span>{zone.zone_name}</span>\n                    </div>\n                  ))\n                )}\n              </div>\n              {showMapForDrawing && (\n                <>\n                  <div style={{ color: \"blue\", margin: \"10px 0\" }}>\n                    Click to add points, double-click to finish the trigger shape.\n                  </div>\n                  <Map\n                    key={selectedZone}\n                    zoneId={parseInt(selectedZone)}\n                    onDrawComplete={handleDrawComplete}\n                    triggerColor={triggerColor}\n                    useLeaflet={useLeaflet}\n                  />\n                </>\n              )}\n            </div>\n            <h3>Edit Trigger Vertices</h3>\n            <table id=\"vertexTable\">\n              <thead>\n                <tr>\n                  <th>Vertex #</th>\n                  <th>X Coordinate</th>\n                  <th>Y Coordinate</th>\n                  <th>Z Coordinate</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.values(editedVertices).map((v, i) => (\n                  <tr key={v.i_vtx}>\n                    <td>{i + 1}</td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.x || 0}\n                        onChange={(e) =>\n                          handleVertexChange(v.i_vtx, \"x\", e.target.value)\n                        }\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.y || 0}\n                        onChange={(e) =>\n                          handleVertexChange(v.i_vtx, \"y\", e.target.value)\n                        }\n                      />\n                    </td>\n                    <td>\n                      <input\n                        type=\"number\"\n                        value={v.z || 0}\n                        onChange={(e) =>\n                          handleVertexChange(v.i_vtx, \"z\", e.target.value)\n                        }\n                      />\n                    </td>\n                    <td>\n                      <button>Save</button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <button\n              onClick={loadVerticesForSelectedZones}\n              disabled={loading.vertices}\n            >\n              {loading.vertices ? \"Loading...\" : \"Load Vertices for Selected Zones\"}\n            </button>\n            <button onClick={saveAllVertices} disabled={loading.vertices}>\n              {loading.vertices ? \"Saving...\" : \"Save All Changes\"}\n            </button>\n          </div>\n        </Tab>\n        <Tab eventKey=\"zoneBuilder\" title=\"Zone Builder\">\n          <div className=\"zone-builder-section\">\n            <h3>Create Zone</h3>\n            <input\n              type=\"text\"\n              placeholder=\"Zone Name\"\n              value={zoneName}\n              onChange={(e) => setZoneName(e.target.value)}\n            />\n            <select\n              value={selectedZone}\n              onChange={(e) => setSelectedZone(e.target.value)}\n            >\n              <option value=\"\">Select Zone</option>\n              {zones.map((zone) => (\n                <option key={zone.zone_id} value={zone.zone_id.toString()}>\n                  {zone.name}\n                </option>\n              ))}\n            </select>\n            <button onClick={handleCreateZone}>\n              {showMapForDrawing ? \"Save Zone\" : \"Create Zone\"}\n            </button>\n            {showMapForDrawing && (\n              <>\n                <div style={{ color: \"blue\", margin: \"10px 0\" }}>\n                  Click to add points, double-click to finish the zone shape.\n                </div>\n                <Map\n                  key={selectedZone}\n                  zoneId={parseInt(selectedZone)}\n                  onDrawComplete={handleDrawComplete}\n                  triggerColor={triggerColor}\n                  useLeaflet={useLeaflet}\n                />\n              </>\n            )}\n          </div>\n        </Tab>\n        <Tab eventKey=\"zoneViewer\" title=\"Zone Viewer\">\n          <div className=\"zone-viewer-section\">\n            <h3>View Zones</h3>\n            <select\n              value={selectedZone}\n              onChange={(e) => setSelectedZone(e.target.value)}\n            >\n              <option value=\"\">Select Zone</option>\n              {zones.map((zone) => (\n                <option key={zone.zone_id} value={zone.zone_id.toString()}>\n                  {zone.name}\n                </option>\n              ))}\n            </select>\n            {selectedZone && (\n              <Map\n                key={selectedZone}\n                zoneId={parseInt(selectedZone)}\n                onDrawComplete={() => {}}\n                triggerColor={triggerColor}\n                useLeaflet={useLeaflet}\n              />\n            )}\n          </div>\n        </Tab>\n        <Tab eventKey=\"zoneEditor\" title=\"Zone Editor\">\n          <div className=\"zone-editor-section\">\n            <h3>Edit Zones</h3>\n            <select\n              value={selectedZoneForEdit || \"\"}\n              onChange={(e) => {\n                setSelectedZoneForEdit(e.target.value);\n                if (e.target.value) loadZoneVertices(e.target.value);\n              }}\n            >\n              <option value=\"\">Select Zone to Edit</option>\n              {zones.map((zone) => (\n                <option key={zone.zone_id} value={zone.zone_id.toString()}>\n                  {zone.name}\n                </option>\n              ))}\n            </select>\n            {selectedZoneForEdit && (\n              <>\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Vertex #</th>\n                      <th>X Coordinate</th>\n                      <th>Y Coordinate</th>\n                      <th>Z Coordinate</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {zoneVertices.map((v) => (\n                      <tr key={v.ord}>\n                        <td>{v.ord}</td>\n                        <td>\n                          <input\n                            type=\"number\"\n                            value={v.x}\n                            onChange={(e) =>\n                              handleZoneVertexChange(v.ord, \"x\", e.target.value)\n                            }\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"number\"\n                            value={v.y}\n                            onChange={(e) =>\n                              handleZoneVertexChange(v.ord, \"y\", e.target.value)\n                            }\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"number\"\n                            value={v.z}\n                            onChange={(e) =>\n                              handleZoneVertexChange(v.ord, \"z\", e.target.value)\n                            }\n                          />\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                <button onClick={saveZoneVertices}>Save Zone Vertices</button>\n                <Map\n                  key={selectedZoneForEdit}\n                  zoneId={parseInt(selectedZone)}\n                  onDrawComplete={() => {}}\n                  triggerColor={triggerColor}\n                  useLeaflet={useLeaflet}\n                />\n              </>\n            )}\n          </div>\n        </Tab>\n      </Tabs>\n    </div>\n  ); // Ensure this closing parenthesis is correctly placed\n};\n\nexport default TriggerDemo; // Ensure this is outside the function block"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}