{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js\",\n  _s = $RefreshSig$();\n// # VERSION 250316 /home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js 0P.10B.01\n// #  \n// # ParcoRTLS Middletier Services, ParcoRTLS DLL, ParcoDatabases, ParcoMessaging, and other code\n// # Copyright (C) 1999 - 2025 Affiliated Commercial Services Inc.\n// # Invented by Scott Cohen & Bertrand Dugal.\n// # Coded by Jesse Chunn O.B.M.'24 and Michael Farnsworth and Others\n// # Published at GitHub https://github.com/scocoh/IPS-RTLS-UWB\n// #\n// # Licensed under AGPL-3.0: https://www.gnu.org/licenses/agpl-3.0.en.html\n\nimport React, { useState, useEffect } from \"react\";\nimport MapZoneViewer from \"./MapZoneViewer\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ZoneViewer = () => {\n  _s();\n  var _zones$;\n  const [campuses, setCampuses] = useState([]);\n  const [selectedCampus, setSelectedCampus] = useState(null);\n  const [zones, setZones] = useState([]);\n  const [checkedZones, setCheckedZones] = useState([]);\n  const [vertices, setVertices] = useState([]);\n  const [useLeaflet, setUseLeaflet] = useState(false);\n  const [editedVertices, setEditedVertices] = useState({});\n  const [deletedVertices, setDeletedVertices] = useState([]);\n  const [fetchError, setFetchError] = useState(null);\n  const API_BASE_URL = \"http://192.168.210.231:8000\";\n  useEffect(() => {\n    const fetchCampuses = async () => {\n      try {\n        const response = await fetch(`${API_BASE_URL}/zoneviewer/get_campus_zones`);\n        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n        const data = await response.json();\n        setCampuses(data.campuses || []);\n        setFetchError(null);\n      } catch (error) {\n        console.error(\"❌ Error fetching campuses:\", error);\n        setFetchError(error.message);\n      }\n    };\n    fetchCampuses();\n  }, []);\n  useEffect(() => {\n    if (selectedCampus) {\n      const fetchZonesAndVertices = async () => {\n        try {\n          const zonesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_all_zones_for_campus/${selectedCampus}`);\n          if (!zonesResponse.ok) throw new Error(`Zones fetch failed: ${zonesResponse.status}`);\n          const zonesData = await zonesResponse.json();\n          setZones(zonesData.zones || []);\n          setCheckedZones([selectedCampus]);\n          const verticesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n          if (!verticesResponse.ok) throw new Error(`Vertices fetch failed: ${verticesResponse.status}`);\n          const verticesData = await verticesResponse.json();\n          setVertices(verticesData.vertices || []);\n          setEditedVertices({});\n          setDeletedVertices([]);\n        } catch (error) {\n          console.error(\"❌ Error fetching zones/vertices:\", error);\n          setFetchError(error.message);\n        }\n      };\n      fetchZonesAndVertices();\n    }\n  }, [selectedCampus]);\n  const handleZoneToggle = zoneId => {\n    setCheckedZones(prev => prev.includes(zoneId) ? prev.filter(id => id !== zoneId) : [...prev, zoneId]);\n  };\n  const renderZones = (zones, depth = 0) => {\n    return zones.map(zone => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: `${depth * 20}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checkedZones.includes(zone.zone_id),\n        onChange: () => handleZoneToggle(zone.zone_id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: zone.zone_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), zone.children && zone.children.length > 0 && renderZones(zone.children, depth + 1), zone.parent_zone_id === null && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteZone(zone.zone_id),\n        style: {\n          marginLeft: \"10px\",\n          color: \"red\"\n        },\n        children: \"Delete Zone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, zone.zone_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this));\n  };\n  const handleVertexChange = (vertexId, field, value) => {\n    const numValue = parseFloat(value) || 0;\n    setEditedVertices(prev => ({\n      ...prev,\n      [vertexId]: {\n        ...prev[vertexId],\n        [field]: numValue\n      }\n    }));\n  };\n  const stageDeleteVertex = vertexId => {\n    setDeletedVertices(prev => [...prev, vertexId]);\n    setVertices(prev => prev.filter(v => v.vertex_id !== vertexId));\n    setEditedVertices(prev => {\n      const newEdits = {\n        ...prev\n      };\n      delete newEdits[vertexId];\n      return newEdits;\n    });\n  };\n  const addVertex = async (zoneId, position, refVertexId) => {\n    try {\n      const zoneVertices = vertices.filter(v => v.zone_id === zoneId).sort((a, b) => a.order - b.order);\n      const refVertex = vertices.find(v => v.vertex_id === refVertexId);\n      const order = position === \"before\" ? refVertex ? refVertex.order - 0.5 : 0 : refVertex ? refVertex.order + 0.5 : zoneVertices.length + 1;\n      const payload = {\n        zone_id: zoneId,\n        x: 0.0,\n        y: 0.0,\n        z: 0.0,\n        order\n      };\n      console.log(\"Sending payload to add_vertex:\", payload);\n      const response = await fetch(`${API_BASE_URL}/zoneviewer/add_vertex`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) throw new Error(`Failed to add vertex: ${response.status}`);\n      const newVertex = await response.json();\n      const updatedVertices = [...vertices, newVertex].map(v => {\n        if (v.zone_id !== zoneId) return v;\n        const currentOrder = v.vertex_id === newVertex.vertex_id ? order : v.order;\n        return {\n          ...v,\n          order: currentOrder\n        };\n      }).sort((a, b) => a.order - b.order).map((v, idx) => ({\n        ...v,\n        order: idx + 1\n      }));\n      setVertices(updatedVertices);\n      console.log(\"✅ Added vertex:\", newVertex);\n    } catch (error) {\n      console.error(\"❌ Error adding vertex:\", error);\n      alert(\"Failed to add vertex: \" + error.message);\n    }\n  };\n  const saveVertices = async () => {\n    try {\n      for (const vertexId of deletedVertices) {\n        const response = await fetch(`${API_BASE_URL}/zoneviewer/delete_vertex/${vertexId}`, {\n          method: \"DELETE\"\n        });\n        if (!response.ok) throw new Error(`Failed to delete vertex ${vertexId}: ${response.status}`);\n      }\n      const updates = Object.entries(editedVertices).filter(([vertexId]) => vertices.some(v => v && v.vertex_id === parseInt(vertexId))).map(([vertexId, changes]) => {\n        var _changes$x, _changes$y, _changes$z;\n        const vertex = vertices.find(v => v && v.vertex_id === parseInt(vertexId));\n        if (!vertex) return null;\n        return {\n          vertex_id: vertex.vertex_id,\n          x: (_changes$x = changes.x) !== null && _changes$x !== void 0 ? _changes$x : vertex.x,\n          y: (_changes$y = changes.y) !== null && _changes$y !== void 0 ? _changes$y : vertex.y,\n          z: (_changes$z = changes.z) !== null && _changes$z !== void 0 ? _changes$z : vertex.z,\n          order: vertex.order\n        };\n      }).filter(update => update !== null);\n      const allUpdates = [...updates, ...vertices.filter(v => !editedVertices[v.vertex_id] && !deletedVertices.includes(v.vertex_id))];\n      if (allUpdates.length > 0) {\n        const response = await fetch(`${API_BASE_URL}/zoneviewer/update_vertices`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(allUpdates)\n        });\n        if (!response.ok) throw new Error(`Failed to save edits: ${response.status}`);\n        const result = await response.json();\n        console.log(\"✅ Vertices saved:\", result);\n      }\n      const verticesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n      if (!verticesResponse.ok) throw new Error(`Vertices fetch failed: ${verticesResponse.status}`);\n      const verticesData = await verticesResponse.json();\n      setVertices(verticesData.vertices || []);\n      setEditedVertices({});\n      setDeletedVertices([]);\n      alert(\"Changes saved successfully!\");\n    } catch (error) {\n      console.error(\"❌ Error saving changes:\", error);\n      alert(\"Failed to save changes: \" + error.message);\n    }\n  };\n\n  // Export vertices to JSON file\n  const exportVertices = () => {\n    if (!selectedCampus) {\n      alert(\"Please select a campus first.\");\n      return;\n    }\n    const verticesToExport = vertices.filter(v => checkedZones.includes(v.zone_id));\n    if (verticesToExport.length === 0) {\n      alert(\"No vertices to export for the selected zones.\");\n      return;\n    }\n    const json = JSON.stringify(verticesToExport, null, 2);\n    const blob = new Blob([json], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `vertices_zone_${selectedCampus}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // Import vertices from JSON file\n  const importVertices = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    try {\n      const text = await file.text();\n      const importedVertices = JSON.parse(text);\n      if (!Array.isArray(importedVertices)) {\n        throw new Error(\"Imported file must contain an array of vertices.\");\n      }\n      const validVertices = importedVertices.filter(v => {\n        return typeof v.vertex_id === \"number\" && typeof v.x === \"number\" && typeof v.y === \"number\" && (v.z === null || typeof v.z === \"number\") && typeof v.order === \"number\" && typeof v.zone_id === \"number\" && checkedZones.includes(v.zone_id);\n      });\n      if (validVertices.length === 0) {\n        throw new Error(\"No valid vertices found in the imported file for the selected zones.\");\n      }\n      const existingVertexIds = new Set(vertices.map(v => v.vertex_id));\n      const newVertices = validVertices.filter(v => !existingVertexIds.has(v.vertex_id));\n      const updatedVertices = vertices.map(v => {\n        const imported = validVertices.find(iv => iv.vertex_id === v.vertex_id);\n        return imported ? {\n          ...v,\n          ...imported\n        } : v;\n      });\n      setVertices([...updatedVertices, ...newVertices].sort((a, b) => a.order - b.order));\n      alert(`Imported ${newVertices.length} new vertices and updated ${validVertices.length - newVertices.length} existing vertices.`);\n    } catch (error) {\n      console.error(\"❌ Error importing vertices:\", error);\n      alert(\"Failed to import vertices: \" + error.message);\n    }\n  };\n\n  // Export selected zones to SVG file (inspired by fetch_vertices_to_svg.py)\n  const exportToSVG = () => {\n    if (!selectedCampus) {\n      alert(\"Please select a campus first.\");\n      return;\n    }\n    const verticesToExport = vertices.filter(v => checkedZones.includes(v.zone_id));\n    if (verticesToExport.length === 0) {\n      alert(\"No vertices to export for the selected zones.\");\n      return;\n    }\n\n    // Step 1: Normalize coordinates\n    const width = 1000;\n    const height = 800;\n    const min_x = Math.min(...verticesToExport.map(v => v.x));\n    const min_y = Math.min(...verticesToExport.map(v => v.y));\n    const max_x = Math.max(...verticesToExport.map(v => v.x));\n    const max_y = Math.max(...verticesToExport.map(v => v.y));\n    const scale_x = max_x - min_x ? width / (max_x - min_x) : 1;\n    const scale_y = max_y - min_y ? height / (max_y - min_y) : 1;\n    const normalizedVertices = verticesToExport.map(v => ({\n      ...v,\n      x: (v.x - min_x) * scale_x,\n      y: height - (v.y - min_y) * scale_y // Flip Y-axis\n    }));\n\n    // Step 2: Group by region (zone)\n    const regions = {};\n    normalizedVertices.forEach(v => {\n      if (!regions[v.zone_id]) {\n        regions[v.zone_id] = [];\n      }\n      regions[v.zone_id].push({\n        x: v.x,\n        y: v.y,\n        vertex_id: v.vertex_id\n      });\n    });\n\n    // Step 3: Generate SVG\n    let svgContent = `<svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\\n`;\n    for (const [zone_id, points] of Object.entries(regions)) {\n      // Sort points by order (assuming order is stored in vertices)\n      const zoneVertices = vertices.filter(v => v.zone_id === parseInt(zone_id)).sort((a, b) => a.order - b.order);\n      const orderedPoints = zoneVertices.map(v => {\n        const normalized = normalizedVertices.find(nv => nv.vertex_id === v.vertex_id);\n        return {\n          x: normalized.x,\n          y: normalized.y,\n          vertex_id: v.vertex_id\n        };\n      });\n\n      // Draw the polygon\n      const pointsStr = orderedPoints.map(p => `${p.x},${p.y}`).join(\" \");\n      svgContent += `<polygon points=\"${pointsStr}\" fill=\"rgba(173, 216, 230, 0.6)\" stroke=\"black\" stroke-width=\"2\"/>\\n`;\n\n      // Compute centroid for labeling\n      const centroid_x = orderedPoints.reduce((sum, p) => sum + p.x, 0) / orderedPoints.length;\n      const centroid_y = orderedPoints.reduce((sum, p) => sum + p.y, 0) / orderedPoints.length;\n      svgContent += `<text x=\"${centroid_x}\" y=\"${centroid_y}\" font-size=\"14\" fill=\"black\">Zone ${zone_id}</text>\\n`;\n\n      // Add vertex labels\n      orderedPoints.forEach(p => {\n        svgContent += `<text x=\"${p.x + 5}\" y=\"${p.y - 5}\" font-size=\"12\" fill=\"black\">${p.vertex_id}</text>\\n`;\n      });\n    }\n    svgContent += `</svg>`;\n\n    // Step 4: Trigger download\n    const blob = new Blob([svgContent], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `map_zone_${selectedCampus}.svg`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n  const handleDeleteZone = async zoneId => {\n    if (!window.confirm(`Are you sure? This will delete zone ${zoneId} and all its progeny.`)) {\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/zoneviewer/delete_zone_recursive/${zoneId}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) throw new Error(`Failed to delete zone: ${response.status}`);\n      const result = await response.json();\n      console.log(\"✅ Zone deleted:\", result);\n\n      // Refresh campuses and zones\n      const campusesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_campus_zones`);\n      if (!campusesResponse.ok) throw new Error(`Failed to fetch campuses: ${campusesResponse.status}`);\n      const campusesData = await campusesResponse.json();\n      setCampuses(campusesData.campuses || []);\n      const zonesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_all_zones_for_campus/${selectedCampus}`);\n      if (!zonesResponse.ok) throw new Error(`Failed to fetch zones: ${zonesResponse.status}`);\n      const zonesData = await zonesResponse.json();\n      setZones(zonesData.zones || []);\n      setCheckedZones([selectedCampus]);\n      const verticesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n      if (!verticesResponse.ok) throw new Error(`Failed to fetch vertices: ${verticesResponse.status}`);\n      const verticesData = await verticesResponse.json();\n      setVertices(verticesData.vertices || []);\n      alert(result.message);\n    } catch (error) {\n      console.error(\"❌ Error deleting zone:\", error);\n      alert(\"Failed to delete zone: \" + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Zone Viewer & Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 13\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: fetchError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Campus:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setSelectedCampus(parseInt(e.target.value)),\n      value: selectedCampus || \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a Campus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }, this), campuses.map(campus => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: campus.zone_id,\n        children: campus.zone_name\n      }, campus.zone_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Render with Leaflet:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: useLeaflet,\n      onChange: e => setUseLeaflet(e.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this), selectedCampus && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Zones:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderZones(zones)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MapZoneViewer, {\n        mapId: (_zones$ = zones[0]) === null || _zones$ === void 0 ? void 0 : _zones$.map_id,\n        zones: zones,\n        checkedZones: checkedZones,\n        vertices: vertices,\n        useLeaflet: useLeaflet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Vertices:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportVertices,\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: \"Export Vertices (JSON)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToSVG,\n        style: {\n          marginBottom: \"10px\",\n          marginLeft: \"10px\"\n        },\n        children: \"Export to SVG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: importVertices,\n        style: {\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: \"100%\",\n          borderCollapse: \"collapse\",\n          border: \"1px solid black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: \"1px solid black\",\n                padding: \"8px\"\n              },\n              children: \"Vertex #\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: \"1px solid black\",\n                padding: \"8px\"\n              },\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: \"1px solid black\",\n                padding: \"8px\"\n              },\n              children: \"Y\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: \"1px solid black\",\n                padding: \"8px\"\n              },\n              children: \"Z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                border: \"1px solid black\",\n                padding: \"8px\"\n              },\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: vertices.filter(v => checkedZones.includes(v.zone_id)).map(v => {\n            var _editedVertices$v$ver, _editedVertices$v$ver2, _editedVertices$v$ver3, _editedVertices$v$ver4, _editedVertices$v$ver5, _editedVertices$v$ver6;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  border: \"1px solid black\",\n                  padding: \"8px\"\n                },\n                children: v.vertex_id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  border: \"1px solid black\",\n                  padding: \"8px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: (_editedVertices$v$ver = (_editedVertices$v$ver2 = editedVertices[v.vertex_id]) === null || _editedVertices$v$ver2 === void 0 ? void 0 : _editedVertices$v$ver2.x) !== null && _editedVertices$v$ver !== void 0 ? _editedVertices$v$ver : v.x,\n                  onChange: e => handleVertexChange(v.vertex_id, \"x\", e.target.value),\n                  step: \"0.000001\",\n                  style: {\n                    width: \"100px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  border: \"1px solid black\",\n                  padding: \"8px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: (_editedVertices$v$ver3 = (_editedVertices$v$ver4 = editedVertices[v.vertex_id]) === null || _editedVertices$v$ver4 === void 0 ? void 0 : _editedVertices$v$ver4.y) !== null && _editedVertices$v$ver3 !== void 0 ? _editedVertices$v$ver3 : v.y,\n                  onChange: e => handleVertexChange(v.vertex_id, \"y\", e.target.value),\n                  step: \"0.000001\",\n                  style: {\n                    width: \"100px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  border: \"1px solid black\",\n                  padding: \"8px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: (_editedVertices$v$ver5 = (_editedVertices$v$ver6 = editedVertices[v.vertex_id]) === null || _editedVertices$v$ver6 === void 0 ? void 0 : _editedVertices$v$ver6.z) !== null && _editedVertices$v$ver5 !== void 0 ? _editedVertices$v$ver5 : v.z,\n                  onChange: e => handleVertexChange(v.vertex_id, \"z\", e.target.value),\n                  step: \"0.000001\",\n                  style: {\n                    width: \"100px\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  border: \"1px solid black\",\n                  padding: \"8px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => addVertex(v.zone_id, \"before\", v.vertex_id),\n                  children: \"Add Before\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => addVertex(v.zone_id, \"after\", v.vertex_id),\n                  children: \"Add After\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => stageDeleteVertex(v.vertex_id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 41\n              }, this)]\n            }, v.vertex_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveVertices,\n        style: {\n          marginTop: \"10px\"\n        },\n        children: \"Save All Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 9\n  }, this);\n};\n_s(ZoneViewer, \"xh1ckCpDQxq+eYHOXhCIrl49muc=\");\n_c = ZoneViewer;\nexport default ZoneViewer;\nvar _c;\n$RefreshReg$(_c, \"ZoneViewer\");","map":{"version":3,"names":["React","useState","useEffect","MapZoneViewer","jsxDEV","_jsxDEV","Fragment","_Fragment","ZoneViewer","_s","_zones$","campuses","setCampuses","selectedCampus","setSelectedCampus","zones","setZones","checkedZones","setCheckedZones","vertices","setVertices","useLeaflet","setUseLeaflet","editedVertices","setEditedVertices","deletedVertices","setDeletedVertices","fetchError","setFetchError","API_BASE_URL","fetchCampuses","response","fetch","ok","Error","status","data","json","error","console","message","fetchZonesAndVertices","zonesResponse","zonesData","verticesResponse","verticesData","handleZoneToggle","zoneId","prev","includes","filter","id","renderZones","depth","map","zone","style","marginLeft","children","type","checked","zone_id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","zone_name","length","parent_zone_id","onClick","handleDeleteZone","color","handleVertexChange","vertexId","field","value","numValue","parseFloat","stageDeleteVertex","v","vertex_id","newEdits","addVertex","position","refVertexId","zoneVertices","sort","a","b","order","refVertex","find","payload","x","y","z","log","method","headers","body","JSON","stringify","newVertex","updatedVertices","currentOrder","idx","alert","saveVertices","updates","Object","entries","some","parseInt","changes","_changes$x","_changes$y","_changes$z","vertex","update","allUpdates","result","exportVertices","verticesToExport","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","importVertices","event","file","target","files","text","importedVertices","parse","Array","isArray","validVertices","existingVertexIds","Set","newVertices","has","imported","iv","exportToSVG","width","height","min_x","Math","min","min_y","max_x","max","max_y","scale_x","scale_y","normalizedVertices","regions","forEach","push","svgContent","points","orderedPoints","normalized","nv","pointsStr","p","join","centroid_x","reduce","sum","centroid_y","window","confirm","campusesResponse","campusesData","e","campus","mapId","map_id","marginBottom","accept","borderCollapse","border","padding","_editedVertices$v$ver","_editedVertices$v$ver2","_editedVertices$v$ver3","_editedVertices$v$ver4","_editedVertices$v$ver5","_editedVertices$v$ver6","step","marginTop","_c","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js"],"sourcesContent":["// # VERSION 250316 /home/parcoadmin/parco_fastapi/app/src/components/ZoneViewer.js 0P.10B.01\n// #  \n// # ParcoRTLS Middletier Services, ParcoRTLS DLL, ParcoDatabases, ParcoMessaging, and other code\n// # Copyright (C) 1999 - 2025 Affiliated Commercial Services Inc.\n// # Invented by Scott Cohen & Bertrand Dugal.\n// # Coded by Jesse Chunn O.B.M.'24 and Michael Farnsworth and Others\n// # Published at GitHub https://github.com/scocoh/IPS-RTLS-UWB\n// #\n// # Licensed under AGPL-3.0: https://www.gnu.org/licenses/agpl-3.0.en.html\n\nimport React, { useState, useEffect } from \"react\";\nimport MapZoneViewer from \"./MapZoneViewer\";\n\nconst ZoneViewer = () => {\n    const [campuses, setCampuses] = useState([]);\n    const [selectedCampus, setSelectedCampus] = useState(null);\n    const [zones, setZones] = useState([]);\n    const [checkedZones, setCheckedZones] = useState([]);\n    const [vertices, setVertices] = useState([]);\n    const [useLeaflet, setUseLeaflet] = useState(false);\n    const [editedVertices, setEditedVertices] = useState({});\n    const [deletedVertices, setDeletedVertices] = useState([]);\n    const [fetchError, setFetchError] = useState(null);\n    const API_BASE_URL = \"http://192.168.210.231:8000\";\n\n    useEffect(() => {\n        const fetchCampuses = async () => {\n            try {\n                const response = await fetch(`${API_BASE_URL}/zoneviewer/get_campus_zones`);\n                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n                const data = await response.json();\n                setCampuses(data.campuses || []);\n                setFetchError(null);\n            } catch (error) {\n                console.error(\"❌ Error fetching campuses:\", error);\n                setFetchError(error.message);\n            }\n        };\n        fetchCampuses();\n    }, []);\n\n    useEffect(() => {\n        if (selectedCampus) {\n            const fetchZonesAndVertices = async () => {\n                try {\n                    const zonesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_all_zones_for_campus/${selectedCampus}`);\n                    if (!zonesResponse.ok) throw new Error(`Zones fetch failed: ${zonesResponse.status}`);\n                    const zonesData = await zonesResponse.json();\n                    setZones(zonesData.zones || []);\n                    setCheckedZones([selectedCampus]);\n\n                    const verticesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n                    if (!verticesResponse.ok) throw new Error(`Vertices fetch failed: ${verticesResponse.status}`);\n                    const verticesData = await verticesResponse.json();\n                    setVertices(verticesData.vertices || []);\n                    setEditedVertices({});\n                    setDeletedVertices([]);\n                } catch (error) {\n                    console.error(\"❌ Error fetching zones/vertices:\", error);\n                    setFetchError(error.message);\n                }\n            };\n            fetchZonesAndVertices();\n        }\n    }, [selectedCampus]);\n\n    const handleZoneToggle = (zoneId) => {\n        setCheckedZones((prev) =>\n            prev.includes(zoneId) ? prev.filter((id) => id !== zoneId) : [...prev, zoneId]\n        );\n    };\n\n    const renderZones = (zones, depth = 0) => {\n        return zones.map((zone) => (\n            <div key={zone.zone_id} style={{ marginLeft: `${depth * 20}px` }}>\n                <input\n                    type=\"checkbox\"\n                    checked={checkedZones.includes(zone.zone_id)}\n                    onChange={() => handleZoneToggle(zone.zone_id)}\n                />\n                <span>{zone.zone_name}</span>\n                {zone.children && zone.children.length > 0 && (\n                    renderZones(zone.children, depth + 1)\n                )}\n                {zone.parent_zone_id === null && (\n                    <button\n                        onClick={() => handleDeleteZone(zone.zone_id)}\n                        style={{ marginLeft: \"10px\", color: \"red\" }}\n                    >\n                        Delete Zone\n                    </button>\n                )}\n            </div>\n        ));\n    };\n\n    const handleVertexChange = (vertexId, field, value) => {\n        const numValue = parseFloat(value) || 0;\n        setEditedVertices((prev) => ({\n            ...prev,\n            [vertexId]: { ...prev[vertexId], [field]: numValue },\n        }));\n    };\n\n    const stageDeleteVertex = (vertexId) => {\n        setDeletedVertices((prev) => [...prev, vertexId]);\n        setVertices((prev) => prev.filter((v) => v.vertex_id !== vertexId));\n        setEditedVertices((prev) => {\n            const newEdits = { ...prev };\n            delete newEdits[vertexId];\n            return newEdits;\n        });\n    };\n\n    const addVertex = async (zoneId, position, refVertexId) => {\n        try {\n            const zoneVertices = vertices.filter(v => v.zone_id === zoneId).sort((a, b) => a.order - b.order);\n            const refVertex = vertices.find(v => v.vertex_id === refVertexId);\n            const order = position === \"before\" \n                ? (refVertex ? refVertex.order - 0.5 : 0) \n                : (refVertex ? refVertex.order + 0.5 : zoneVertices.length + 1);\n\n            const payload = { zone_id: zoneId, x: 0.0, y: 0.0, z: 0.0, order };\n            console.log(\"Sending payload to add_vertex:\", payload);\n            const response = await fetch(`${API_BASE_URL}/zoneviewer/add_vertex`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(payload),\n            });\n            if (!response.ok) throw new Error(`Failed to add vertex: ${response.status}`);\n            const newVertex = await response.json();\n\n            const updatedVertices = [...vertices, newVertex].map(v => {\n                if (v.zone_id !== zoneId) return v;\n                const currentOrder = v.vertex_id === newVertex.vertex_id ? order : v.order;\n                return { ...v, order: currentOrder };\n            }).sort((a, b) => a.order - b.order).map((v, idx) => ({ ...v, order: idx + 1 }));\n\n            setVertices(updatedVertices);\n            console.log(\"✅ Added vertex:\", newVertex);\n        } catch (error) {\n            console.error(\"❌ Error adding vertex:\", error);\n            alert(\"Failed to add vertex: \" + error.message);\n        }\n    };\n\n    const saveVertices = async () => {\n        try {\n            for (const vertexId of deletedVertices) {\n                const response = await fetch(`${API_BASE_URL}/zoneviewer/delete_vertex/${vertexId}`, {\n                    method: \"DELETE\",\n                });\n                if (!response.ok) throw new Error(`Failed to delete vertex ${vertexId}: ${response.status}`);\n            }\n\n            const updates = Object.entries(editedVertices)\n                .filter(([vertexId]) => vertices.some(v => v && v.vertex_id === parseInt(vertexId)))\n                .map(([vertexId, changes]) => {\n                    const vertex = vertices.find((v) => v && v.vertex_id === parseInt(vertexId));\n                    if (!vertex) return null;\n                    return { \n                        vertex_id: vertex.vertex_id, \n                        x: changes.x ?? vertex.x, \n                        y: changes.y ?? vertex.y, \n                        z: changes.z ?? vertex.z,\n                        order: vertex.order\n                    };\n                })\n                .filter(update => update !== null);\n\n            const allUpdates = [...updates, ...vertices.filter(v => !editedVertices[v.vertex_id] && !deletedVertices.includes(v.vertex_id))];\n            if (allUpdates.length > 0) {\n                const response = await fetch(`${API_BASE_URL}/zoneviewer/update_vertices`, {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(allUpdates),\n                });\n                if (!response.ok) throw new Error(`Failed to save edits: ${response.status}`);\n                const result = await response.json();\n                console.log(\"✅ Vertices saved:\", result);\n            }\n\n            const verticesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n            if (!verticesResponse.ok) throw new Error(`Vertices fetch failed: ${verticesResponse.status}`);\n            const verticesData = await verticesResponse.json();\n            setVertices(verticesData.vertices || []);\n            setEditedVertices({});\n            setDeletedVertices([]);\n            alert(\"Changes saved successfully!\");\n        } catch (error) {\n            console.error(\"❌ Error saving changes:\", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n\n    // Export vertices to JSON file\n    const exportVertices = () => {\n        if (!selectedCampus) {\n            alert(\"Please select a campus first.\");\n            return;\n        }\n        const verticesToExport = vertices.filter(v => checkedZones.includes(v.zone_id));\n        if (verticesToExport.length === 0) {\n            alert(\"No vertices to export for the selected zones.\");\n            return;\n        }\n        const json = JSON.stringify(verticesToExport, null, 2);\n        const blob = new Blob([json], { type: \"application/json\" });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = `vertices_zone_${selectedCampus}.json`;\n        link.click();\n        URL.revokeObjectURL(url);\n    };\n\n    // Import vertices from JSON file\n    const importVertices = async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        try {\n            const text = await file.text();\n            const importedVertices = JSON.parse(text);\n            if (!Array.isArray(importedVertices)) {\n                throw new Error(\"Imported file must contain an array of vertices.\");\n            }\n\n            const validVertices = importedVertices.filter(v => {\n                return (\n                    typeof v.vertex_id === \"number\" &&\n                    typeof v.x === \"number\" &&\n                    typeof v.y === \"number\" &&\n                    (v.z === null || typeof v.z === \"number\") &&\n                    typeof v.order === \"number\" &&\n                    typeof v.zone_id === \"number\" &&\n                    checkedZones.includes(v.zone_id)\n                );\n            });\n\n            if (validVertices.length === 0) {\n                throw new Error(\"No valid vertices found in the imported file for the selected zones.\");\n            }\n\n            const existingVertexIds = new Set(vertices.map(v => v.vertex_id));\n            const newVertices = validVertices.filter(v => !existingVertexIds.has(v.vertex_id));\n            const updatedVertices = vertices.map(v => {\n                const imported = validVertices.find(iv => iv.vertex_id === v.vertex_id);\n                return imported ? { ...v, ...imported } : v;\n            });\n\n            setVertices([...updatedVertices, ...newVertices].sort((a, b) => a.order - b.order));\n            alert(`Imported ${newVertices.length} new vertices and updated ${validVertices.length - newVertices.length} existing vertices.`);\n        } catch (error) {\n            console.error(\"❌ Error importing vertices:\", error);\n            alert(\"Failed to import vertices: \" + error.message);\n        }\n    };\n\n    // Export selected zones to SVG file (inspired by fetch_vertices_to_svg.py)\n    const exportToSVG = () => {\n        if (!selectedCampus) {\n            alert(\"Please select a campus first.\");\n            return;\n        }\n        const verticesToExport = vertices.filter(v => checkedZones.includes(v.zone_id));\n        if (verticesToExport.length === 0) {\n            alert(\"No vertices to export for the selected zones.\");\n            return;\n        }\n\n        // Step 1: Normalize coordinates\n        const width = 1000;\n        const height = 800;\n        const min_x = Math.min(...verticesToExport.map(v => v.x));\n        const min_y = Math.min(...verticesToExport.map(v => v.y));\n        const max_x = Math.max(...verticesToExport.map(v => v.x));\n        const max_y = Math.max(...verticesToExport.map(v => v.y));\n\n        const scale_x = (max_x - min_x) ? width / (max_x - min_x) : 1;\n        const scale_y = (max_y - min_y) ? height / (max_y - min_y) : 1;\n\n        const normalizedVertices = verticesToExport.map(v => ({\n            ...v,\n            x: (v.x - min_x) * scale_x,\n            y: height - (v.y - min_y) * scale_y  // Flip Y-axis\n        }));\n\n        // Step 2: Group by region (zone)\n        const regions = {};\n        normalizedVertices.forEach(v => {\n            if (!regions[v.zone_id]) {\n                regions[v.zone_id] = [];\n            }\n            regions[v.zone_id].push({ x: v.x, y: v.y, vertex_id: v.vertex_id });\n        });\n\n        // Step 3: Generate SVG\n        let svgContent = `<svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\\n`;\n        for (const [zone_id, points] of Object.entries(regions)) {\n            // Sort points by order (assuming order is stored in vertices)\n            const zoneVertices = vertices.filter(v => v.zone_id === parseInt(zone_id)).sort((a, b) => a.order - b.order);\n            const orderedPoints = zoneVertices.map(v => {\n                const normalized = normalizedVertices.find(nv => nv.vertex_id === v.vertex_id);\n                return { x: normalized.x, y: normalized.y, vertex_id: v.vertex_id };\n            });\n\n            // Draw the polygon\n            const pointsStr = orderedPoints.map(p => `${p.x},${p.y}`).join(\" \");\n            svgContent += `<polygon points=\"${pointsStr}\" fill=\"rgba(173, 216, 230, 0.6)\" stroke=\"black\" stroke-width=\"2\"/>\\n`;\n\n            // Compute centroid for labeling\n            const centroid_x = orderedPoints.reduce((sum, p) => sum + p.x, 0) / orderedPoints.length;\n            const centroid_y = orderedPoints.reduce((sum, p) => sum + p.y, 0) / orderedPoints.length;\n            svgContent += `<text x=\"${centroid_x}\" y=\"${centroid_y}\" font-size=\"14\" fill=\"black\">Zone ${zone_id}</text>\\n`;\n\n            // Add vertex labels\n            orderedPoints.forEach(p => {\n                svgContent += `<text x=\"${p.x + 5}\" y=\"${p.y - 5}\" font-size=\"12\" fill=\"black\">${p.vertex_id}</text>\\n`;\n            });\n        }\n        svgContent += `</svg>`;\n\n        // Step 4: Trigger download\n        const blob = new Blob([svgContent], { type: \"image/svg+xml\" });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = `map_zone_${selectedCampus}.svg`;\n        link.click();\n        URL.revokeObjectURL(url);\n    };\n\n    const handleDeleteZone = async (zoneId) => {\n        if (!window.confirm(`Are you sure? This will delete zone ${zoneId} and all its progeny.`)) {\n            return;\n        }\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/zoneviewer/delete_zone_recursive/${zoneId}`, {\n                method: \"DELETE\",\n            });\n            if (!response.ok) throw new Error(`Failed to delete zone: ${response.status}`);\n            const result = await response.json();\n            console.log(\"✅ Zone deleted:\", result);\n\n            // Refresh campuses and zones\n            const campusesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_campus_zones`);\n            if (!campusesResponse.ok) throw new Error(`Failed to fetch campuses: ${campusesResponse.status}`);\n            const campusesData = await campusesResponse.json();\n            setCampuses(campusesData.campuses || []);\n\n            const zonesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_all_zones_for_campus/${selectedCampus}`);\n            if (!zonesResponse.ok) throw new Error(`Failed to fetch zones: ${zonesResponse.status}`);\n            const zonesData = await zonesResponse.json();\n            setZones(zonesData.zones || []);\n            setCheckedZones([selectedCampus]);\n\n            const verticesResponse = await fetch(`${API_BASE_URL}/zoneviewer/get_vertices_for_campus/${selectedCampus}`);\n            if (!verticesResponse.ok) throw new Error(`Failed to fetch vertices: ${verticesResponse.status}`);\n            const verticesData = await verticesResponse.json();\n            setVertices(verticesData.vertices || []);\n\n            alert(result.message);\n        } catch (error) {\n            console.error(\"❌ Error deleting zone:\", error);\n            alert(\"Failed to delete zone: \" + error.message);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Zone Viewer & Editor</h2>\n            {fetchError && <div style={{ color: \"red\" }}>{fetchError}</div>}\n\n            <label>Select Campus:</label>\n            <select onChange={(e) => setSelectedCampus(parseInt(e.target.value))} value={selectedCampus || \"\"}>\n                <option value=\"\">Select a Campus</option>\n                {campuses.map((campus) => (\n                    <option key={campus.zone_id} value={campus.zone_id}>\n                        {campus.zone_name}\n                    </option>\n                ))}\n            </select>\n\n            <label>Render with Leaflet:</label>\n            <input type=\"checkbox\" checked={useLeaflet} onChange={(e) => setUseLeaflet(e.target.checked)} />\n\n            {selectedCampus && (\n                <>\n                    <h3>Zones:</h3>\n                    <div>{renderZones(zones)}</div>\n\n                    <MapZoneViewer\n                        mapId={zones[0]?.map_id}\n                        zones={zones}\n                        checkedZones={checkedZones}\n                        vertices={vertices}\n                        useLeaflet={useLeaflet}\n                    />\n\n                    <h3>Edit Vertices:</h3>\n                    <button onClick={exportVertices} style={{ marginBottom: \"10px\" }}>Export Vertices (JSON)</button>\n                    <button onClick={exportToSVG} style={{ marginBottom: \"10px\", marginLeft: \"10px\" }}>Export to SVG</button>\n                    <input\n                        type=\"file\"\n                        accept=\".json\"\n                        onChange={importVertices}\n                        style={{ marginBottom: \"10px\" }}\n                    />\n                    <table style={{ width: \"100%\", borderCollapse: \"collapse\", border: \"1px solid black\" }}>\n                        <thead>\n                            <tr>\n                                <th style={{ border: \"1px solid black\", padding: \"8px\" }}>Vertex #</th>\n                                <th style={{ border: \"1px solid black\", padding: \"8px\" }}>X</th>\n                                <th style={{ border: \"1px solid black\", padding: \"8px\" }}>Y</th>\n                                <th style={{ border: \"1px solid black\", padding: \"8px\" }}>Z</th>\n                                <th style={{ border: \"1px solid black\", padding: \"8px\" }}>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {vertices\n                                .filter((v) => checkedZones.includes(v.zone_id))\n                                .map((v) => (\n                                    <tr key={v.vertex_id}>\n                                        <td style={{ border: \"1px solid black\", padding: \"8px\" }}>{v.vertex_id}</td>\n                                        <td style={{ border: \"1px solid black\", padding: \"8px\" }}>\n                                            <input\n                                                type=\"number\"\n                                                value={editedVertices[v.vertex_id]?.x ?? v.x}\n                                                onChange={(e) => handleVertexChange(v.vertex_id, \"x\", e.target.value)}\n                                                step=\"0.000001\"\n                                                style={{ width: \"100px\" }}\n                                            />\n                                        </td>\n                                        <td style={{ border: \"1px solid black\", padding: \"8px\" }}>\n                                            <input\n                                                type=\"number\"\n                                                value={editedVertices[v.vertex_id]?.y ?? v.y}\n                                                onChange={(e) => handleVertexChange(v.vertex_id, \"y\", e.target.value)}\n                                                step=\"0.000001\"\n                                                style={{ width: \"100px\" }}\n                                            />\n                                        </td>\n                                        <td style={{ border: \"1px solid black\", padding: \"8px\" }}>\n                                            <input\n                                                type=\"number\"\n                                                value={editedVertices[v.vertex_id]?.z ?? v.z}\n                                                onChange={(e) => handleVertexChange(v.vertex_id, \"z\", e.target.value)}\n                                                step=\"0.000001\"\n                                                style={{ width: \"100px\" }}\n                                            />\n                                        </td>\n                                        <td style={{ border: \"1px solid black\", padding: \"8px\" }}>\n                                            <button onClick={() => addVertex(v.zone_id, \"before\", v.vertex_id)}>Add Before</button>\n                                            <button onClick={() => addVertex(v.zone_id, \"after\", v.vertex_id)}>Add After</button>\n                                            <button onClick={() => stageDeleteVertex(v.vertex_id)}>Delete</button>\n                                        </td>\n                                    </tr>\n                                ))}\n                        </tbody>\n                    </table>\n                    <button onClick={saveVertices} style={{ marginTop: \"10px\" }}>Save All Changes</button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default ZoneViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}