{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\",\n  _s = $RefreshSig$();\n/// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapZoneBuilder = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor,\n  useLeaflet\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/zonebuilder/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"✅ Map data fetched (ZoneBuilder):\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"❌ Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId]);\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      console.log(\"🖌 Restoring Canvas rendering...\");\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n      canvas.width = 800;\n      canvas.height = 600;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"✅ Canvas: Map image loaded successfully\", mapData.imageUrl);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      };\n      img.onerror = () => {\n        console.error(\"❌ Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n      const handleMouseDown = e => {\n        if (e.button === 0) {\n          isDrawing.current = true;\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]);\n          const scaleY = canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]);\n          const x = mapData.bounds[0][1] + (e.clientX - rect.left) / scaleX;\n          const y = mapData.bounds[1][0] - (e.clientY - rect.top) / scaleY;\n          points.current.push({\n            x,\n            y\n          });\n          console.log(\"🖱 Click registered at (feet):\", {\n            x,\n            y\n          });\n          drawPolygon(points.current);\n          onDrawComplete(points.current); // ✅ Ensure vertices are passed to ZoneBuilder.js\n        }\n      };\n      const drawPolygon = feetPoints => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        if (feetPoints.length === 0) return;\n        ctx.beginPath();\n        feetPoints.forEach((point, index) => {\n          const x = (point.x - mapData.bounds[0][1]) * (canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]));\n          const y = canvas.height - (point.y - mapData.bounds[0][0]) * (canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]));\n          if (index === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n          ctx.fillStyle = \"blue\";\n          ctx.fillRect(x - 2, y - 2, 4, 4); // ✅ Draw small dots at each vertex\n        });\n        ctx.closePath();\n        ctx.strokeStyle = triggerColor || \"red\";\n        ctx.stroke();\n      };\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      return () => {\n        canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      };\n    }\n  }, [mapData, useLeaflet]);\n  useEffect(() => {\n    if (useLeaflet && mapData && mapRef.current && !isInitialized.current) {\n      console.log(\"🗺 Restoring Leaflet rendering...\");\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple\n      }).fitBounds(mapData.bounds);\n      L.imageOverlay(mapData.imageUrl, mapData.bounds).addTo(mapInstance.current);\n      mapInstance.current.addLayer(drawnItems.current);\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems.current\n        },\n        draw: {\n          polygon: {\n            shapeOptions: {\n              color: triggerColor || \"red\",\n              weight: 2\n            }\n          },\n          rectangle: false,\n          circle: false,\n          polyline: false,\n          marker: false\n        }\n      });\n      mapInstance.current.addControl(drawControl);\n      mapInstance.current.on(L.Draw.Event.CREATED, event => {\n        const layer = event.layer;\n        drawnItems.current.addLayer(layer);\n        const coords = layer.getLatLngs()[0].map((point, index) => ({\n          n_x: point.lng,\n          n_y: point.lat,\n          n_z: 0,\n          n_ord: index + 1\n        }));\n        console.log(\"🖌 Scaled points (Leaflet, in feet):\", coords);\n        onDrawComplete(coords); // ✅ Ensure vertices are passed to ZoneBuilder.js\n      });\n      isInitialized.current = true;\n    }\n  }, [mapData, useLeaflet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this), useLeaflet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"600px\",\n        width: \"800px\",\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"map\",\n      style: {\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}, \"U5NwD4UeBua+64ZPnkNLRgLIHFY=\")), \"U5NwD4UeBua+64ZPnkNLRgLIHFY=\");\n_c2 = MapZoneBuilder;\nexport default MapZoneBuilder;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapZoneBuilder$memo\");\n$RefreshReg$(_c2, \"MapZoneBuilder\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","MapZoneBuilder","_s","_c","zoneId","onDrawComplete","triggerColor","useLeaflet","mapRef","mapInstance","drawnItems","FeatureGroup","canvasRef","mapData","setMapData","error","setError","isInitialized","points","isDrawing","ctxRef","imageRef","fetchMapData","response","fetch","ok","text","Error","status","data","json","console","log","message","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","onerror","handleMouseDown","e","button","rect","getBoundingClientRect","scaleX","bounds","scaleY","x","clientX","left","y","clientY","top","push","drawPolygon","feetPoints","clearRect","length","beginPath","forEach","point","index","moveTo","lineTo","fillStyle","fillRect","closePath","strokeStyle","stroke","addEventListener","removeEventListener","map","crs","CRS","Simple","fitBounds","imageOverlay","addTo","addLayer","drawControl","Control","Draw","edit","featureGroup","draw","polygon","shapeOptions","color","weight","rectangle","circle","polyline","marker","addControl","on","Event","CREATED","event","layer","coords","getLatLngs","n_x","lng","n_y","lat","n_z","n_ord","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","id","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js"],"sourcesContent":["/// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\"; \n\nconst MapZoneBuilder = memo(({ zoneId, onDrawComplete, triggerColor, useLeaflet }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup());\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]); \n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/zonebuilder/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"✅ Map data fetched (ZoneBuilder):\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"❌ Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId]);\n\n  useEffect(() => {\n    if (mapData && canvasRef.current && !useLeaflet && !isInitialized.current) {\n      console.log(\"🖌 Restoring Canvas rendering...\");\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n\n      canvas.width = 800;\n      canvas.height = 600;\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n\n      img.onload = () => {\n        console.log(\"✅ Canvas: Map image loaded successfully\", mapData.imageUrl);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      };\n\n      img.onerror = () => {\n        console.error(\"❌ Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image. Please check the server response.\");\n      };\n\n      const handleMouseDown = (e) => {\n        if (e.button === 0) {\n          isDrawing.current = true;\n          const rect = canvas.getBoundingClientRect();\n          const scaleX = canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]);  \n          const scaleY = canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]);  \n\n          const x = mapData.bounds[0][1] + ((e.clientX - rect.left) / scaleX);\n          const y = mapData.bounds[1][0] - ((e.clientY - rect.top) / scaleY); \n\n          points.current.push({ x, y });\n          console.log(\"🖱 Click registered at (feet):\", { x, y });\n\n          drawPolygon(points.current);\n          onDrawComplete(points.current);  // ✅ Ensure vertices are passed to ZoneBuilder.js\n        }\n      };\n\n      const drawPolygon = (feetPoints) => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        if (feetPoints.length === 0) return;\n\n        ctx.beginPath();\n\n        feetPoints.forEach((point, index) => {\n          const x = (point.x - mapData.bounds[0][1]) * (canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]));\n          const y = canvas.height - ((point.y - mapData.bounds[0][0]) * (canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]))); \n\n          if (index === 0) {\n            ctx.moveTo(x, y);\n          } else {\n            ctx.lineTo(x, y);\n          }\n\n          ctx.fillStyle = \"blue\";\n          ctx.fillRect(x - 2, y - 2, 4, 4);  // ✅ Draw small dots at each vertex\n        });\n\n        ctx.closePath();\n        ctx.strokeStyle = triggerColor || \"red\";\n        ctx.stroke();\n      };\n\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      return () => {\n        canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      };\n    }\n  }, [mapData, useLeaflet]);\n\n  useEffect(() => {\n    if (useLeaflet && mapData && mapRef.current && !isInitialized.current) {\n      console.log(\"🗺 Restoring Leaflet rendering...\");\n      mapInstance.current = L.map(mapRef.current, { crs: L.CRS.Simple })\n        .fitBounds(mapData.bounds);\n      \n      L.imageOverlay(mapData.imageUrl, mapData.bounds).addTo(mapInstance.current);\n      mapInstance.current.addLayer(drawnItems.current);\n\n      const drawControl = new L.Control.Draw({\n        edit: { featureGroup: drawnItems.current },\n        draw: { \n          polygon: { shapeOptions: { color: triggerColor || \"red\", weight: 2 } },\n          rectangle: false,\n          circle: false,\n          polyline: false,\n          marker: false,\n        },\n      });\n      mapInstance.current.addControl(drawControl);\n\n      mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n        const layer = event.layer;\n        drawnItems.current.addLayer(layer);\n\n        const coords = layer.getLatLngs()[0].map((point, index) => ({\n          n_x: point.lng,  \n          n_y: point.lat,  \n          n_z: 0,          \n          n_ord: index + 1\n        }));\n\n        console.log(\"🖌 Scaled points (Leaflet, in feet):\", coords);\n        onDrawComplete(coords);  // ✅ Ensure vertices are passed to ZoneBuilder.js\n      });\n\n      isInitialized.current = true;\n    }\n  }, [mapData, useLeaflet]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      {useLeaflet ? (\n        <div ref={mapRef} style={{ height: \"600px\", width: \"800px\", border: \"2px solid black\" }} />\n      ) : (\n        <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n      )}\n    </div>\n  );\n});\n\nexport default MapZoneBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}