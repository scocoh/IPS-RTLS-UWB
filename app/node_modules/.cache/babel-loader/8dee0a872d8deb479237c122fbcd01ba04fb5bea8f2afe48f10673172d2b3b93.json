{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup()); // Persist drawn items\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false); // Flag to prevent multiple initializations\n\n  // Debug mount/unmount\n  useEffect(() => {\n    console.log(\"Map component mounted with zoneId:\", zoneId);\n    return () => {\n      console.log(\"Map component unmounted with zoneId:\", zoneId);\n    };\n  }, [zoneId]);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Initialize the Leaflet map when mapData is available\n  useEffect(() => {\n    if (mapData && mapRef.current && !isInitialized.current) {\n      try {\n        // Initialize the map with a simple CRS for non-geographic maps\n        mapInstance.current = L.map(mapRef.current, {\n          crs: L.CRS.Simple,\n          minZoom: -5,\n          maxZoom: 5\n        });\n\n        // Correct the bounds interpretation: API returns [[yMin, xMin], [yMax, xMax]]\n        // Expected: [[xMin, yMin], [xMax, yMax]] = [[-80, -40], [160, 160]]\n        const boundsFromApi = [[mapData.bounds[0][1], mapData.bounds[0][0]],\n        // [xMin, yMin]\n        [mapData.bounds[1][1], mapData.bounds[1][0]] // [xMax, yMax]\n        ];\n        const xMin = boundsFromApi[0][0]; // -80\n        const xMax = boundsFromApi[1][0]; // 160\n        const yMin = boundsFromApi[0][1]; // -40\n        const yMax = boundsFromApi[1][1]; // 160\n        const xRange = xMax - xMin; // 240\n        const yRange = yMax - yMin; // 200\n\n        // Test image load with timeout\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.src = mapData.imageUrl;\n        const imageLoadTimeout = setTimeout(() => {\n          if (!img.complete) {\n            setError(\"Map image load timed out. Please check the image URL.\");\n            console.error(\"Map image load timed out:\", mapData.imageUrl);\n          }\n        }, 5000); // 5-second timeout\n\n        img.onload = () => {\n          clearTimeout(imageLoadTimeout);\n          console.log(\"Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n\n          // Scale bounds to match image dimensions (like Flask's 5x scaling)\n          const scaleFactor = 5;\n          const scaledXRange = xRange * scaleFactor; // 1200\n          const scaledYRange = yRange * scaleFactor; // 1000\n          const scaledBounds = [[xMin * scaleFactor, yMin * scaleFactor],\n          // [-400, -200]\n          [xMax * scaleFactor, yMax * scaleFactor] // [800, 800]\n          ];\n\n          // Adjust for image aspect ratio (721/601 ≈ 1.2)\n          const imageAspectRatio = img.width / img.height; // 721/601 ≈ 1.2\n          const boundsAspectRatio = xRange / yRange; // 240/200 = 1.2\n          let adjustedBounds = [...scaledBounds];\n          if (Math.abs(imageAspectRatio - boundsAspectRatio) > 0.01) {\n            const newYRangeScaled = scaledXRange / imageAspectRatio;\n            const yOffset = (scaledYRange - newYRangeScaled) / 2;\n            adjustedBounds[0][1] += yOffset; // Adjust yMin\n            adjustedBounds[1][1] -= yOffset; // Adjust yMax\n          }\n          console.log(\"Adjusted scaled bounds (X, Y):\", adjustedBounds);\n          L.imageOverlay(mapData.imageUrl, adjustedBounds).addTo(mapInstance.current);\n          mapInstance.current.fitBounds(adjustedBounds);\n\n          // Add persistent drawn items layer\n          mapInstance.current.addLayer(drawnItems.current);\n          const colorMap = {\n            Red: \"#ff0000\",\n            Green: \"#00ff00\",\n            Blue: \"#0000ff\"\n          };\n          const drawControl = new L.Control.Draw({\n            edit: {\n              featureGroup: drawnItems.current\n            },\n            draw: {\n              polygon: {\n                shapeOptions: {\n                  color: colorMap[triggerColor] || \"#ff0000\",\n                  // Use selected color\n                  weight: 2\n                }\n              },\n              rectangle: false,\n              polyline: false,\n              circle: false,\n              marker: false,\n              circlemarker: false\n            }\n          });\n          mapInstance.current.addControl(drawControl);\n          mapInstance.current.on(L.Draw.Event.CREATED, event => {\n            const layer = event.layer;\n            drawnItems.current.addLayer(layer);\n            // Transform coordinates to match X-Y order based on original bounds\n            const coords = layer.getLatLngs()[0].map((latLng, index) => {\n              // In L.CRS.Simple: lat = y, lng = x, normalized to [0, 1]\n              const x = xMin + latLng.lng * xRange; // Map to [-80, 160]\n              const y = yMax - latLng.lat * yRange; // Flip y-axis, map to [-40, 160]\n              return {\n                n_x: x,\n                n_y: y,\n                n_z: 0,\n                n_ord: index + 1\n              }; // Match vertex format\n            });\n            console.log(\"Drawn coordinates (X, Y):\", coords);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(coords));\n            }\n          });\n          isInitialized.current = true; // Mark as initialized\n        };\n        img.onerror = () => {\n          clearTimeout(imageLoadTimeout);\n          console.error(\"Failed to load map image:\", mapData.imageUrl);\n          setError(\"Failed to load map image. Please check the server response.\");\n        };\n      } catch (error) {\n        console.error(\"Error initializing map:\", error);\n        setError(`Error initializing map: ${error.message}`);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false; // Reset initialization flag\n      }\n      if (mapData) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData, onDrawComplete, triggerColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"500px\",\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}, \"BQymJFgQbz2vFEeRsjD+b1zrbMc=\")), \"BQymJFgQbz2vFEeRsjD+b1zrbMc=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"Map$memo\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","Map","_s","_c","zoneId","onDrawComplete","triggerColor","mapRef","mapInstance","drawnItems","FeatureGroup","mapData","setMapData","error","setError","isInitialized","console","log","fetchMapData","response","fetch","ok","text","Error","status","data","json","message","current","map","crs","CRS","Simple","minZoom","maxZoom","boundsFromApi","bounds","xMin","xMax","yMin","yMax","xRange","yRange","img","Image","crossOrigin","src","imageUrl","imageLoadTimeout","setTimeout","complete","onload","clearTimeout","width","height","scaleFactor","scaledXRange","scaledYRange","scaledBounds","imageAspectRatio","boundsAspectRatio","adjustedBounds","Math","abs","newYRangeScaled","yOffset","imageOverlay","addTo","fitBounds","addLayer","colorMap","Red","Green","Blue","drawControl","Control","Draw","edit","featureGroup","draw","polygon","shapeOptions","color","weight","rectangle","polyline","circle","marker","circlemarker","addControl","on","Event","CREATED","event","layer","coords","getLatLngs","latLng","index","x","lng","y","lat","n_x","n_y","n_z","n_ord","JSON","stringify","onerror","remove","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Leaflet core CSS\nimport \"leaflet-draw/dist/leaflet.draw.css\"; // Leaflet.Draw CSS\nimport \"leaflet-draw\"; // Import Leaflet.Draw\n\nconst Map = memo(({ zoneId, onDrawComplete, triggerColor }) => {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const drawnItems = useRef(new L.FeatureGroup()); // Persist drawn items\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false); // Flag to prevent multiple initializations\n\n  // Debug mount/unmount\n  useEffect(() => {\n    console.log(\"Map component mounted with zoneId:\", zoneId);\n    return () => {\n      console.log(\"Map component unmounted with zoneId:\", zoneId);\n    };\n  }, [zoneId]);\n\n  // Fetch map data when zoneId changes\n  useEffect(() => {\n    if (zoneId && !mapData) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/maps/get_map_data/${zoneId}`);\n          if (!response.ok) {\n            const text = await response.text();\n            throw new Error(`HTTP error! status: ${response.status}, response: ${text}`);\n          }\n          const data = await response.json();\n          console.log(\"Map data fetched:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n\n      fetchMapData();\n    }\n  }, [zoneId, mapData]);\n\n  // Initialize the Leaflet map when mapData is available\n  useEffect(() => {\n    if (mapData && mapRef.current && !isInitialized.current) {\n      try {\n        // Initialize the map with a simple CRS for non-geographic maps\n        mapInstance.current = L.map(mapRef.current, {\n          crs: L.CRS.Simple,\n          minZoom: -5,\n          maxZoom: 5,\n        });\n\n        // Correct the bounds interpretation: API returns [[yMin, xMin], [yMax, xMax]]\n        // Expected: [[xMin, yMin], [xMax, yMax]] = [[-80, -40], [160, 160]]\n        const boundsFromApi = [\n          [mapData.bounds[0][1], mapData.bounds[0][0]], // [xMin, yMin]\n          [mapData.bounds[1][1], mapData.bounds[1][0]], // [xMax, yMax]\n        ];\n        const xMin = boundsFromApi[0][0]; // -80\n        const xMax = boundsFromApi[1][0]; // 160\n        const yMin = boundsFromApi[0][1]; // -40\n        const yMax = boundsFromApi[1][1]; // 160\n        const xRange = xMax - xMin; // 240\n        const yRange = yMax - yMin; // 200\n\n        // Test image load with timeout\n        const img = new Image();\n        img.crossOrigin = \"anonymous\";\n        img.src = mapData.imageUrl;\n\n        const imageLoadTimeout = setTimeout(() => {\n          if (!img.complete) {\n            setError(\"Map image load timed out. Please check the image URL.\");\n            console.error(\"Map image load timed out:\", mapData.imageUrl);\n          }\n        }, 5000); // 5-second timeout\n\n        img.onload = () => {\n          clearTimeout(imageLoadTimeout);\n          console.log(\"Map image loaded successfully:\", mapData.imageUrl, \"Dimensions:\", img.width, \"x\", img.height);\n\n          // Scale bounds to match image dimensions (like Flask's 5x scaling)\n          const scaleFactor = 5;\n          const scaledXRange = xRange * scaleFactor; // 1200\n          const scaledYRange = yRange * scaleFactor; // 1000\n          const scaledBounds = [\n            [xMin * scaleFactor, yMin * scaleFactor], // [-400, -200]\n            [xMax * scaleFactor, yMax * scaleFactor], // [800, 800]\n          ];\n\n          // Adjust for image aspect ratio (721/601 ≈ 1.2)\n          const imageAspectRatio = img.width / img.height; // 721/601 ≈ 1.2\n          const boundsAspectRatio = xRange / yRange; // 240/200 = 1.2\n          let adjustedBounds = [...scaledBounds];\n          if (Math.abs(imageAspectRatio - boundsAspectRatio) > 0.01) {\n            const newYRangeScaled = scaledXRange / imageAspectRatio;\n            const yOffset = (scaledYRange - newYRangeScaled) / 2;\n            adjustedBounds[0][1] += yOffset; // Adjust yMin\n            adjustedBounds[1][1] -= yOffset; // Adjust yMax\n          }\n          console.log(\"Adjusted scaled bounds (X, Y):\", adjustedBounds);\n\n          L.imageOverlay(mapData.imageUrl, adjustedBounds).addTo(mapInstance.current);\n          mapInstance.current.fitBounds(adjustedBounds);\n\n          // Add persistent drawn items layer\n          mapInstance.current.addLayer(drawnItems.current);\n\n          const colorMap = {\n            Red: \"#ff0000\",\n            Green: \"#00ff00\",\n            Blue: \"#0000ff\",\n          };\n\n          const drawControl = new L.Control.Draw({\n            edit: {\n              featureGroup: drawnItems.current,\n            },\n            draw: {\n              polygon: {\n                shapeOptions: {\n                  color: colorMap[triggerColor] || \"#ff0000\", // Use selected color\n                  weight: 2,\n                },\n              },\n              rectangle: false,\n              polyline: false,\n              circle: false,\n              marker: false,\n              circlemarker: false,\n            },\n          });\n          mapInstance.current.addControl(drawControl);\n\n          mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n            const layer = event.layer;\n            drawnItems.current.addLayer(layer);\n            // Transform coordinates to match X-Y order based on original bounds\n            const coords = layer.getLatLngs()[0].map((latLng, index) => {\n              // In L.CRS.Simple: lat = y, lng = x, normalized to [0, 1]\n              const x = xMin + latLng.lng * xRange; // Map to [-80, 160]\n              const y = yMax - (latLng.lat * yRange); // Flip y-axis, map to [-40, 160]\n              return { n_x: x, n_y: y, n_z: 0, n_ord: index + 1 }; // Match vertex format\n            });\n            console.log(\"Drawn coordinates (X, Y):\", coords);\n            if (onDrawComplete) {\n              onDrawComplete(JSON.stringify(coords));\n            }\n          });\n\n          isInitialized.current = true; // Mark as initialized\n        };\n\n        img.onerror = () => {\n          clearTimeout(imageLoadTimeout);\n          console.error(\"Failed to load map image:\", mapData.imageUrl);\n          setError(\"Failed to load map image. Please check the server response.\");\n        };\n      } catch (error) {\n        console.error(\"Error initializing map:\", error);\n        setError(`Error initializing map: ${error.message}`);\n      }\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        isInitialized.current = false; // Reset initialization flag\n      }\n      if (mapData) {\n        const img = new Image();\n        img.src = mapData.imageUrl; // Clear any pending loads\n      }\n    };\n  }, [mapData, onDrawComplete, triggerColor]);\n\n  return (\n    <div>\n      {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n      <div ref={mapRef} style={{ height: \"500px\", width: \"100%\" }} />\n    </div>\n  );\n});\n\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}