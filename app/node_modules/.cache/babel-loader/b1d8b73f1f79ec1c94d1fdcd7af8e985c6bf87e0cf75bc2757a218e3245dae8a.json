{"ast":null,"code":"var _jsxFileName = \"/home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\",\n  _s = $RefreshSig$();\n// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapZoneBuilder = /*#__PURE__*/_s(/*#__PURE__*/memo(_c = _s(({\n  zoneId,\n  onDrawComplete,\n  triggerColor,\n  useLeaflet,\n  drawnItems\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const canvasRef = useRef(null);\n  const [mapData, setMapData] = useState(null);\n  const [error, setError] = useState(null);\n  const isInitialized = useRef(false);\n  const points = useRef([]);\n  const isDrawing = useRef(false);\n  const ctxRef = useRef(null);\n  const imageRef = useRef(null);\n\n  // Fetch map data\n  useEffect(() => {\n    if (zoneId) {\n      const fetchMapData = async () => {\n        try {\n          const response = await fetch(`/zonebuilder/get_map_data/${zoneId}`);\n          if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n          const data = await response.json();\n          console.log(\"✅ Fetched map data:\", data);\n          setMapData(data);\n          setError(null);\n        } catch (error) {\n          console.error(\"❌ Error fetching map data:\", error);\n          setError(`Error fetching map data: ${error.message}`);\n        }\n      };\n      fetchMapData();\n    }\n  }, [zoneId]);\n\n  // Canvas rendering\n  useEffect(() => {\n    if (!useLeaflet && mapData && canvasRef.current && !isInitialized.current) {\n      console.log(\"🖌 Initializing Canvas rendering...\");\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      ctxRef.current = ctx;\n      canvas.width = 800;\n      canvas.height = 600;\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.src = mapData.imageUrl;\n      imageRef.current = img;\n      img.onload = () => {\n        console.log(\"✅ Canvas: Map image loaded:\", mapData.imageUrl);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      };\n      img.onerror = () => {\n        console.error(\"❌ Canvas: Failed to load map image:\", mapData.imageUrl);\n        setError(\"Failed to load map image.\");\n      };\n      const handleMouseDown = e => {\n        if (e.button !== 0) return;\n        isDrawing.current = true;\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]); // max_x - min_x\n        const scaleY = canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]); // max_y - min_y\n\n        const x = mapData.bounds[0][1] + (e.clientX - rect.left) / scaleX;\n        const y = mapData.bounds[1][0] - (e.clientY - rect.top) / scaleY;\n        points.current.push({\n          x,\n          y\n        });\n        console.log(\"🖱 Canvas click (feet):\", {\n          x,\n          y\n        });\n        drawPolygon(points.current);\n        onDrawComplete(points.current);\n      };\n      const drawPolygon = feetPoints => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        if (feetPoints.length === 0) return;\n        ctx.beginPath();\n        feetPoints.forEach((point, index) => {\n          const x = (point.x - mapData.bounds[0][1]) * (canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]));\n          const y = canvas.height - (point.y - mapData.bounds[0][0]) * (canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]));\n          if (index === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n          ctx.fillStyle = \"blue\";\n          ctx.fillRect(x - 2, y - 2, 4, 4);\n        });\n        ctx.closePath();\n        ctx.strokeStyle = triggerColor || \"red\";\n        ctx.stroke();\n      };\n      canvas.addEventListener(\"mousedown\", handleMouseDown);\n      isInitialized.current = true;\n      return () => canvas.removeEventListener(\"mousedown\", handleMouseDown);\n    }\n  }, [mapData, useLeaflet, onDrawComplete, triggerColor]);\n\n  // Leaflet rendering\n  useEffect(() => {\n    if (useLeaflet && mapData && mapRef.current && !mapInstance.current) {\n      console.log(\"🗺 Initializing Leaflet with mapData:\", mapData);\n      mapInstance.current = L.map(mapRef.current, {\n        crs: L.CRS.Simple\n      }).fitBounds(mapData.bounds);\n      L.imageOverlay(mapData.imageUrl, mapData.bounds).addTo(mapInstance.current);\n      mapInstance.current.addLayer(drawnItems);\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems\n        },\n        draw: {\n          polygon: {\n            shapeOptions: {\n              color: triggerColor || \"red\",\n              weight: 2\n            }\n          },\n          rectangle: false,\n          circle: false,\n          polyline: false,\n          marker: false\n        }\n      });\n      mapInstance.current.addControl(drawControl);\n      mapInstance.current.on(L.Draw.Event.CREATED, event => {\n        const layer = event.layer;\n        drawnItems.addLayer(layer);\n        const coords = layer.getLatLngs()[0].map((point, index) => ({\n          n_x: point.lng,\n          // Longitude maps to x in feet\n          n_y: point.lat,\n          // Latitude maps to y in feet\n          n_z: 0,\n          n_ord: index + 1\n        }));\n        console.log(\"🖌 Leaflet drawn coordinates (feet):\", coords);\n        onDrawComplete(coords);\n      });\n      console.log(\"✅ Leaflet map initialized with bounds:\", mapData.bounds);\n    }\n\n    // Cleanup\n    return () => {\n      if (mapInstance.current) {\n        mapInstance.current.remove();\n        mapInstance.current = null;\n        console.log(\"🗺 Leaflet map cleaned up\");\n      }\n    };\n  }, [mapData, useLeaflet, onDrawComplete, triggerColor, drawnItems]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 23\n    }, this), useLeaflet ? /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        height: \"600px\",\n        width: \"800px\",\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      id: \"map\",\n      style: {\n        border: \"2px solid black\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}, \"HTlDVQhzkUeEKTiA//erMeNtZ94=\")), \"HTlDVQhzkUeEKTiA//erMeNtZ94=\");\n_c2 = MapZoneBuilder;\nexport default MapZoneBuilder;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapZoneBuilder$memo\");\n$RefreshReg$(_c2, \"MapZoneBuilder\");","map":{"version":3,"names":["React","useEffect","useRef","useState","memo","L","jsxDEV","_jsxDEV","MapZoneBuilder","_s","_c","zoneId","onDrawComplete","triggerColor","useLeaflet","drawnItems","mapRef","mapInstance","canvasRef","mapData","setMapData","error","setError","isInitialized","points","isDrawing","ctxRef","imageRef","fetchMapData","response","fetch","ok","Error","status","data","json","console","log","message","current","canvas","ctx","getContext","width","height","img","Image","crossOrigin","src","imageUrl","onload","drawImage","onerror","handleMouseDown","e","button","rect","getBoundingClientRect","scaleX","bounds","scaleY","x","clientX","left","y","clientY","top","push","drawPolygon","feetPoints","clearRect","length","beginPath","forEach","point","index","moveTo","lineTo","fillStyle","fillRect","closePath","strokeStyle","stroke","addEventListener","removeEventListener","map","crs","CRS","Simple","fitBounds","imageOverlay","addTo","addLayer","drawControl","Control","Draw","edit","featureGroup","draw","polygon","shapeOptions","color","weight","rectangle","circle","polyline","marker","addControl","on","Event","CREATED","event","layer","coords","getLatLngs","n_x","lng","n_y","lat","n_z","n_ord","remove","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","border","id","_c2","$RefreshReg$"],"sources":["/home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js"],"sourcesContent":["// /home/parcoadmin/parco_fastapi/app/src/components/MapZoneBuilder.js\nimport React, { useEffect, useRef, useState, memo } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport \"./Map.css\";\n\nconst MapZoneBuilder = memo(({ zoneId, onDrawComplete, triggerColor, useLeaflet, drawnItems }) => {\n    const mapRef = useRef(null);\n    const mapInstance = useRef(null);\n    const canvasRef = useRef(null);\n    const [mapData, setMapData] = useState(null);\n    const [error, setError] = useState(null);\n    const isInitialized = useRef(false);\n    const points = useRef([]);\n    const isDrawing = useRef(false);\n    const ctxRef = useRef(null);\n    const imageRef = useRef(null);\n\n    // Fetch map data\n    useEffect(() => {\n        if (zoneId) {\n            const fetchMapData = async () => {\n                try {\n                    const response = await fetch(`/zonebuilder/get_map_data/${zoneId}`);\n                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n                    const data = await response.json();\n                    console.log(\"✅ Fetched map data:\", data);\n                    setMapData(data);\n                    setError(null);\n                } catch (error) {\n                    console.error(\"❌ Error fetching map data:\", error);\n                    setError(`Error fetching map data: ${error.message}`);\n                }\n            };\n            fetchMapData();\n        }\n    }, [zoneId]);\n\n    // Canvas rendering\n    useEffect(() => {\n        if (!useLeaflet && mapData && canvasRef.current && !isInitialized.current) {\n            console.log(\"🖌 Initializing Canvas rendering...\");\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext(\"2d\");\n            ctxRef.current = ctx;\n\n            canvas.width = 800;\n            canvas.height = 600;\n\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.src = mapData.imageUrl;\n            imageRef.current = img;\n\n            img.onload = () => {\n                console.log(\"✅ Canvas: Map image loaded:\", mapData.imageUrl);\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            };\n\n            img.onerror = () => {\n                console.error(\"❌ Canvas: Failed to load map image:\", mapData.imageUrl);\n                setError(\"Failed to load map image.\");\n            };\n\n            const handleMouseDown = (e) => {\n                if (e.button !== 0) return;\n                isDrawing.current = true;\n                const rect = canvas.getBoundingClientRect();\n                const scaleX = canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]); // max_x - min_x\n                const scaleY = canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0]); // max_y - min_y\n\n                const x = mapData.bounds[0][1] + ((e.clientX - rect.left) / scaleX);\n                const y = mapData.bounds[1][0] - ((e.clientY - rect.top) / scaleY);\n\n                points.current.push({ x, y });\n                console.log(\"🖱 Canvas click (feet):\", { x, y });\n\n                drawPolygon(points.current);\n                onDrawComplete(points.current);\n            };\n\n            const drawPolygon = (feetPoints) => {\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                if (feetPoints.length === 0) return;\n\n                ctx.beginPath();\n                feetPoints.forEach((point, index) => {\n                    const x = (point.x - mapData.bounds[0][1]) * (canvas.width / (mapData.bounds[1][1] - mapData.bounds[0][1]));\n                    const y = canvas.height - ((point.y - mapData.bounds[0][0]) * (canvas.height / (mapData.bounds[1][0] - mapData.bounds[0][0])));\n                    if (index === 0) ctx.moveTo(x, y);\n                    else ctx.lineTo(x, y);\n\n                    ctx.fillStyle = \"blue\";\n                    ctx.fillRect(x - 2, y - 2, 4, 4);\n                });\n                ctx.closePath();\n                ctx.strokeStyle = triggerColor || \"red\";\n                ctx.stroke();\n            };\n\n            canvas.addEventListener(\"mousedown\", handleMouseDown);\n            isInitialized.current = true;\n            return () => canvas.removeEventListener(\"mousedown\", handleMouseDown);\n        }\n    }, [mapData, useLeaflet, onDrawComplete, triggerColor]);\n\n    // Leaflet rendering\n    useEffect(() => {\n        if (useLeaflet && mapData && mapRef.current && !mapInstance.current) {\n            console.log(\"🗺 Initializing Leaflet with mapData:\", mapData);\n            mapInstance.current = L.map(mapRef.current, { crs: L.CRS.Simple }).fitBounds(mapData.bounds);\n            L.imageOverlay(mapData.imageUrl, mapData.bounds).addTo(mapInstance.current);\n            mapInstance.current.addLayer(drawnItems);\n\n            const drawControl = new L.Control.Draw({\n                edit: { featureGroup: drawnItems },\n                draw: {\n                    polygon: { shapeOptions: { color: triggerColor || \"red\", weight: 2 } },\n                    rectangle: false,\n                    circle: false,\n                    polyline: false,\n                    marker: false,\n                },\n            });\n            mapInstance.current.addControl(drawControl);\n\n            mapInstance.current.on(L.Draw.Event.CREATED, (event) => {\n                const layer = event.layer;\n                drawnItems.addLayer(layer);\n                const coords = layer.getLatLngs()[0].map((point, index) => ({\n                    n_x: point.lng,  // Longitude maps to x in feet\n                    n_y: point.lat,  // Latitude maps to y in feet\n                    n_z: 0,\n                    n_ord: index + 1\n                }));\n                console.log(\"🖌 Leaflet drawn coordinates (feet):\", coords);\n                onDrawComplete(coords);\n            });\n\n            console.log(\"✅ Leaflet map initialized with bounds:\", mapData.bounds);\n        }\n\n        // Cleanup\n        return () => {\n            if (mapInstance.current) {\n                mapInstance.current.remove();\n                mapInstance.current = null;\n                console.log(\"🗺 Leaflet map cleaned up\");\n            }\n        };\n    }, [mapData, useLeaflet, onDrawComplete, triggerColor, drawnItems]);\n\n    return (\n        <div>\n            {error && <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>}\n            {useLeaflet ? (\n                <div ref={mapRef} style={{ height: \"600px\", width: \"800px\", border: \"2px solid black\" }} />\n            ) : (\n                <canvas ref={canvasRef} id=\"map\" style={{ border: \"2px solid black\" }} />\n            )}\n        </div>\n    );\n});\n\nexport default MapZoneBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}