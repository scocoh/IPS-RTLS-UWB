<doc>
   <assembly>ParcoRTLS.dll</assembly>
   <members>
      <member name="T:Parco.DeviceAssignment">
<summary>
DeviceAssignment is a business object containing a Device to Entity Assignment datarow.
</summary>
</member>
      <member name="M:Parco.DeviceAssignment.#ctor"></member>
      <member name="P:Parco.DeviceAssignment.I_ASN_DEV">
<summary>The database auto number key.</summary>
<value>The database auto number key.</value>
</member>
      <member name="P:Parco.DeviceAssignment.DeviceID">
<summary>The Device ID for the assignment.</summary>
<value>The Device ID for the assignment.</value>
</member>
      <member name="P:Parco.DeviceAssignment.EntityID">
<summary>The Entity ID assigned to the Device.</summary>
<value>The Entity ID assigned to the Device.</value>
</member>
      <member name="P:Parco.DeviceAssignment.BeginDate">
<summary>The assignment begin date and time in UTC.</summary>
<value>The assignment begin date and time in UTC.</value>
</member>
      <member name="P:Parco.DeviceAssignment.EndDate">
<summary>The assignment end date and time in UTC.</summary>
<value>The assignment end date and time in UTC.</value>
</member>
      <member name="P:Parco.DeviceAssignment.I_RSN">
<summary>The assignment reason database key. Will be -1 if not set.</summary>
<value>The assignment reason database key. Will be -1 if not set.</value>
</member>
      <member name="P:Parco.DeviceAssignment.ReasonDescription">
<summary>The assignment reason description for the I_RSN key if present.</summary>
<value>The assignment reason description for the I_RSN key if present.</value>
</member>
      <member name="T:Parco.EntityAssignment">
<summary>
EntityAssignment is a business object representing a datarow of an Entity to Entity Assignment
where the the entites are assigned in a Parent to Child relationship.
</summary>
</member>
      <member name="M:Parco.EntityAssignment.#ctor"></member>
      <member name="P:Parco.EntityAssignment.I_ASN_ENT">
<summary>The database auto number key.</summary>
<value>The database auto number key.</value>
</member>
      <member name="P:Parco.EntityAssignment.ParentID">
<summary>The string ID of the Parent Entity in the assignment.</summary>
<value>The string ID of the Parent Entity in the assignment.</value>
</member>
      <member name="P:Parco.EntityAssignment.ChildID">
<summary>The string ID of the Child Entity in the assignment.</summary>
<value>The string ID of the Child Entity in the assignment.</value>
</member>
      <member name="P:Parco.EntityAssignment.BeginDate">
<summary>The assignment begin date and time in UTC.</summary>
<value>The assignment begin date and time in UTC.</value>
</member>
      <member name="P:Parco.EntityAssignment.EndDate">
<summary>The assignment end date and time in UTC.</summary>
<value>The assignment end date and time in UTC.</value>
</member>
      <member name="P:Parco.EntityAssignment.I_RSN">
<summary>The assignment reason database key. Will be -1 if not set.</summary>
<value>The assignment reason database key. Will be -1 if not set.</value>
</member>
      <member name="P:Parco.EntityAssignment.ReasonDescription">
<summary>The assignment reason description for the I_RSN key if present.</summary>
<value>The assignment reason description for the I_RSN key if present.</value>
</member>
      <member name="T:Parco.ZoneCollection">
<summary>
A type-safe collection of Zone objects. 
</summary>
</member>
      <member name="M:Parco.ZoneCollection.Add(System.Object,Parco.Zone)">

 <summary>
 Adds a new Zone to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.ZoneCollection.Remove(System.Object)">

<summary>
 Removes the element (Zone) with the specified key.
</summary>
</member>
      <member name="M:Parco.ZoneCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.ZoneCollection.ContainsValue(Parco.Zone)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.ZoneCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all values in the collection.
</summary>
</member>
      <member name="M:Parco.ZoneCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.ZoneCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.ZoneCollection.#ctor"></member>
      <member name="M:Parco.ZoneCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.ZoneCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.ZoneCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.ZoneCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.ZoneCollection.Item">

<summary>
 Returns the Zone specified by the key.
</summary>
</member>
      <member name="P:Parco.ZoneCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.DeviceCollection">
<summary>
A type-safe collection of Device objects. 
</summary>
</member>
      <member name="M:Parco.DeviceCollection.Add(System.Object,Parco.Device)">

 <summary>
 Adds a new Device to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.DeviceCollection.Remove(System.Object)">

<summary>
 Removes the element (Device) with the specified key.
</summary>
</member>
      <member name="M:Parco.DeviceCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.DeviceCollection.ContainsValue(Parco.Device)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.DeviceCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.DeviceCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.DeviceCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.DeviceCollection.#ctor"></member>
      <member name="M:Parco.DeviceCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.DeviceCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.DeviceCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.DeviceCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.DeviceCollection.Item">

<summary>
 Returns the Device specified by the key.
</summary>
</member>
      <member name="P:Parco.DeviceCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.TagCollection">
<summary>
A type-safe collection of Tag objects. 
</summary>
</member>
      <member name="M:Parco.TagCollection.Add(System.Object,Parco.Tag)">

 <summary>
 Adds a new Tag to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.TagCollection.Remove(System.Object)">

<summary>
 Removes the element (Tag) with the specified key.
</summary>
</member>
      <member name="M:Parco.TagCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.TagCollection.ContainsValue(Parco.Tag)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.TagCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.TagCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.TagCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.TagCollection.#ctor"></member>
      <member name="M:Parco.TagCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.TagCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.TagCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.TagCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.TagCollection.Item">

<summary>
 Returns the Device specified by the key.
</summary>
</member>
      <member name="P:Parco.TagCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.Region3DCollection">
<summary>
A type-safe collection of Region3D objects. 
</summary>
</member>
      <member name="M:Parco.Region3DCollection.Add(System.Object,Parco.Region3D)">
RaiseEvent ItemCountChanged(mObjects.Count)

 <summary>
 Adds a new Region3D to the collection with the specified key raises the ItemCountChanged Event.
 </summary>
</member>
      <member name="M:Parco.Region3DCollection.Remove(System.Object)">

<summary>
 Removes the element (Region3D) with the specified key raises the ItemCountChanged Event.
</summary>
</member>
      <member name="M:Parco.Region3DCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.Region3DCollection.ContainsValue(Parco.Region3D)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.Region3DCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.Region3DCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.Region3DCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.Region3DCollection.#ctor"></member>
      <member name="M:Parco.Region3DCollection.Clear">

<summary>
 Removes all objects from the collection and raises the ItemCountChanged Event.
</summary>
</member>
      <member name="M:Parco.Region3DCollection.MoveBy(System.Single,System.Single,System.Single)">
<summary>The MoveBy method "moves" the regions by the amount specified by the parameters. The underlying vertice array values
are translated and then the min and max values are recalculated for the resultant move.</summary>
<param name="deltaX">Single, the amount to move in the X direction.</param>
<param name="deltaY">Single, the amount to move in the Y direction.</param>
<param name="deltaZ">Single, the amount to move in the Z direction.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if any region's underyling vertice arrays are not valid or the ZBottom and ZTop values are not valid.
</remarks>
</member>
      <member name="M:Parco.Region3DCollection.MoveTo(System.Single,System.Single,System.Single)">
<summary>The MoveTo method "moves" the regions to the location specified by the parameters. The spacial relationship
between the underlying Regions is maintained. The Composite BoxCentroid is is used as the positing point of the 
regions.</summary>
<param name="absoluteX">Single, the position to move to in the X dimension.</param>
<param name="absoluteY">Single, the position to move to in the Y dimension.</param>
<param name="absoluteZ">Single, the position to move to in the Z dimension.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if any region's underyling vertice arrays are not valid or the ZBottom and ZTop values are not valid.
</remarks>
</member>
      <member name="P:Parco.Region3DCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.Region3DCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.Region3DCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.Region3DCollection.Item">

<summary>
 Returns the Region3D specified by the key.
</summary>
</member>
      <member name="P:Parco.Region3DCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.Region3DCollection.BoxCentroid">

<summary>
returns a point3D instance representing the centroid of the bounding box containing all of the Region3D instances.
</summary>
</member>
      <member name="T:Parco.Region2DCollection">
<summary>
A type-safe collection of Region2D objects. 
</summary>
</member>
      <member name="M:Parco.Region2DCollection.Add(System.Object,Parco.Region2D)">

 <summary>
 Adds a new Region2D to the collection with the specified key raises the ItemCountChanged Event.
 </summary>
</member>
      <member name="M:Parco.Region2DCollection.Remove(System.Object)">

<summary>
 Removes the element (Region2D) with the specified key raises the ItemCountChanged Event.
</summary>
</member>
      <member name="M:Parco.Region2DCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.Region2DCollection.ContainsValue(Parco.Region3D)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.Region2DCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.Region2DCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.Region2DCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.Region2DCollection.#ctor"></member>
      <member name="M:Parco.Region2DCollection.Clear">

<summary>
 Removes all objects from the collection and raises the ItemCountChanged Event.
</summary>
</member>
      <member name="E:Parco.Region2DCollection.ItemCountChanged"></member>
      <member name="P:Parco.Region2DCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.Region2DCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.Region2DCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.Region2DCollection.Item">

<summary>
 Returns the Region2D specified by the key.
</summary>
</member>
      <member name="P:Parco.Region2DCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.TriggerCollection">
<summary>
A type-safe collection of Trigger objects. 
</summary>
</member>
      <member name="M:Parco.TriggerCollection.Add(System.Object,Parco.Trigger)">

 <summary>
 Adds a new Trigger to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.TriggerCollection.Remove(System.Object)">

<summary>
 Removes the element (Trigger) with the specified key.
</summary>
</member>
      <member name="M:Parco.TriggerCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.TriggerCollection.ContainsValue(Parco.Trigger)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.TriggerCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.TriggerCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.TriggerCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.TriggerCollection.#ctor"></member>
      <member name="M:Parco.TriggerCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.TriggerCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.TriggerCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.TriggerCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.TriggerCollection.Item">

<summary>
 Returns the Trigger specified by the key.
</summary>
</member>
      <member name="P:Parco.TriggerCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.DeviceAssignmentCollection">
<summary>
A type-safe collection of DeviceAssignment objects. 
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.Add(System.Object,Parco.DeviceAssignment)">

 <summary>
 Adds a new DeviceAssignment to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.Remove(System.Object)">

<summary>
 Removes the element (DeviceAssignment) with the specified key.
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.ContainsValue(Parco.DeviceAssignment)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.DeviceAssignmentCollection.#ctor"></member>
      <member name="M:Parco.DeviceAssignmentCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.DeviceAssignmentCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.DeviceAssignmentCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.DeviceAssignmentCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.DeviceAssignmentCollection.Item">

<summary>
 Returns the DeviceAssignment specified by the key.
</summary>
</member>
      <member name="P:Parco.DeviceAssignmentCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.EntityAssignmentCollection">
<summary>
A type-safe collection of EntityAssignment objects. 
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.Add(System.Object,Parco.EntityAssignment)">

 <summary>
 Adds a new EntityAssignment to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.Remove(System.Object)">

<summary>
 Removes the element (EntityAssignment) with the specified key.
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.ContainsValue(Parco.EntityAssignment)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.EntityAssignmentCollection.#ctor"></member>
      <member name="M:Parco.EntityAssignmentCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.EntityAssignmentCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.EntityAssignmentCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.EntityAssignmentCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.EntityAssignmentCollection.Item">

<summary>
 Returns the EntityAssignment specified by the key.
</summary>
</member>
      <member name="P:Parco.EntityAssignmentCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.EntityCollection">
<summary>
A type-safe collection of Entity objects. 
</summary>
</member>
      <member name="M:Parco.EntityCollection.Add(System.Object,Parco.Entity)">

 <summary>
 Adds a new Entity to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.EntityCollection.Remove(System.Object)">

<summary>
 Removes the element (Entity) with the specified key.
</summary>
</member>
      <member name="M:Parco.EntityCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.EntityCollection.ContainsValue(Parco.Entity)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.EntityCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all objects in the collection.
</summary>
</member>
      <member name="M:Parco.EntityCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.EntityCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.EntityCollection.#ctor"></member>
      <member name="M:Parco.EntityCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.EntityCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.EntityCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.EntityCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.EntityCollection.Item">

<summary>
 Returns the Entity specified by the key.
</summary>
</member>
      <member name="P:Parco.EntityCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.ResourceCollection">
<summary>
A type-safe collection of Resource objects. 
</summary>
</member>
      <member name="M:Parco.ResourceCollection.Add(System.Object,Parco.Resource)">

 <summary>
 Adds a new Resource to the collection with the specified key.
 </summary>
</member>
      <member name="M:Parco.ResourceCollection.Remove(System.Object)">

<summary>
 Removes the element (Resource) with the specified key.
</summary>
</member>
      <member name="M:Parco.ResourceCollection.ContainsKey(System.Object)">

<summary>
Determines whether the the collection contains the specific key.
</summary>
</member>
      <member name="M:Parco.ResourceCollection.ContainsValue(Parco.Resource)">

<summary>
Determines whether the the collection contains the specific value.
</summary>
</member>
      <member name="M:Parco.ResourceCollection.GetEnumerator">

<summary>
Returns an enumerator that will enumerate all values in the collection.
</summary>
</member>
      <member name="M:Parco.ResourceCollection.Synchronized">

<summary>
Returns a synchronized (thread-safe) wrapper for the System.Collections.Hashtable is synchronized (thread-safe).
</summary>
</member>
      <member name="M:Parco.ResourceCollection.IsSynchronized">

<summary>
Gets an value indication whether access to synchronize access to the System.Collections.Hashtable is
</summary>
</member>
      <member name="M:Parco.ResourceCollection.#ctor"></member>
      <member name="M:Parco.ResourceCollection.Clear">

<summary>
 Removes all objects from the collection
</summary>
</member>
      <member name="P:Parco.ResourceCollection.Count">

<summary>
The number of objects currently stored in the collection.
</summary>
</member>
      <member name="P:Parco.ResourceCollection.Keys">

<summary>
Gets a System.Collections.ICollection containing the keys in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.ResourceCollection.Values">

<summary>
Gets a System.Collections.ICollection containing the values in the System.Collections.Hashtable
</summary>
</member>
      <member name="P:Parco.ResourceCollection.Item">

<summary>
 Returns the Resource specified by the key.
</summary>
</member>
      <member name="P:Parco.ResourceCollection.SyncRoot">

<summary>
Gets an object that can be used to synchronize access to the System.Collections.Hashtable
</summary>
</member>
      <member name="T:Parco.Data">
 <summary>
 The data class provides data access for the Parco RLTS SDK.
 </summary>
 <remarks>The data class handles all version 1.0 data access. Data access is accomplished through a Parco system web service.
The DataServiceURL must be set to a valid Parco DataService URL before using an instance of this class. A valid URL looks like http://IPAddress/ParcoRTLSDataservice/DataV1.asmx .
 Replace "IPAddress" with a valid TCPIP address like 10.1.130.4 or DNS entry like manager.parcomergedmedia.com to connect to the data service.
Note that all method names containing "List" return a sparse dataset containing only the key and name/description of the items.
All method names containing "Select" return a dataset containing all fields for the item(s) and all method names containing "Get" return
an initialized object of the specified type.
When accessing data, be sure to encapsulate the method calls in a try/catch block to capture any errors. All data access failures
 will result in an error being thrown back to the code containing the instance of this object.</remarks>
</member>
      <member name="M:Parco.Data.TriggerDirectionList">
<summary>
TriggerDirectionList returns a dataset of the possible trigger directions. 
</summary>
<returns>Dataset: I_DIR is the key(value) and X_DIR is the display text for the direction.</returns>
<remarks>Trigger directions are readonly and I_DIR must match a Trigger.Direction enumeration values</remarks>
</member>
      <member name="M:Parco.Data.ResourceTypeList">
<summary>
TriggerDirectionList returns a dataset of the possible resource types. 
</summary>
<returns>Dataset: I_TYP_RES is the key(value) and X_DSC_RES is the display text for the description.</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ResourcesList">
<summary>
EntityTypeList returns a dataset of Resources. I_RES is the key(value) and X_NM_RES is the display name for the resource.
</summary>
<returns>Dataset:</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ResourceSelect(System.Int32)">
<summary>
ResourceSelect returns a dataset of of the least busy resouce of the type specified. I_RES is the key(value) and X_NM_RES is the display name for the resource.
</summary>
<param name="I_TYP_RES">The resource type to return, SqlDbType.NvarChar(50)</param>
<returns>Dataset</returns>
<remarks>The lowest I_RNK (least busy) resource ot the type is returned. This method provides manager load balencing.</remarks>
</member>
      <member name="M:Parco.Data.ResourceGet(System.Int32)">
<summary>
ResourceGet returns a resource instance representing the least busy resouce of the type specified. 
</summary>
<param name="I_TYP_RES">The resource type to return, SqlDbType.NvarChar(50)</param>
<returns>Resource</returns>
<remarks>The lowest I_RNK (least busy) resource of the type specified is returned. This method provides manager load balencing.</remarks>
</member>
      <member name="M:Parco.Data.ResourceSelectAll">
<summary>
ResourceSelectAll returns a dataset containing all resource records. I_RES is the key(value) and X_NM_RES is the display name for the resource.
</summary>
<param name="I_TYP_RES">The resource type to return, SqlDbType.NvarChar(50)</param>
<returns>Dataset</returns>
<remarks>The dataset contains records for all resources of the specified type.</remarks>
</member>
      <member name="M:Parco.Data.ResourcesSelectByType(System.Int32)">
<summary>
ResourceSelectAll returns a dataset containing all resource records. I_RES is the key(value) and X_NM_RES is the display name for the resource.
</summary>
<param name="I_TYP_RES">The resource type to return, SqlDbType.NvarChar(50)</param>
<returns>Dataset</returns>
<remarks>The dataset contains records for all resources of the specified type.</remarks>
</member>
      <member name="M:Parco.Data.ResourcesGetByType(System.Int32)">
<summary>
ResourceGetByType returns a type safe collection containing resource instances for all of the resources of the type specified.
</summary>
<param name="I_TYP_RES">The resource type to return, SqlDbType.NvarChar(50)</param>
<returns>ResourcesCollection</returns>
<remarks>The collection contains Resource instances for all resources of the specified type.</remarks>
</member>
      <member name="M:Parco.Data.ResourcesGetAll">
<summary>
ResourceGetAll returns a type safe collection of all resource records.
</summary>
<returns>ResourcesCollection</returns>
<remarks>The collection contains Resource instances for all resources.</remarks>
</member>
      <member name="M:Parco.Data.DeviceTypeList">
<summary>
DeviceTypeList returns a dataset of device types. 
</summary>
<param name="X_DSC_DEV">The text description for the device type, SqlDbType.NvarChar(50)</param>
<returns>Dataset: I_TYP_DEV is the key(value) and X_DSC_DEV is the display text for the description.</returns>
<remarks>Device types characterize Parco Tags in size, beacon frequency, shape, and lot numbers.</remarks>
</member>
      <member name="M:Parco.Data.DeviceTypeAdd(System.String)">
<summary>
DeviceTypeAdd adds a device type. The return value is the auto number Int32 I_TYP_DEV key for the new record.
</summary>
<param name="X_DSC_DEV">The text description for the device type, SqlDbType.NvarChar(50)</param>
<returns>Int32</returns>
<remarks>Device types characterize Parco Tags in size, beacon frequency, shape, and lot numbers.</remarks>
</member>
      <member name="M:Parco.Data.EntityTypeList(System.Boolean)">
<summary>
EntityTypeList returns a dataset of EntityTypes. I_TYP_ENT is the key(value) and X_DSC_ENT is display text for the type.
</summary>
<returns>Dataset</returns>
<remarks>Entity types characterize entities. All Entity Types are user defined</remarks>
</member>
      <member name="M:Parco.Data.EntityTypeAdd(System.String)">
<summary>
EntityTypeAdd adds an EntityType. The return value is the auto number Int32 I_TYP_ENT key for the new record.
</summary>
<param name="X_DSC_ENT">The description for the entity type, SqlDbType.NvarChar(50)</param>
<returns>Int32</returns>
<remarks>Entity types characterize entities. All Entity Types are user defined</remarks>
</member>
      <member name="M:Parco.Data.AssignmentReasonList">
<summary>
AssignmentReasonList returns a dataset of Assignment Reasons. 
</summary>
<returns>Dataset: I_RSN is the key(value) and X_RSN is display text for the reason.</returns>
<remarks>Assignment Reasons characterize assignments. Assignment Reasons are user defined and will be used according to your business rules.</remarks>
</member>
      <member name="M:Parco.Data.AssignmentReasonAdd(System.String)">
<summary>
AssignmentReasonAdd adds an Assignment Reason. The return value is the auto number Int32 I_RSN key for the new record.
</summary>
<param name="X_RSN">The description for the Assignment Reason, SqlDbType.NvarChar(50)</param>
<returns>Int32</returns>
<remarks>Assignment Reasons characterize assignments. Assignment Reasons are user defined and will be used according to your business rules.</remarks>
</member>
      <member name="M:Parco.Data.ZoneTypeList">
<summary>
ZoneTypeList returns a dataset of ZoneTypes. I_TYP_ZN is the key(value) and X_DSC_ZN is display text for the type.
Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
</summary>
<returns>Dataset</returns>
<remarks>Zone types characterize zones for defining location granularity. Values less than 100 are system values and are reserved, greater than 100 are user defined</remarks>
</member>
      <member name="M:Parco.Data.ZoneTypeAdd(System.String)">
<summary>
ZoneTypeAdd adds a user Defined Zone Type. The return value is the auto number Int32 key for the new record.
Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
</summary>
<param name="X_DSC_ZN">The description for the zone type, SqlDbType.NvarChar(50)</param>
<returns>Int32</returns>
<remarks>Zone types characterize zones for defining location granularity. Values less than 100 are system values and are reserved,  greater than 100 are user defined</remarks>
</member>
      <member name="M:Parco.Data.RegionAdd(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<summary>
RegionAdd adds a Region. The return value is the auto number key I_RGN  for the new record.
</summary>
<param name="X_NM_RGN">The name for the region, SqlDbType.NvarChar(200)</param>
<param name="N_MAX_X">The max X vertice value for the region, SqlDbType.Float</param>
<param name="N_MAX_Y">The max Y vertice value for the region, SqlDbType.Float</param>
<param name="N_MAX_Z">The max Z vertice value for the region, SqlDbType.Float</param>
<param name="N_MIN_X">The min X vertice value for the region, SqlDbType.Float</param>
<param name="N_MIN_Y">The min Y vertice value for the region, SqlDbType.Float</param>
<param name="N_MIN_Z">The min Z vertice value for the region,SqlDbType.Float</param>
<param name="I_ZN">The optional Zone ID if the region belongs to a zone. SqlDbType.NvarChar(200)</param>
<param name="I_TRG">The optional trigger key if the region belongs to a trigger, SqlDbType.Int</param>
<returns>Int32</returns>
<remarks>The Max and Min values are the values computed by a region object from it vertices.  
A region must contain a zone key or a trigger key but may not contain both. 
</remarks>
</member>
      <member name="M:Parco.Data.RegionAdd(Parco.Region2D)">
<summary>
RegionAdd adds a Region. The return value is the auto number key I_RGN  for the new record.
</summary>
<param name="oRegion">A Region2D instance containing the values to add.</param>
<returns>Int32</returns>
<remarks>The Max and Min values are the values computed by a region object from it vertices.
A region must contain a zone key or a trigger key but may not contain both. 
</remarks>
</member>
      <member name="M:Parco.Data.RegionAdd(Parco.Region3D)">
<summary>
RegionAdd adds a Region. The return value is the auto number key I_RGN  for the new record.
The instance is passed byRef. The I_RGN property is set with the new key.
</summary>
<param name="oRegion">A Region3D instance containing the values to add.</param>
<returns>Int32</returns>
<remarks>The Max and Min values are the values computed by a region object from it vertices.
A region must contain a zone key or a trigger key but may not contain both. 
</remarks>
</member>
      <member name="M:Parco.Data.RegionSelectByID(System.Int32)">
<summary>
RegionSelect returns a dataset for the specified region.
</summary>
<param name="I_RGN">The key of the region to select.</param>
<returns>Dataset</returns>
<remarks>Each datarow contains the following items: I_RGN, X_NM_RGN, N_MAX_X, N_MAX_Y, N_MAX_Z, N_MIN_X, N_MIN_Y, N_MIN_Z, I_ZN, I_TRG.
The I_TRG, I_ZN, and X_NM_RGN values may be null.</remarks>
</member>
      <member name="M:Parco.Data.RegionsSelect">
<summary>
RegionSelect returns a dataset of all of the regions.
 </summary>
<returns>Dataset</returns>
<remarks>Each datarow contains the following items: I_RGN, X_NM_RGN, N_MAX_X, N_MAX_Y, N_MAX_Z, N_MIN_X, N_MIN_Y, N_MIN_Z, I_ZN, I_TRG.
The I_TRG, I_ZN, and X_NM_RGN values may be null.</remarks>
</member>
      <member name="M:Parco.Data.RegionsSelectByZone(System.Int32)">
<summary>
RegionsSelectByZone returns a dataset of all of the regions for a Zone.
</summary>
<param name="I_ZN">The key of the Zone to select.</param>
<returns>Dataset</returns>
<remarks>Each datarow contains the following items: I_RGN, X_NM_RGN, N_MAX_X, N_MAX_Y, N_MAX_Z, N_MIN_X, N_MIN_Y, N_MIN_Z, X_ID_ENT, I_TRG, I_ZN, I_VTX, N_X, N_Y, N_Z, N_ORD.
The I_TRG will be null and X_NM_RGN may be null.</remarks>
</member>
      <member name="M:Parco.Data.RegionsSelectByTrigger(System.Int32)">
<summary>
RegionSelectByTrigger returns a dataset of all of the regions for a Trigger.
</summary>
<param name="I_TRG">The key of the Trigger to select.</param>
<returns>Dataset</returns>
<remarks>Each datarow contains the following items: I_RGN, X_NM_RGN, N_MAX_X, N_MAX_Y, N_MAX_Z, N_MIN_X, N_MIN_Y, N_MIN_Z, X_ID_ENT, I_TRG, I_ZN, I_VTX, N_X, N_Y, N_Z, N_ORD.
The I_ZN will be null and X_NM_RGN may be null.</remarks>
</member>
      <member name="M:Parco.Data.Region3DGet(System.Int32)">
<summary>
Region3DGet returns a Region3D object containing the values for the specified region including the child vertices
</summary>
<returns>Region3D</returns>
<remarks>The I_TRG property will be -1 if the region does not belong to a trigger. The I_ZN property will be -1 if the region does not belong to a Zone
Vertices, if any, are in the region's vertice array. A DataException is thrown if the region does not exist.</remarks>
</member>
      <member name="M:Parco.Data.PopulateNewRegion(System.Data.DataRowCollection@)"></member>
      <member name="M:Parco.Data.PopulateNewRegion(System.Data.DataRowCollection@)"></member>
      <member name="M:Parco.Data.RegionsList">
<summary>
RegionSelect returns a sparse dataset of all of the regions for a listbox.
</summary>
<remarks>The dataset contains the following items: I_RGN, X_NM_RGN, I_TRG, and I_ZN</remarks>
</member>
      <member name="M:Parco.Data.VertexAdd(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<summary>
VertexAdd adds a Vertex to the Vertices table. The return value is the auto number key I_VTX  for the new record.
</summary>
<param name="N_X">The X value for the vertex, SqlDbType.Float</param>
<param name="N_Y">The Y value for the vertex, SqlDbType.Float</param>
<param name="N_Z">The Z value for the vetex. The Z values are not used at this time except for a Region3D object to calculate the Max and Min Z values, SqlDbType.Float</param>
<param name="N_ORD">The order number for the vertex., SqlDbType.Int</param>
<param name="I_RGN">The key for the parent region., SqlDbType.Int</param>
<returns>Int32</returns>
<remarks> Verticies should be ordered with the N_ORD value increasing in the clockwise direction. The result of the verticies for a region should form a regular polygon such that no lines cross over one another.</remarks>
</member>
      <member name="M:Parco.Data.VertexAdd(Parco.Point3D@)">
<summary>
VertexAdd adds a Vertex to the Vertices table. The return value is the auto number key I_VTX  for the new record.
The instance is passed byRef. The I_VTX property is set with the new key.
 </summary>
<param name="oVert">A Point3D object instance, </param>
<returns>Int32, the auto number key I_VTX  for the new record.</returns>
<remarks> If the object does not contain a valid I_RGN key, the insert will fail. Verticies should be ordered with the N_ORD value increasing in the clockwise direction. The result of the verticies for a region should form a regular polygon such that no lines cross over one another.</remarks>
</member>
      <member name="M:Parco.Data.VertexSelect(System.Int32)">
<summary>
VertexSelect returns a dataset for a Vertice in the Vertices table.
</summary>
<param name="I_VTX">The key for the vertex record to select.</param>
<returns>Dataset</returns>
</member>
      <member name="M:Parco.Data.VertexGet(System.Int32)">
<summary>
VertexGet returns a Parco.Point3D for a Vertice in the Vertices table.
</summary>
<param name="I_VTX">The key for the vertex record to select.</param>
<returns>Dataset</returns>
</member>
      <member name="M:Parco.Data.VerticiesSelectByRegion(System.Int32)">
<summary>
VerticiesSelectByRegion returns a dataset of vertices for a Region.
</summary>
<param name="I_RGN">The key for the Region to to select.</param>
<returns>Dataset</returns>
<remarks>Fields: I_VTX, N_X, N_Z, N_ORD, I_RGN</remarks>
</member>
      <member name="M:Parco.Data.ZoneAdd(System.Int32,System.String,System.Int32)">
<summary>
ZoneAdd adds a record to the Zones table.
</summary>
<param name="I_TYP_ZN">The zone type for the Zone, SqlDbType.Int</param>
<param name="X_NM_ZN">The friendly name for the Zone such as Room 203 or Floor 2, SqlDbType.NvarChar(200)</param>
<param name="I_TYP_ZN">The ZoneType for the Zone, SqlDbType.Int</param>
<param name="I_PNT_ZN">The Parent Zone key for the Zone Hierarchy. Passing 0 or less will insert a null value in the record., SqlDbType.Int</param>
<returns>Int32 - Auto Number Key</returns>
<remarks>Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity</remarks>
</member>
      <member name="M:Parco.Data.ZoneAdd(Parco.Zone@)">
<summary>
ZoneAdd adds a Zone to the Zone table.
The instance is passed byRef. The I_ZN property is set with the new key.
</summary>
<param name="objZone">An instance of a Zone class. The instance is passed by Ref since the Auto Number Key (ID property) is set.</param>
<returns>Int32 - Auto Number Key</returns>
<remarks>Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
Passing an instance with the I_PNT_ZN property = 0 or less will insert a null value into the database the parent key.</remarks>
</member>
      <member name="M:Parco.Data.ZoneSelect(System.Int32)">
<summary>
ZoneSelect returns a dataset with a with all of the zone regions and verticies.
</summary>
<param name="I_ZN">The unique key for the zone record</param>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ZoneParentSelect(System.Int32)">
<summary>
ZoneParentSelect returns a dataset for the Zone Key's Parent with a with all of the Parents Regions and Verticies.
</summary>
<param name="I_ZN">The unique key for the zone record</param>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ZoneChildrenSelect(System.Int32)">
<summary>
ZoneChilrenSelect returns a dataset of the Zone's Children Zones with a with all of the Parents Regions and Verticies.
</summary>
<param name="I_ZN">The unique key for the zone record</param>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ZoneGet(System.Int32)">
<summary>
ZoneGet returns a Zone instance with all of the zone's regions and verticies.
</summary>
<param name="I_ZN">The unique key for the zone record.</param>
<returns>Zone</returns>
<remarks>An IvalidRegionExcepton may be thrown if any of the zones's regions are not valid shapes.</remarks>
</member>
      <member name="M:Parco.Data.ZoneParentGet(System.Int32)">
<summary>
ZoneParentGet returns the Parent Zone instance for the Zone with all of the Parent's Regions and Verticies.
</summary>
<param name="I_ZN">The unique key for the zone record.</param>
<returns>Zone</returns>
<remarks>An IvalidRegionExcepton may be thrown if any of the zones's regions are not valid shapes.</remarks>
</member>
      <member name="M:Parco.Data.ZoneChildrenGet(System.Int32)">
<summary>
ZoneChildrenGet returns a collection of Children Zones for the specified Zone with all of the Chilren's Regions and Verticies.
</summary>
<param name="I_ZN">The unique key for the zone record.</param>
<returns>ZoneCollection</returns>
<remarks>An IvalidRegionExcepton may be thrown if any of the zones's regions are not valid shapes.</remarks>
</member>
      <member name="M:Parco.Data.ZonesList(System.Int32)">
<summary>
ZoneList returns a sparse dataset of Zones for databinding a listbox.
</summary>
<param name="ZoneType">The zone type to return in the dataset</param>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ZonesSelectAll(System.Int32)">
<summary>
ZonesSelectAll returns a complete dataset of Zones/Regions/ and vertices.
</summary>
<param name="ZoneType">The zone type to return in the dataset</param>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ZonesGetAll(System.Int32)">
<summary>
ZonesGetAll returns a collection of all zones for the specified ZoneType
</summary>
<returns>Zones Collection</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.ZonesSelectByPoint(System.Single,System.Single,System.Single,System.Int32)">
<summary>
 ZonesSelectByPoint returns a dataset of Zones that contain that MAY contain the point.
</summary>
<param name="X">The X coordinate</param>
<param name="Y">The Y coordinate</param>
<param name="Z">The Z coordinate</param>
<param name="ZoneType">The Int32 representing the Zone Type.</param>
<returns>Dataset</returns>
<remarks>The dataset will have 0 items if no matches found. Each datarow needs to be evaluated using the rooms ContainsPoint method.
Passing a ZoneType argument of 0 or less will return all possible zones regardless of type.
</remarks>
</member>
      <member name="M:Parco.Data.ZonesGetByPoint(System.Single,System.Single,System.Single,System.Int32)">
<summary>
ZonesGetByPoint returns a collection of zones that contain the point.
</summary>
<param name="X">The X coordinate</param>
<param name="Y">The Y coordinate</param>
<param name="Z">The Z coordinate</param>
<returns>ZoneCollection</returns>
<remarks>The zone collection will have 0 items if no matches found.
Passing a ZoneType argument of 0 or less will return all possible zones regardless of the zone type.
</remarks>
</member>
      <member name="M:Parco.Data.TriggerAdd(System.String,System.Int32,System.Boolean)">
<summary>
TriggerAdd adds a record to the Triggers table.
</summary>
<param name="X_NM_TRG">The friendly name for the trigger, SqlDbType.NvarChar(200)</param>
<param name="I_DIR">The trigger direction, SqlDbType.Int</param>
<param name="bIgnoreUnknowns">The triggers behavior for unknown devices</param>
<returns>Int32 Auto number key for the trigger.</returns>
<remarks>This method does not create or specify the underlying region.</remarks>
</member>
      <member name="M:Parco.Data.TriggerAdd(System.String,System.Int32,System.Boolean)">
<summary>
TriggerAdd adds a record to the Triggers table.
</summary>
<param name="X_NM_TRG">The friendly name for the trigger, SqlDbType.NvarChar(200)</param>
<param name="enmDIR">The trigger direction constant, Trigger.Direction</param>
<param name="bIgnoreUnknowns">The triggers behavior for unknown devices. SqlDbType.Bit</param>
<returns>Int32 Auto number key for the trigger.</returns>
<remarks>This method does not create or specify the underlying region</remarks>
</member>
      <member name="M:Parco.Data.TriggerAdd(Parco.Trigger@)">
<summary>
TriggerAdd adds a record to the Triggers table.
</summary>
<param name="oTrigger">An instance of Parco.Trigger to add</param>
<returns>Int32 Auto number key for the trigger</returns>
<remarks>This method does not create or specify the underlying regions.</remarks>
</member>
      <member name="M:Parco.Data.TriggerGet(System.Int32)">
<summary>
TriggerGet retrieves a Trigger object with all of its Regions and Vertices.
</summary>
<param name="I_TRG">The key of the trigger to get</param>
<returns>Parco.Trigger</returns>
<remarks>An IvalidRegionExcepton may be thrown if any of the trigger's regions are not valid shapes.</remarks>
</member>
      <member name="M:Parco.Data.TriggerSelect(System.Int32)">
<summary>
TriggerSelect returns a dataset of the trigger, its regions, and vertices
</summary>
<param name="I_TRG">The key of the trigger, SqlDbType.Int</param>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.TriggersSelectAll">
<summary>
TriggerSelectAll returns a dataset of all triggers with related regions and vertices
</summary>
<returns>Dataset</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.TriggerGetAll">
<summary>
TriggerGetAll returns a collection of trigger objects
</summary>
<returns>Parco.Triggers Collection</returns>
<remarks>If a triggers underlying region is not valid, an exception may be thrown</remarks>
</member>
      <member name="M:Parco.Data.TriggerSelectByPoint(System.Single,System.Single,System.Single)">
<summary>
TriggerSelectByPoint returns a dataset of the trigger, its regions, and vertices that MAY contain the point.
</summary>
<param name="X">The X coordinate, SqlDbType.Float</param>
<param name="Y">The Y coordinate, SqlDbType.Float</param>
<param name="Z">The Z coordinate, SqlDbType.Float</param>
<returns>Dataset</returns>
<remarks>The dataset will have 0 items if no matches found. Each datarow needs to be evaluated using the region's ContainsPoint method</remarks>
</member>
      <member name="M:Parco.Data.TriggerGetByPoint(System.Single,System.Single,System.Single)">
<summary>
TriggerGetByPoint returns a collection of the triggers objects
</summary>
<param name="X">The X coordinate, SqlDbType.Float</param>
<param name="Y">The Y coordinate, SqlDbType.Float</param>
<param name="Z">The Z coordinate, SqlDbType.Float</param>
<returns>Dataset</returns>
<remarks>The collection will have 0 items if no matches found.</remarks>
</member>
      <member name="M:Parco.Data.TriggerList">
<summary>
TriggerList returns a sparse dataset of Triggers for databinding a list
</summary>
<returns>Dataset</returns>
 <remarks>The dataset contains the I_TRG Key, X_NM_TRG trigger name, and I_DIR trigger direction fields.</remarks>
</member>
      <member name="M:Parco.Data.DeviceSelectByType(System.Int32,System.Boolean)">
<summary>
DeviceSelectByType returns a recordset of devices of a particular type.
</summary>
<param name="I_TYP_DEV">The Device Type key for the type. SqlDbType.Int</param>
<param name="bLimitToInService">Set to true to limit the results to devices whos service end DateTime is null. SqlDbType.Bit</param>
<returns>dataset</returns>
<remarks>The dataset contains these fields: X_ID_DEV, I_TYP_DEV, X_NM_DEV, D_SRV_BGN, D_SRV_END, N_MOE_X, N_MOE_Y, N_MOE_Z, F_LOG</remarks>
</member>
      <member name="M:Parco.Data.DeviceGetByType(System.Int32,System.Boolean)">
<summary>
DeviceGetByType returns a collection of devices of a particular type.
</summary>
<param name="I_TYP_DEV">The Device Type key for the type. SqlDbType.Int</param>
<param name="bLimitToInService">Set to true to limit the results to devices whos service end DateTime is null. SqlDbType.Bit</param>
<returns>Devices collection</returns>
<remarks>The collection item count will be 0 if no records are returned from the database.</remarks>
</member>
      <member name="M:Parco.Data.DeviceSelectByID(System.String)">
<summary>
DeviceSelectByID returns a dataset of a single device.
</summary>
<param name="X_ID_DEV">The Device key. SqlDbType.NvarChar(200)</param>
<returns>Dataset</returns>
<remarks>The dataset contains these fields: X_ID_DEV, I_TYP_DEV, X_NM_DEV, D_SRV_BGN, D_SRV_END, N_MOE_X, N_MOE_Y, N_MOE_Z, F_LOG</remarks>
</member>
      <member name="M:Parco.Data.DeviceGetByID(System.String)">
<summary>
DeviceGetByID returns a populated Device instance.
</summary>
<param name="X_ID_DEV">The Device key. SqlDbType.NvarChar(200)</param>
<returns>Device</returns>
<remarks>Nothing is returned If the device id does not exist. The device properties populated by
by this method are: ID, Name, DeviceType, MOEx, MOEy, MOEz, ServiceBegin, ServiceEnd, and Log</remarks>
</member>
      <member name="M:Parco.Data.DeviceSelectAll(System.Boolean)">
<summary>
DeviceSelectAll returns a dataset of devices.
</summary>
<param name="bLimitToInService">Passing a true value limits the resultset to devices with a null D_SRV_END. SqlDbType.Bit</param>
<returns>Dataset</returns>
<remarks>The dataset contains these fields: X_ID_DEV, I_TYP_DEV, X_NM_DEV, D_SRV_BGN, D_SRV_END, N_MOE_X, N_MOE_Y, N_MOE_Z, F_LOG</remarks>
</member>
      <member name="M:Parco.Data.DeviceGetAll(System.Boolean)">
<summary>
DeviceGetAll returns Devices collection.
</summary>
<param name="bLimitToInService">Passing a true value limits the resultset to devices with a null D_SRV_END. SqlDbType.Bit</param>
<returns>Devices collection</returns>
<remarks>The collection item count will be 0 if no records are returned from the database.</remarks>
</member>
      <member name="M:Parco.Data.DeviceSelectOutOfService(System.Int32)">
<summary>
DeviceSelectOutOfService returns a dataset of out of service devices.
</summary>
<param name="I_TYP_DEV">Passing a value value limits the resultset to devices of the specified type. SqlDbType.Int</param>
<returns>Dataset</returns>
<remarks>The dataset contains these fields: X_ID_DEV, I_TYP_DEV, X_NM_DEV, D_SRV_BGN, D_SRV_END, N_MOE_X, N_MOE_Y, N_MOE_Z, F_LOG</remarks>
</member>
      <member name="M:Parco.Data.DeviceGetOutOfService(System.Int32)">
<summary>
DeviceGetOutOfService returns Devices collection.
</summary>
<param name="I_TYP_DEV">Passing an optional value value limits the resultset to devices of the specified type. SqlDbType.Int</param>
<returns>Devices collection</returns>
<remarks>The collection item count will be 0 if no records are returned from the database.</remarks>
</member>
      <member name="M:Parco.Data.EntitySelectByID(System.String)">
<summary>
EntitySelectByID selects a single record in the Entities table.
</summary>
<param name="X_ID_ENT">The key of the entity to delete, SqlDbType.NvarChar(200)</param>
<returns>Dataset</returns>
<remarks>The dataset contains these fields: X_ID_ENT, I_TYP_ENT, X_NM_ENT, D_CRT, D_UDT, and X_DSC_ENT (entity type description)
DateTime fields are in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntitySelectByType(System.Int32)">
<summary>
EntitySelectByID selects all entities of the specified type.
</summary>
<param name="I_TYP_ENT">The entity type key, SqlDbType.Int</param>
<returns>Dataset</returns>
<remarks>The dataset contains these fields: X_ID_ENT, I_TYP_ENT, X_NM_ENT, D_CRT, D_UDT, and X_DSC_ENT (entity type description)
DateTime fields are in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityGetByType(System.Int32)">
<summary>
EntityGetByType selects all entities of the specified type and returns a collection of Entity instances.
</summary>
<param name="I_TYP_ENT">The entity type key, SqlDbType.Int</param>
<returns>Entities</returns>
<remarks>These properties of the instances are populated: ID, EntityType, TypeDescription, Name, CreateDate, UpdateDate.
DateTime properties are in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntitySelectAll">
<summary>
EntitySelectByID selects all entities in the database. 
</summary>
<returns>Dataset</returns>
<remarks>The dataset contains these fields: X_ID_ENT, I_TYP_ENT, X_NM_ENT, D_CRT, D_UDT, and X_DSC_ENT (entity type description).
DateTime fields are in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityGetAll">
<summary>
EntityGetAll selects all entities of the specified type and returns a collection of Entity instances.
</summary>
<returns>Entities</returns>
<remarks>These properties of the instances are populated: ID, EntityType, TypeDescription, Name, CreateDate, UpdateDate.
DateTime properties are in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityGet(System.String)">
<summary>
EntityGet selects an entity and returns a populated entity instance.
</summary>
<param name="X_ID_ENT">The key of the entity to retrieve, SqlDbType.NvarChar(200)</param>
<returns>Entity</returns>
<remarks>These properties of the instance are populated: ID, EntityType, TypeDescription, Name, CreateDate, UpdateDate.
DateTime properties are in UTC. A DataExeption is thrown if the entity could not be located in the database</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityAdd(System.String,System.String,System.Int32)">
<summary>
AssignEntityAdd adds an assignment record to the EntityAssmts table.
</summary>
<param name="X_ID_PRN">The unique identifier for the Parent in the assignment, SqlDbType.NvarChar(200)</param>
<param name="X_ID_CHD">The unique identifier for the Child in the assignment, SqlDbType.NvarChar(200)</param>
<param name="I_RSN">An optional reason key for the basis of the assignment, SqlDbType.Int</param>
<returns>Int32 key for the new EntityAssmts record</returns>
<remarks>The D_ENT_ASN_BGN (assignment begin DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityGet(System.Int32)">
<summary>
AssignEntityGet returns an entity assignment instance from the EntityAssmts table.
</summary>
<param name="I_ASN_ENT">The key for the record, SqlDbType.Int</param>
<returns>EntityAssignment</returns>
<remarks>EntityAssignment will be nothing if the call does not return a matching record.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityListByParent(System.String,System.Boolean)">
<summary>
AssignEntityListByParent returns a dataset of all EntityAssignments for a principle Entity.
</summary>
<param name="X_ID_PRN">The unique identifier for the parent entity in the assignment, SqlDbType.NVarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityGetByParent(System.String,System.Boolean)">
<summary>
AssignEntityListByParent returns an EntAssignments collection for a Parent Entity.
</summary>
<param name="X_ID_PNT">The unique identifier for the Parent in the assignment, SqlDbType.NVarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>EntAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityListByChild(System.String,System.Boolean)">
<summary>
AssignEntityListByChild returns a dataset of all EntityAssignments for a child Entity.
</summary>
<param name="X_ID_PRN">The unique identifier for the child entity, SqlDbType.NVarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityGetByChild(System.String,System.Boolean)">
<summary>
AssignEntityGetByChild returns an EntAssignments collection for a child Entity.
</summary>
<param name="X_ID_PRN">The unique identifier for the child entity, SqlDbType.NVarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>EntityAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityListByID(System.String,System.Boolean)">
<summary>
AssignEntityListByID returns a dataset of all EntityAssignments for an Entity where the Entity is
either the priciple or the child in the assignment relationship.
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NVarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityGetByID(System.String,System.Boolean)">
<summary>
AssignEntityGetByID returns an EntAssignment collection of all EntityAssignments for an Entity where the Entity is
either the priciple or the child in the assignment relationship.
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NVarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>EntityAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityListByReason(System.Int32,System.Boolean)">
<summary>
AssignEntityListByReason returns a dataset of all EntityAssignments for a particular reason.
</summary>
<param name="I_RSN">The reason identifier for the assignments, SqlDbType.Int</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityGetByReason(System.Int32,System.Boolean)">
<summary>
AssignEntityGetByReason returns a colection of all EntityAssignments for a particular reason.
</summary>
<param name="I_RSN">The reason identifier for the assignments, SqlDbType.Int</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>EntityAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityList(System.Boolean)">
<summary>
AssignEntityList returns a dataset of all EntityAssignments.
</summary>
<param name="bIncludeEnded">Optional defaults to false, if true, ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityGetAll(System.Boolean)">
<summary>
AssignEntityGetAll returns a collection of all EntityAssignments.
</summary>
<param name="bIncludeEnded">Optional defaults to false, if true, ended assignments will be included, boolean</param>
<returns>EntityAssignments Collection</returns>
<remarks>The collection item count will be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevAdd(System.String,System.String,System.Int32)">
<summary>
AssignDevAdd adds an assignment record to the DeviceAssmts table.
</summary>
<param name="X_ID_DEV">The unique identifier for the Parco device, SqlDbType.NvarChar(200)</param>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NvarChar(200)</param>
<param name="I_RSN">An optional reason key for the basis of the assignment, SqlDbType.Int</param>
<returns>Int32 key for the new DeviceAssmts record</returns>
<remarks>The D_ASN_BGN (assignment begin DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevList(System.Boolean)">
<summary>
AssignDevList returns a dataset of all DeviceAssignments.
</summary>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignDevGet(System.Boolean)">
<summary>
AssignDevGet returns a collection of all DeviceAssignments.
</summary>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>DevAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevListByID(System.String,System.Boolean)">
<summary>
AssignDevListByID returns a dataset of all DeviceAssignments for a Device.
</summary>
<param name="X_ID_DEV">The unique identifier for the Parco device, SqlDbType.NvarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, SqlDbType.Bit</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignDevGetByID(System.String,System.Boolean)">
<summary>
AssignDevDetByID returns a collection of all DeviceAssignments for a Device.
</summary>
<param name="X_ID_DEV">The unique identifier for the Parco device, SqlDbType.NvarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>DevAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevListByEntity(System.String,System.Boolean)">
<summary>
AssignDevListByEntity returns a dataset of all DeviceAssignments for an Entity.
</summary>
<param name="X_ID_ENT">The unique identifier for the Parco Entity, SqlDbType.NvarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignDevGetByEntity(System.String,System.Boolean)">
<summary>
AssignDevGetByEntity returns a collection of all DeviceAssignments for an Entity.
</summary>
<param name="X_ID_ENT">The unique identifier for the Parco Entity, SqlDbType.NvarChar(200)</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>DevAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevListByReason(System.Int32,System.Boolean)">
<summary>
AssignDevListByReason returns a dataset of all DeviceAssignments for a Reason.
</summary>
<param name="I_RSN">The reason key, SqlDbType.Int</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>Dataset</returns>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignDevGetByReason(System.Int32,System.Boolean)">
<summary>
AssignDevGetByReason returns a collection of all DeviceAssignments for a Reason.
</summary>
<param name="I_RSN">The reason key, SqlDbType.Int</param>
<param name="bIncludeEnded">Optional defaults to false, if true ended assignments will be included, boolean</param>
<returns>DevAssignments Collection</returns>
<remarks>The collection item count will  be zero if no records are returned.</remarks>
</member>
      <member name="M:Parco.Data.RTLSSearch(System.String)">
<summary>
RTLSSearch allows Ad-Hoc searches to be run against the ParcoRTLS database.
</summary>
<param name="SQLstring">The SQL select string to execute.</param>
<returns>Dataset</returns>
<remarks>A DataSearchException is thrown if the SQLString parameter does not contain a select statement.</remarks>
</member>
      <member name="M:Parco.Data.DataSearch(System.String)">
<summary>
DataSearch allows Ad-Hoc searches to be run against the ParcoRTLSData database. This database
holds payload data transmitted by Tags. Future Tags may be capable of transmitting data along with the beacon signal.
This feature is currently not in use.
</summary>
<param name="SQLstring">The SQL select string to execute.</param>
<returns>Dataset</returns>
<remarks>A DataSearchException is thrown if the SQLString parameter does not contain a select statement.</remarks>
</member>
      <member name="M:Parco.Data.HistorySearch(System.String,Parco.DataService.HistoryType)">
<summary>
HistorySearch allows Ad-Hoc searches to be run against the ParcoRTLSHistory database.
</summary>
<param name="SQLstring">The SQL select string to execute.</param>
<param name="eHist">The enumerated contant specifying which database to execute against.</param>
<returns>Dataset</returns>
<remarks>A DataSearchException is thrown if the SQLString parameter does not contain a select statement.
The data columns are the key I_PH int, X_ID_DEV nvarchar(200), D_POS_BGN datetime, D_POS_END datetime,
N_X float, N_Y float, N_Z float. The DateTime fields are in UTC and are required to be converted to local
time for the end user. All DateTime values in your SQL string must be supplied in UTC.</remarks>
</member>
      <member name="M:Parco.Data.HistoryByID">
<summary>
HistoryByID returns a dataset of device location data from the ParcoRTLSHistory database.
</summary>
<param name="X_ID_DEV">The unique identifier for the Parco device, SqlDbType.NvarChar(200)</param>
<param name="dtBeginUTC">The begining UTC datetime to start., SqlDbType.Datetime</param>
<param name="dtEndUTC">The ending UTC datetime to end, SqlDbType.Datetime</param>
<returns>Dataset, fields: I_PH, X_ID_DEV, D_POS_BGN, D_POS_END, N_X, N_Y, N_Z</returns>
<remarks>All dates parameters must be converted to UTC. All DateTime fields are returned in UTC.</remarks>
</member>
      <member name="M:Parco.Data.HistoryByLocation">
<summary>
HistoryByLocation returns a dataset of device location data from the ParcoRTLSHistory database given the rectangular
volume described by the vertice parameters.
</summary>
<param name="XMax">The maximum X value, SqlDbType.Float</param>
<param name="XMin">The minimum X value, SqlDbType.Float</param>
<param name="YMax">The maximum Y value, SqlDbType.Float</param>
<param name="YMin">The minimum Y value, SqlDbType.Float</param>
<param name="ZMax">The maximum Z value, SqlDbType.Float</param>
<param name="ZMin">The minimum Z value, SqlDbType.Float</param>
<param name="dtBeginUTC">The begining UTC datetime to start., SqlDbType.Datetime</param>
<param name="dtEndUTC">The ending UTC datetime to end, SqlDbType.Datetime</param>
<returns>Dataset, fields: I_PH, X_ID_DEV, D_POS_BGN, D_POS_END, N_X, N_Y, N_Z</returns>
<remarks>All dates parameters must be converted to UTC. All DateTime fields are returned in UTC.</remarks>
</member>
      <member name="M:Parco.Data.HistoryByDevices">
<summary>
HistoryByDevices returns a dataset of device location data from the ParcoRTLSHistory database.
</summary>
<param name="Tags">The collection of  Parco tags, SqlDbType.NvarChar(200)</param>
<param name="dtBeginUTC">The begining UTC datetime to start., SqlDbType.Datetime</param>
<param name="dtEndUTC">The ending UTC datetime to end, SqlDbType.Datetime</param>
<returns>Dataset, fields: I_PH, X_ID_DEV, D_POS_BGN, D_POS_END, N_X, N_Y, N_Z</returns>
<remarks>All dates parameters must be converted to UTC. All DateTime fields are returned in UTC.</remarks>
</member>
      <member name="M:Parco.Data.HistoryByRegion">
<summary>HistoryByRegion returns a dataset of device location data from the ParcoRTLSHistory database.</summary>
<param name="reg">The region instance to use for the search, SqlDbType.NvarChar(200)</param>
<param name="dtBeginUTC">The begining UTC datetime to start., SqlDbType.Datetime</param>
<param name="dtEndUTC">The ending UTC datetime to end, SqlDbType.Datetime</param>
<returns>Dataset, fields: I_PH, X_ID_DEV, D_POS_BGN, D_POS_END, N_X, N_Y, N_Z</returns>
<remarks>All dates parameters must be converted to UTC. All DateTime fields are returned in UTC.</remarks>
</member>
      <member name="M:Parco.Data.HistoryByRegions">
<summary>
HistoryByRegions returns a dataset of device location data from the ParcoRTLSHistory database.
</summary>
<param name="colReg">The region collection  instance to use for the search, SqlDbType.NvarChar(200)</param>
<param name="dtBeginUTC">The begining UTC datetime to start., SqlDbType.Datetime</param>
<param name="dtEndUTC">The ending UTC datetime to end, SqlDbType.Datetime</param>
<returns>Dataset, fields: I_PH, X_ID_DEV, D_POS_BGN, D_POS_END, N_X, N_Y, N_Z</returns>
<remarks>All dates parameters must be converted to UTC. All DateTime fields are returned in UTC. An error is thrown if the
collection's item count is 0</remarks>
</member>
      <member name="M:Parco.Data.HistoryLastKnownPosition(System.String,Parco.DataService.HistoryType)">
<summary>
HistoryLastKnownPosition returns a dataset of the latest device location data from the ParcoRTLSHistory database.
</summary>
<param name="X_ID_DEV">The Device ID to use for the search, SqlDbType.NvarChar(200)</param>
<returns>Dataset, fields: I_PH, X_ID_DEV, D_POS_BGN, D_POS_END, N_X, N_Y, N_Z</returns>
<remarks>All dates parameters must be converted to UTC. All DateTime fields are returned in UTC. 0 or 1 record may be returned.</remarks>
</member>
      <member name="M:Parco.Data.MapAdd(Parco.Map@)">
<summary>
MapAdd adds a record to the Maps table.
</summary>
<param name="oMap">The Map instance to add.</param>
<returns>Int32 - Auto Number Key I_MAP</returns>
<remarks>The oMap parameter is passed ByRef as the I_MAP property is set.</remarks>
</member>
      <member name="M:Parco.Data.MapAdd(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
<summary>
MapAdd adds a record to the Maps table.
</summary>
<param name="X_MAP">The Map name, SqlDbType.Nvarchar(200)</param>
<param name="I_ZN_MAP">The Parent Zone key for the map, SqlDbType.Int</param>
<param name="N_OGN_X">The X Origin value for the map, SqlDbType.Decimal(9)</param>
<param name="N_UR_X">The X value for the map's upper right corner, SqlDbType.Decimal(9)</param>
<param name="N_UR_Y">The Y value for the map's upper right corner, SqlDbType.Decimal(9)</param>
<param name="N_TOP_Z">The default Z top value for Zones created in the Map, SqlDbType.Decimal(9)</param>
<param name="N_BTM_Z">The default Z bottom value for Zones created in the Map, SqlDbType.Decimal(9)</param>
<param name="B_IMG">The byte array for the System.Drawing.Image for the Map, SqlDbType.Image</param>
<returns>Int32 - Auto Number Key I_MAP</returns>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.MapList">
<summary>
 MapList returns a sparse dataset for all Maps.
</summary>
<returns>Dataset</returns>
<remarks>The dataset has the following fields present: I_MAP integer, X_MAP string, F_CUR boolean</remarks>
</member>
      <member name="M:Parco.Data.MapSelect(System.Int32)">
<summary>
 MapSelect returns a dataset for the Map.
</summary>
<param name="I_MAP">The map database key</param>
<returns>Dataset</returns>
<remarks>The dataset will have 0 items if no matches found.</remarks>
</member>
      <member name="M:Parco.Data.MapGet(System.Int32)">
<summary>
 MapGet returns a populated Map instance.
</summary>
<param name="I_MAP">The map database key</param>
<returns>Map</returns>
<remarks>The ParentZoneKey property will have a value of -1 if the database value is DbNull.</remarks>
</member>
      <member name="M:Parco.Data.PopDevices(System.Data.DataSet@)">
local function for populating a device collection from a dataset
</member>
      <member name="M:Parco.Data.PopEntities(System.Data.DataSet@)">
local function for populating an entity collection from a dataset
</member>
      <member name="M:Parco.Data.PopEntityAssign(System.Data.DataSet@)">
local function for populating an entity assignment collection from a dataset
</member>
      <member name="M:Parco.Data.PopDeviceAssign(System.Data.DataSet@)">
local function for populating an entity assignment collection from a dataset
</member>
      <member name="M:Parco.Data.FixForSQL(System.String)">
TODO: remove the FixForSQL method? 
</member>
      <member name="M:Parco.Data.FixWildCard(System.String)">
TODO: remove the FixWildCard method?
</member>
      <member name="M:Parco.Data.#ctor"></member>
      <member name="M:Parco.Data.#ctor(System.String)">
 <summary>
 Initializes a new instance of the Data Class.
 </summary>
<param name="DataServiceURL">Sets the URL of the web service reference. This URL must be a valid Parco RLTS data service."</param>
<remarks>Use this constructor for accessing the data service if it is not password proctected.</remarks>
</member>
      <member name="M:Parco.Data.#ctor(System.String,System.String,System.String)">
 <summary>
 Initializes a new instance of the Data Class and supplies the values to create a network credential.
 </summary>
<param name="DataServiceURL">Sets the URL of the web service reference. This URL must be a valid Parco RLTS data service"</param>
<param name="UserID">The userid for the network credential to access the Parco RLTS data service"</param>
<param name="Password">The password for the network credential to access the Parco RLTS data service"</param>
<remarks>Use this constructor for accessing a password protected data service. An InvalidCredentialException will be throw if either the UserID or Password is an empty string.</remarks>
</member>
      <member name="M:Parco.Data.SetCredential">
<summary>
SetCredential creates the network credential for the userid and password. The webservice is pre-authenicated using the credentials. 
</summary>
<remarks>If the userid or password is an empty string, an error will be thrown. Use this method if the webservice has password protection.</remarks>
</member>
      <member name="M:Parco.Data.DeviceTypeEdit(System.Int32,System.String)">
<summary>
DeviceTypeEdit modifies an existing device type.
</summary>
<param name="I_TYP_DEV">The  auto number key for the device type record, SqlDbType.Int</param>
<param name="X_DSC_DEV">The text description for the device type, SqlDbType.NvarChar(50)</param>
<remarks>Device types characterize Parco Tags in size, beacon frequency, shape, and lot numbers.</remarks>
</member>
      <member name="M:Parco.Data.DeviceTypeDelete(System.Int32)">
<summary>
DeviceTypeDelete deletes an existing device type. The delete will throw an exception if the record is in use.
</summary>
<param name="I_TYP_DEV">The auto number key for the device type record, SqlDbType.Int</param>
<remarks>Device types characterize Parco Tags in size, beacon frequency, shape, and lot numbers.</remarks>
</member>
      <member name="M:Parco.Data.EntityTypeEdit(System.Int32,System.String)">
<summary>
 EntityTypeEdit modifies an existing Entity Type.
</summary>
<param name="I_TYP_ENT">The  auto number key for the entity type record, SqlDbType.Int</param>
<param name="X_DSC_ENT">The text description for the entity type, SqlDbType.NvarChar(50)</param>
<remarks>Entity types characterize entities. All Entity Types are user defined</remarks>
</member>
      <member name="M:Parco.Data.EntityTypeDelete(System.Int32)">
<summary>
EntityTypeDelete deletes an existing entity type. The delete will throw an exception if the record is in use.
</summary>
<param name="I_TYP_ENT">The auto number key for the entity type record, SqlDbType.Int</param>
<remarks>Entity types characterize entities. All Entity Types are user defined</remarks>
</member>
      <member name="M:Parco.Data.AssignmentReasonEdit(System.Int32,System.String)">
<summary>
AssignmentReasonEdit modifies an existing Assignment Reason.
</summary>
<param name="I_RSN">The key the Assignment Reason record, SqlDbType.Int</param>
<param name="X_RSN">The description for the Assignment Reason, SqlDbType.NvarChar(50)</param>
<remarks>Assignment Reasons characterize assignments. Assignment Reasons are user defined and will be used according to your business rules.</remarks>
</member>
      <member name="M:Parco.Data.AssignmentReasonDelete(System.Int32)">
<summary>
AssignmentReasonDelete deletes an existing Assignment Reason. The delete will throw an exception if the record is in use.
</summary>
<param name="I_RSN">The key the Assignment Reason record, SqlDbType.Int</param>
<remarks>Assignment Reasons characterize assignments. Assignment Reasons are user defined and will be used according to your business rules.</remarks>
</member>
      <member name="M:Parco.Data.ZoneTypeEdit(System.Int32,System.String)">
<summary>
 ZoneTypeEdit modifies an existing Zone Type.
Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
Exceptions are thrown if reserved Zone types are edited or deleted.
</summary>
<param name="I_TYP_ZN">The  auto number key for the entity type record, SqlDbType.Int</param>
<param name="X_DSC_ZN">The text description for the entity type, SqlDbType.NvarChar(50)</param>
<remarks>Zone types characterize zones for defining location granularity. Values less than 100 are system values and are reserved,  greater than 100 are user defined</remarks>
</member>
      <member name="M:Parco.Data.ZoneTypeDelete(System.Int32)">
<summary>
ZoneTypeDelete deletes an existing zone type. The delete will throw an exception if the record is in use or is reserved.
</summary>
<param name="I_TYP_ZN">The auto number key for the zone type record, SqlDbType.Int</param>
<remarks>Zone types characterize zones for defining location granularity. Values less than 100 are system values and are reserved,  greater than 100 are user defined</remarks>
</member>
      <member name="M:Parco.Data.RegionEdit(System.Int32,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<summary>
RegionEdit modifies an existing Region. 
</summary>
<param name="I_RGN">The key specifying the region to edit, SqlDbType.Int</param>
<param name="X_NM_RGN">The name for the region, SqlDbType.NvarChar(200)</param>
<param name="N_MAX_X">The max X vertice value for the region, SqlDbType.Float</param>
<param name="N_MAX_Y">The max Y vertice value for the region, SqlDbType.Float</param>
<param name="N_MAX_Z">The max Z vertice value for the region, SqlDbType.Float</param>
<param name="N_MIN_X">The min X vertice value for the region, SqlDbType.Float</param>
<param name="N_MIN_Y">The min Y vertice value for the region, SqlDbType.Float</param>
<param name="N_MIN_Z">The min Z vertice value for the region,SqlDbType.Float</param>
<param name="I_ZN">The optional Zone ID if the region belongs to a zone. SqlDbType.NvarChar(200)</param>
<param name="I_TRG">The optional trigger key if the region belongs to a trigger, SqlDbType.Int</param>
<remarks>The Max and Min values are the values computed by a region object from it vertices. A region may belong to a Room entity, Trigger, or both.
A region must contain a zone key or a trigger key but may not contain both. 
</remarks>
</member>
      <member name="M:Parco.Data.RegionEdit(Parco.Region3D)">
<summary>
RegionEdit modifies an existing Region.
</summary>
<param name="oRegion">A Region3D instance containing the values to modify.</param>
<remarks>The Max and Min values are the values computed by a region object from it vertices. A region may belong to a Room entity, Trigger, or both.
A region must contain a zone reference key or a trigger key but may not contain both. 
</remarks>
</member>
      <member name="M:Parco.Data.RegionDelete(System.Int32)">
<summary>
RegionDelete deletes an existing Region. The delete will fail if the region's vertices are not deleted first.
</summary>
<param name="I_RGN">The auto number key of the region to delete.</param>
<remarks>A region must belong to a Zone or a Trigger but not both.</remarks>
</member>
      <member name="M:Parco.Data.VertexEdit(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<summary>
VertexEdit modifies a Vertex in the Vertices table.
</summary>
<param name="I_VTX">The key for the vertex record, SqlDbType.Int</param>
<param name="N_X">The X value for the vertex, SqlDbType.Float</param>
<param name="N_Y">The Y value for the vertex, SqlDbType.Float</param>
<param name="N_Z">The Z value for the vetex. The Z values are not used at this time except for a Region3D object to calculate the Max and Min Z values, SqlDbType.Float</param>
<param name="N_ORD">The order number for the vertex., SqlDbType.Int</param>
<param name="I_RGN">The key for the parent region., SqlDbType.Int</param>
<remarks> Verticies should be ordered with the N_ORD value increasing in the clockwise direction. The result of the verticies for a region should form a regular polygon such that no lines cross over one another.</remarks>
</member>
      <member name="M:Parco.Data.VertexEdit(Parco.Point2D)">
<summary>
VertexEdit modifies a Vertex in the Vertices table.
</summary>
<param name="oVert">A Point2D object instance.</param>
<remarks>If the object does not contain a valid I_RGN key, the edit will fail. Verticies should be ordered with the N_ORD value increasing in the clockwise direction. The result of the verticies for a region should form a regular polygon such that no lines cross over one another.</remarks>
</member>
      <member name="M:Parco.Data.VertexEdit(Parco.Point3D)">
<summary>
VertexEdit modifies a Vertex in the Vertices table.
</summary>
<param name="oVert">A Point3D object instance.</param>
<remarks>If the object does not contain a valid I_RGN key, the edit will fail. Verticies should be ordered with the N_ORD value increasing in the clockwise direction. The result of the verticies for a region should form a regular polygon such that no lines cross over one another.</remarks>
</member>
      <member name="M:Parco.Data.VertexDelete(System.Int32)">
<summary>
VertexDelete deletes a Vertex in the Vertices table.
</summary>
<param name="I_VTX">The key for the vertex record.</param>
<remarks>Verticies should be ordered with the N_ORD value increasing in the clockwise direction. The result of the verticies for a region should form a regular polygon such that no lines cross over one another.</remarks>
</member>
      <member name="M:Parco.Data.ZoneAndRegionsAdd(Parco.Zone@)">
<summary>
ZoneAndRegionsAdd inserts a Zone and all of its children Regions and Vertices if present.
</summary>
<param name="objZone">An instance of a Zone class. The instance is passed by Ref since the Auto Number Key (ID property) is set.</param>
<remarks>Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
A RegionInvalidException is thrown if any of the Region3D children are not valid.
</remarks>
</member>
      <member name="M:Parco.Data.ZoneEdit(System.Int32,System.String,System.Int32,System.Int32)">
<summary>
ZoneEdit modifies a Zone record in the Zones table.
</summary>
<param name="I_ZN">The unique id Auto Key for the Zone, SqlDbType.Int</param>
<param name="X_NM_ZN">The friendly name for the Zone such as Room 203 or Floor 2, SqlDbType.NvarChar(200)</param>
<param name="I_TYP_ZN">The ZoneType for the Zone, SqlDbType.Int</param>
<param name="I_PNT_ZN">The Parent Zone key for the Zone Hierarchy. Passing 0 or less will insert a null value in the record., SqlDbType.Int</param>
<remarks>Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity</remarks>
</member>
      <member name="M:Parco.Data.ZoneEdit(Parco.Zone)">
<summary>
ZoneEdit modifies a Zone record in the Zones table.
</summary>
<param name="objZone">An instance of a Zone class</param>
<remarks>Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
Passing an instance with the I_PNT_ZN property = 0 or less will insert a null value into the database the parent key.</remarks>
</member>
      <member name="M:Parco.Data.ZoneDelete(System.Int32)">
<summary>
ZoneDelete deletes a Zone in the Zone table.
</summary>
<param name="I_ZN">The auto number key for the zone record</param>
<remarks>The delete will fail if the Zone has Children Zones.</remarks>
</member>
      <member name="M:Parco.Data.TriggerAndRegionsAdd(Parco.Trigger@)">
<summary>
TriggerAndRegionsAdd inserts a Trigger and all of its children Regions and Vertices if present.
</summary>
<param name="oTrigger">An instance of a Trigger class. The instance is passed by Ref since the Auto Number Keys (ID property) for the trigger, regions, and vertices are set.</param>
<remarks>Reserved Zone Types are 1 - Campus, 2 - Building, 3 - Floor, 4 - Wing, 5 - Room, 6 - OData Proximity, 7 - PData Proximity
A RegionInvalidException is thrown if any of the Region3D children are not valid.
</remarks>
</member>
      <member name="M:Parco.Data.TriggerEdit(System.Int32,System.String,System.Int32,System.Boolean)">
<summary>
TriggerEdits edits an existing record to the Triggers table.
</summary>
<param name="I_TRG">The trigger's auto number key, SqlDbType.int</param>
<param name="X_NM_TRG">The friendly name for the trigger, SqlDbType.NvarChar(200)</param>
<param name="I_DIR">The trigger direction, SqlDbType.int</param>
<param name="bIgnoreUnknowns">The triggers behavior for unknown devices</param>
<returns></returns>
<remarks>This method does not edit the underlying region</remarks>
</member>
      <member name="M:Parco.Data.TriggerEdit(System.Int32,System.String,System.Int32,System.Boolean)">
<summary>
TriggerEdits edits an existing record to the Triggers table.
</summary>
<param name="I_TRG">The trigger's auto number key, SqlDbType.int</param>
<param name="X_NM_TRG">The friendly name for the trigger, SqlDbType.NvarChar(200)</param>
<param name="enmDIR">The trigger direction enumerated value, SqlDbType.int</param>
<param name="bIgnoreUnknowns">The triggers behavior for unknown devices</param>
<returns></returns>
<remarks>This method does not edit the underlying regions.</remarks>
</member>
      <member name="M:Parco.Data.TriggerEdit(Parco.Trigger)">
<summary>
TriggerEdits edits an existing record to the Triggers table.
</summary>
<param name="oTrigger">An instance of Parco.Trigger to edit</param>
<returns></returns>
<remarks>This method does not edit the underlying regions.</remarks>
</member>
      <member name="M:Parco.Data.TriggerDelete(System.Int32)">
<summary>
TriggerDelete deletes an existing record in the Triggers table and any associated regions.
</summary>
<param name="I_TRG">The key of the trigger to delete</param>
<returns></returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Data.DeviceAdd">
<summary>
DeviceAdd adds a record to the Devices table.
</summary>
<param name="X_ID_DEV">The unique identifier for the device, SqlDbType.NvarChar(200)</param>
<param name="I_TYP_DEV">The device type key, SqlDbType.Int</param>
<param name="X_NM_DEV">The friendly name for the device, SqlDbType.NvarChar(200)</param>
<param name="X_MOE_X">The margin of error in the X direction, SqlDbType.Float</param>
<param name="X_MOE_Y">The margin of error in the Y direction, SqlDbType.Float</param>
<param name="X_MOE_Z">The margin of error in the Z direction, SqlDbType.Float</param>
<param name="F_LOG">The flag for logging device data if it exists, SqlDbType.Bit</param>
<param name="D_SRV_BGN">The service begin DateTime for the device, SqlDbType.Datetime</param>
<remarks>MOE's are used in determining if a device has moved in the History database. The F_LOG flag may be used
to stop transmitted device data from being saved to the history database (for future use)</remarks>
</member>
      <member name="M:Parco.Data.DeviceAdd(Parco.Device)">
<summary>
DeviceAdd adds a record to the Devices table.
</summary>
<param name="oDevice">A Device instance containing the values to add.</param>
<remarks>Margin of Error properties (MOE's) are used in determining if a device has moved in the History database. The Device.Log property
 may be used to stop transmitted device from being saved to the history database (for future use)</remarks>
</member>
      <member name="M:Parco.Data.DeviceEdit">
<summary>
DeviceEdit modifies a record to the Devices table.
</summary>
<param name="X_ID_DEV">The unique identifier for the device, SqlDbType.NvarChar(200)</param>
<param name="I_TYP_DEV">The device type key, SqlDbType.Int</param>
<param name="X_NM_DEV">The friendly name for the device, SqlDbType.NvarChar(200)</param>
<param name="X_MOE_X">The margin of error in the X direction, SqlDbType.Float</param>
<param name="X_MOE_Y">The margin of error in the Y direction, SqlDbType.Float</param>
<param name="X_MOE_Z">The margin of error in the Z direction, SqlDbType.Float</param>
<param name="F_LOG">The flag for logging device data if it exists, SqlDbType.Bit</param>
<param name="D_SRV_BGN">The service begin DateTime for the device, SqlDbType.Datetime</param>
<remarks>MOE's are used in determining if a device has moved in the History database. The F_LOG flag may be used
to stop transmitted device postional data from being saved to the history database (for future use)</remarks>
</member>
      <member name="M:Parco.Data.DeviceEdit(Parco.Device)">
<summary>
DeviceEdit modifies a record in the Devices table.
</summary>
<param name="oDevice">A Device instance containing the values to modify.</param>
<remarks>Margin of Error properties (MOE's) are used in determining if a device has moved in the History database. The Device.Log property
 may be used to stop transmitted device from being saved to the history database (for future use)</remarks>
</member>
      <member name="M:Parco.Data.DeviceDelete(System.String)">
<summary>
DeviceDelete deletes a record in the Devices table.
</summary>
<param name="X_ID_DEV">The Device key to delete. SqlDbType.NvarChar(200)</param>
<remarks>A device may not be deleted unless children records in DeviceAssmts are deleted (archived).</remarks>
</member>
      <member name="M:Parco.Data.DeviceRemoveEndDate(System.String)">
<summary>
DeviceRemoveEndDate sets the end DateTime of a device to null to designate it as "in service".
</summary>
<param name="X_ID_DEV">The device ID. SqlDbType.NVarChar(200)</param>
<remarks>The D_CRT (create DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.DeviceSetEndDate">
<summary>DeviceSetEndDate sets the end DateTime of a device to designate it as out of service.</summary>
<param name="X_ID_DEV">The Device ID. SqlDbType.NVarChar(200)</param>
<param name="D_SRV_END">The UTC DateTime and time to set. SqlDbType.Datetime</param>
<remarks>All Parco system DateTime fields are in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityAdd(System.String,System.Int32,System.String)">
<summary>
EntityAdd adds a record to the Entities table.
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NvarChar(200)</param>
<param name="I_TYP_ENT">The device type key, SqlDbType.Int</param>
<param name="X_NM_ENT">A user friendly name for the entity, SqlDbType.NvarChar(200)</param>
<remarks>The D_CRT (create DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityAdd(Parco.Entity)">
<summary>
EntityAdd adds a record to the Entities table.
</summary>
<param name="oEntity">The entity instance to add, Parco.Entity</param>
<remarks>The D_CRT (create DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityEdit(System.String,System.Int32,System.String)">
<summary>
EntityEdit modifies a record in the Entities table.
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NvarChar(200)</param>
<param name="I_TYP_ENT">The device type key, SqlDbType.Int</param>
<param name="X_NM_ENT">A user friendly name for the entity, SqlDbType.NvarChar(200)</param>
<remarks>The D_UDT (update DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityEdit(Parco.Entity)">
<summary>
EntityEdit modifies a record in the Entities table.
</summary>
<param name="oEntity">The instance of an entity to edit, Parco.Entity</param>
<remarks>The D_UDT (update DateTime) field defaults to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.EntityDelete(System.String)">
<summary>
EntityDelete deletes a record in the Entities table.
</summary>
<param name="X_ID_ENT">The key of the entity to delete, SqlDbType.NvarChar(200)</param>
<remarks>Child records in table EntityAssignments must be deleted and/or archived before an
entity may be deleted.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityEdit(System.Int32,System.String,System.String,System.Int32)">
<summary>
AssignEntityEdit edits an assignment record to the EntityAssmts table.
</summary>
<param name="I_ASN_ENT">The key for the record, SqlDbType.Int</param>
<param name="X_ID_PRN">The unique identifier for the Parent in the assignment, SqlDbType.NvarChar(200)</param>
<param name="X_ID_CHD">The unique identifier for the Child in the assignment, SqlDbType.NvarChar(200)</param>
<param name="I_RSN">An optional reason key for the basis of the assignment, SqlDbType.Int</param>
<remarks>The D_ENT_ASN_BGN (assignment begin DateTime) field is not changed.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityEnd(System.Int32)">
<summary>
AssignEntityEnd sets the end DateTime for an assignment record in the EntityAssmts table.
</summary>
<param name="I_ASN_ENT">The key for the record, SqlDbType.Int</param>
<remarks>The D_ENT_ASN_END (assignment end DateTime) field is set to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityDelete(System.Int32)">
<summary>
AssignEntityDelete deletes an assignment record in the EntityAssmts table.
</summary>
<param name="I_ASN_ENT">The key for the record, SqlDbType.Int</param>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityEndAll(System.String)">
<summary>
AssignEntityEndAll sets the Assignment End DateTime for all assignment records where the
either the principle or child matches the Entity ID.
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NVarChar(200)</param>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.AssignEntityDeleteAll(System.String)">
<summary>
AssignEntityDeleteAll deletes all assignment records where the
either the principle or child matches the Entity ID.
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NVarChar(200)</param>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.AssignDevEdit(System.Int32,System.String,System.String,System.Int32)">
<summary>
AssignDevEdit edits an assignment record to the DeviceAssmts table.
</summary>
<param name="I_ASN_DEV">The key for the record, SqlDbType.Int</param>
<param name="X_ID_DEV">The unique identifier for the Parco device, SqlDbType.NvarChar(200)</param>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NvarChar(200)</param>
<param name="I_RSN">An optional reason key for the basis of the assignment, SqlDbType.Int</param>
<remarks>The D_ASN_BGN (assignment begin DateTime) field is not changed.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevEnd(System.Int32)">
<summary>
AssignDevEnd sets the end DateTime for an assignment record in the DeviceAssmts table.
</summary>
<param name="I_ASN_DEV">The key for the record, SqlDbType.Int</param>
<remarks>The D_ASN_END (assignment end DateTime) field is set to the current server time in UTC.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevDelete(System.Int32)">
<summary>
AssignDevDelete deletes an assignment record in the DeviceAssmts table.
</summary>
<param name="I_ASN_DEV">The key for the record, SqlDbType.Int</param>
<remarks>none</remarks>
</member>
      <member name="M:Parco.Data.AssignDevEndAll(System.String)">
<summary>
AssignDevEndAll sets the D_ASN_END field for all open assignment records for the Device ID
</summary>
<param name="X_ID_DEV">The unique identifier for the Device, SqlDbType.NVarChar(200)</param>
<remarks>The D_ASN_END Field is set by the server in UTC and is not changed for previosly ended assignments.</remarks>
</member>
      <member name="M:Parco.Data.AssignDevDeleteAll(System.String)">
<summary>
AssignDevDeleteAll deletes all assignment records for the Device Id
</summary>
<param name="X_ID_DEV">The unique identifier for the Device, SqlDbType.NVarChar(200)</param>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.AssignDevDeleteAllByEnt(System.String)">
<summary>
AssignDevDeleteAllByEnt deletes all assignment records for the Entity ID
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NVarChar(200)</param>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.AssignDevEndAllByEnt(System.String)">
<summary>
AssignDevEndAllByEnt ends all open assignment records for the Entity ID
</summary>
<param name="X_ID_ENT">The unique identifier for the entity, SqlDbType.NVarChar(200)</param>
<remarks>The D_ASN_END Field is set by the server in UTC</remarks>
</member>
      <member name="M:Parco.Data.HistoryDeleteAll(Parco.DataService.HistoryType)">
<summary>
HistoryDeleteAll deletes all of the records in ParcoRTLSHistory database.
</summary>
<remarks>This method may timeout if a large number of position records are contained in the database.</remarks>
</member>
      <member name="M:Parco.Data.HistoryDeleteByID(System.String,Parco.DataService.HistoryType)">
<summary>
HistoryDeleteAll deletes all of the records in ParcoRTLSHistory database.
</summary>
<param name="X_ID_DEV">The Device ID to delete all history records for, SqlDbType.NvarChar(200)</param>
<remarks>This method may timeout if a large number of position records are contained in the database.</remarks>
</member>
      <member name="M:Parco.Data.MapEdit(Parco.Map)">
<summary>
MapEdit updates a record to the Maps table.
</summary>
<param name="oMap">The Map intance to update</param>
<returns>Void</returns>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.MapEdit(System.Int32,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
<summary>
MapEdit updates a record to the Maps table.
</summary>
<param name="I_MAP">The Map data base key, SqlDbType.Int</param>
<param name="X_MAP">The Map name, SqlDbType.Nvarchar(200)</param>
<param name="I_ZN_MAP">The Parent Zone key for the map, SqlDbType.Int</param>
<param name="N_OGN_X">The X Origin value for the map, SqlDbType.Decimal(9)</param>
<param name="N_UR_X">The X value for the map's upper right corner, SqlDbType.Decimal(9)</param>
<param name="N_UR_Y">The Y value for the map's upper right corner, SqlDbType.Decimal(9)</param>
<param name="N_TOP_Z">The default Z top value for Zones created in the Map, SqlDbType.Decimal(9)</param>
<param name="N_BTM_Z">The default Z bottom value for Zones created in the Map, SqlDbType.Decimal(9)</param>
<param name="B_IMG">The byte array for the System.Drawing.Image for the Map, SqlDbType.Image</param>
<returns>Void</returns>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.MapDelete(System.Int32)">
<summary>
 MapDelete deletes a map record from the database.
</summary>
<param name="I_MAP">The Map database key to delete.</param>
<returns>void</returns>
<remarks>None</remarks>
</member>
      <member name="M:Parco.Data.MapDelete(System.Int32)">
<summary>
 MapDelete deletes a map record from the database.
</summary>
<param name="oMap">The Map instance to delete.</param>
<returns>void</returns>
<remarks>None</remarks>
</member>
      <member name="P:Parco.Data.DataServiceURL">
 <summary>
 Sets the URL for the Parco RTLS data service.
 </summary>
<remarks>The URL must point to a valid Parco version 1.0 data service like http://IPAddress/ParcoRTLSws/DataV1.asmx . Replace "IPAddress" with a valid TCPIP address
like 10.1.130.4 or DNS entry like parcodata.yourdomain.com to connect to the data service.</remarks>
</member>
      <member name="P:Parco.Data.UserID">
<summary>
The UserId member sets the userid used for a network credential. 
</summary>
<remarks>This property is not needed if the Parco Data Service is not password proctected.</remarks>
</member>
      <member name="P:Parco.Data.Password">
<summary>
The password member sets the password used for a network credential. 
</summary>
<remarks>This property is not needed if the Parco Data Service is not password proctected.</remarks>
</member>
      <member name="T:Parco.DataStream">
<summary>The DataStream class provides connectivity to Parco streaming data resources. Resources are created by Parco to meet your
your application requirements.
</summary>
<remarks>Parco streaming data resources are published in the Parco RTLS database. Calling Data.ResourceSelect will return
a TCPIP address and Port for the least busy resource of the type specified.</remarks>
</member>
      <member name="M:Parco.DataStream.ConnectionTest(System.String,System.Int32)">
<summary>ConnectionTest returns true if a connection can be made to the specified TCPIP address and port. </summary>
<remarks>A new connection is made and closed. This method may be called at any time.</remarks>
</member>
      <member name="M:Parco.DataStream.Address(System.String,System.Int32)">
<summary>The Address method sets the TCPIP address and Port for a resource.</summary>
<remarks>A ConnectionException is thrown if the underlying connection is open.</remarks>
</member>
      <member name="M:Parco.DataStream.Connect">
<summary>Connect opens a connection to the TCPIP address and port.</summary>
<remarks>A ConnectionException is thrown if the underlying socket connection is already open.</remarks>
</member>
      <member name="M:Parco.DataStream.Close">
<summary>Close closes the socket connection to the Parco resource.</summary>
<remarks>A NotConnectedException is thrown if the underlying socket is not initialized.</remarks>
</member>
      <member name="M:Parco.DataStream.SendRequest">
<summary>Sends a Parco Request to the resource.</summary>
<remarks>A NotConnectedException is thrown if the underlying socket is not initialized or open. An InvalidRequestException is
thrown if an AddTag or RemoveTag request does not contain any Tags.</remarks>
</member>
      <member name="M:Parco.DataStream.StartReadingLive"></member>
      <member name="M:Parco.DataStream.LiveDataReceived"></member>
      <member name="M:Parco.DataStream.LiveDataArrived(System.String)"></member>
      <member name="M:Parco.DataStream.#ctor">
<summary>Initializes a new instance.</summary>
</member>
      <member name="M:Parco.DataStream.#ctor(System.String,System.Int32)">
<summary>Initializes a new instance and sets the TCPIP address and port</summary>
<remarks>The connection is not opened until the Connect method is called.</remarks>
</member>
      <member name="M:Parco.DataStream.Finalize">
<summary>Finalizes the object instance</summary>
<remarks>The underlying socket is closed if it is still open.</remarks>
</member>
      <member name="E:Parco.DataStream.Stream">
<summary>The stream event is raised when the DataStream instance receives device position information from the resource.</summary>
<remarks>The device object contains the ID as well as X, Y, and Z coordinate data.
 The stream event has the same signature as the Trigger.TriggerEvent and History.HistoryData events. As such, you may use the same
event handler for all three events.</remarks>
</member>
      <member name="E:Parco.DataStream.HeartBeat">
<summary>The HeartBeat event is raised when the DataStream instance receives a heartbeat message from the resource.</summary>
<remarks>The HeartBeat message contains the ticks (Int64 timestamp) of when the message was sent. 
The DataStream instance receiving the Heartbeat message immediatly returns to the sender. Slow response to heartbeat messages
will cause the sender to terminate the TCP/IP connection. The server will send an end stream Response with the last returned timestamp
and a message of stating why the connection was terminated.</remarks>
</member>
      <member name="E:Parco.DataStream.Response">
<summary>The Response event is raised when the DataStream instance receives receives a response from a Parco service. A response is always sent from the service
in acknowlegement of a request.</summary>
<remarks>The response object contains your original request ID as well as any error message. An empty message signifies that the request was processed. A message, if present, indicates
the problem with the original request. </remarks>
</member>
      <member name="E:Parco.DataStream.Connection">
<summary>The Connection event is raised when the DataStream's underlying socket changes state.</summary>
<remarks>If a connection unexpectedly closes, you will have to re-initialize your connection and all requests for data.</remarks>
</member>
      <member name="P:Parco.DataStream.Name">
<summary>A user supplied name to differentiate between multiple DataStream instances.</summary>
</member>
      <member name="P:Parco.DataStream.IsSubscriptionBased">
<summary>A user supplied property to indicate if the resource is Subscription or FullStream based.</summary>
<remarks>This property is intended to be set from the data base record for the resource.</remarks>
</member>
      <member name="P:Parco.DataStream.IsAveraged">
<summary>A user supplied property to indicate if the resource is supplying averaged or raw positional data.</summary>
<remarks>This property is intended to be set from the data base record for the resource.</remarks>
</member>
      <member name="P:Parco.DataStream.IsConnected">
<summary>Returns true if the underlying TCP socket is connected, otherwise returns false.</summary>
</member>
      <member name="P:Parco.DataStream.ConnectionState">
<summary>Returns the Connection State Enumeration for the underlying socket. Returns ConnectionState.NotKnown if the tcp connection object is nothing.</summary>
</member>
      <member name="P:Parco.DataStream.ResourceType">
<summary>The Resouce Type that the instance is receiving streaming data from. Resouce types are data driven from the Parco data service
and are set up in advance and are based on your application needs.</summary>
</member>
      <member name="P:Parco.DataStream.Version">
<summary>The executing assembly version.</summary>
</member>
      <member name="P:Parco.DataStream.TCPIP"></member>
      <member name="P:Parco.DataStream.Port"></member>
      <member name="T:Parco.ConnectionState">
<summary>DataStream TCP socket connection enumerations.</summary>
<remarks>None</remarks>
</member>
      <member name="F:Parco.ConnectionState.NotKnown"></member>
      <member name="F:Parco.ConnectionState.Connected"></member>
      <member name="F:Parco.ConnectionState.Disconnected"></member>
      <member name="F:Parco.ConnectionState.Blocking"></member>
      <member name="T:Parco.Device">
<summary>
The Device class is the represention of a Tag in the context of the ParcoRTLSMaint  Database.
</summary>
<remarks></remarks>
</member>
      <member name="M:Parco.Device.#ctor"></member>
      <member name="M:Parco.Device.#ctor(System.String)"></member>
      <member name="M:Parco.Device.#ctor(System.String,System.Single,System.Single,System.Single)"></member>
      <member name="P:Parco.Device.ID">
<summary>A unique string identifier transmitted by the Device or stored in a database.</summary>
<value>A unique string identifier transmitted by the Device or stored in a database.</value> 
</member>
      <member name="P:Parco.Device.DeviceType">
<summary>A logical device grouping. Devices may be classified by physical form factors as well as administrative groupings such as lot numbers.</summary>
<value>The device type identifier.</value> 
</member>
      <member name="P:Parco.Device.Name">
<summary>The device name. Device name holds an assigned name which may also be the unique id or some other user friendly name.</summary>
<value>The friendly name identifier.</value> 
</member>
      <member name="P:Parco.Device.ServiceBegin">
<summary>The DateTime and time signifying the when the device was placed in service.</summary>
<value>The DateTime and time in UTC signifying the when the device was placed in service.</value> 
</member>
      <member name="P:Parco.Device.ServiceEnd">
<summary>The DateTime and time signifying the when the device was removed fromservice.</summary>
<value>The DateTime and time in UTC signifying the when the device was removed from service.</value> 
</member>
      <member name="P:Parco.Device.MOEx">
<summary>The margin of errror in the X direction used to determine if the device has moved. MOE's are used to 
eliminate insignificant position changes.</summary>
<value>The margin of errror in the X direction used to determine if the device has moved.</value> 
</member>
      <member name="P:Parco.Device.MOEy">
<summary>The margin of errror in the Y direction used to determine if the device has moved. MOE's are used to 
eliminate insignificant position changes.</summary>
<value>The margin of errror in the Y direction used to determine if the device has moved.</value> 
</member>
      <member name="P:Parco.Device.MOEz">
<summary>The margin of errror in the Z direction used to determine if the device has moved. MOE's are used to 
eliminate insignificant position changes.</summary>
<value>The margin of errror in the Z direction used to determine if the device has moved.</value> 
</member>
      <member name="P:Parco.Device.Log">
<summary>Boolean property to dertemine if the Device's transmitted data should be saved to the Parco RTLS Database.</summary>
<value>Boolean property to dertemine if the Device's transmitted data should be saved to the Parco RTLS Database.</value> 
</member>
      <member name="T:Parco.Entity">
<summary>
An entity represents person or thing that can accept an assignment. Entities can have devices or other entities assigned to them.
The entity ID is user assignable and should correspond to the ID of the item in your application or facility database. 
A name property is provided to hold a user friendly name or description of the entity.
</summary>
</member>
      <member name="M:Parco.Entity.#ctor"></member>
      <member name="M:Parco.Entity.#ctor(System.String)">
mcolDevices = New Devices
mcolEntities = New Entities
</member>
      <member name="M:Parco.Entity.#ctor(System.String,System.String,System.Int32)">
mcolDevices = New Devices
mcolEntities = New Entities
</member>
      <member name="M:Parco.Entity.#ctor(System.String,System.String,System.Int32,System.String)"></member>
      <member name="P:Parco.Entity.ID">
<summary>A unique string identifier stored in the Parco RTLS database. The value should correspond to the Entity's
key in your application or facilty database.</summary>
<value>>A unique string identifier stored in the Parco RTLS database. The value should correspond to the Entity's
key in your application or facilty database.</value> 
</member>
      <member name="P:Parco.Entity.EntityType">
<summary>The Int32 key for the classification of an entity.</summary>
<value>The Int32 key for the classification of an entity.</value> 
</member>
      <member name="P:Parco.Entity.TypeDescription">
<summary>The string descripton for the entity type.</summary>
<value>The string descripton for the entity type.</value> 
</member>
      <member name="P:Parco.Entity.Name">
<summary>The string name for the entity.</summary>
<value>The string name for the entity.</value> 
</member>
      <member name="P:Parco.Entity.CreateDate">
<summary>The datetime when the entity record was created in UTC.</summary>
<value>The datetime when the entity record was created in UTC.</value> 
</member>
      <member name="P:Parco.Entity.UpdateDate">
<summary>The datetime when the entity record was last updated in UTC.</summary>
<value>The datetime when the entity record was last updated in UTC.</value> 
</member>
      <member name="P:Parco.Entity.Entities">
<summary>A collection of Entity instances assigned to this Entity.</summary>
<value>A collection of Entity instances assigned to this Entity.</value> 
</member>
      <member name="P:Parco.Entity.Devices">
<summary>A collection of Device instances assigned to this Entity.</summary>
<value>A collection of Device instances assigned to this Entity.</value> 
</member>
      <member name="P:Parco.Entity.DeviceAssignments">
<summary>A collection of DeviceAssignment instances related to this Entity. A DeviceAssignment is a
business object representation of a device assignment record.</summary>
<value>A collection of DeviceAssignment instances related to this Entity. A DeviceAssignment is a
business object representation of a device assignment record.</value> 
</member>
      <member name="P:Parco.Entity.EntityAssignments">
<summary>A collection of EntityAssignment instances related to this Entity. An EntityAssignment is a
business object representation of an entity assignment record.</summary>
<value>A collection of EntityAssignment instances related to this Entity. An EntityAssignment is a
business object representation of an entity assignment record.</value> 
</member>
      <member name="T:Parco.StreamDataEventArgs"></member>
      <member name="M:Parco.StreamDataEventArgs.#ctor(Parco.Tag)"></member>
      <member name="T:Parco.StreamResponseEventArgs"></member>
      <member name="M:Parco.StreamResponseEventArgs.#ctor"></member>
      <member name="T:Parco.StreamHeartbeatEventArgs"></member>
      <member name="M:Parco.StreamHeartbeatEventArgs.#ctor"></member>
      <member name="T:Parco.StreamConnectionEventArgs"></member>
      <member name="M:Parco.StreamConnectionEventArgs.#ctor(Parco.ConnectionState)"></member>
      <member name="T:Parco.HistoryOnLoadEventArgs"></member>
      <member name="M:Parco.HistoryOnLoadEventArgs.#ctor(System.Int32)"></member>
      <member name="T:Parco.TriggerDirectionNotSetException">
<summary>Thrown when a trigger is checked and the direction has not been set.</summary>
</member>
      <member name="M:Parco.TriggerDirectionNotSetException.#ctor"></member>
      <member name="M:Parco.TriggerDirectionNotSetException.#ctor(System.String)"></member>
      <member name="M:Parco.TriggerDirectionNotSetException.#ctor"></member>
      <member name="T:Parco.TriggerRegionNotSetException">
<summary>Thrown when a trigger is checked and its regions collection is nothing.</summary>
</member>
      <member name="M:Parco.TriggerRegionNotSetException.#ctor"></member>
      <member name="M:Parco.TriggerRegionNotSetException.#ctor(System.String)"></member>
      <member name="M:Parco.TriggerRegionNotSetException.#ctor"></member>
      <member name="T:Parco.RegionVerticesNotSetException">
<summary>Thrown when the region validates itself and its vertices array is nothing.</summary>
</member>
      <member name="M:Parco.RegionVerticesNotSetException.#ctor"></member>
      <member name="M:Parco.RegionVerticesNotSetException.#ctor(System.String)"></member>
      <member name="M:Parco.RegionVerticesNotSetException.#ctor"></member>
      <member name="T:Parco.RegionVerticesMinimumException">
<summary>Thrown when a  Region2D or Region3D validates itself and its vertices array length is less than 3.</summary>
</member>
      <member name="M:Parco.RegionVerticesMinimumException.#ctor"></member>
      <member name="M:Parco.RegionVerticesMinimumException.#ctor(System.String)"></member>
      <member name="M:Parco.RegionVerticesMinimumException.#ctor"></member>
      <member name="T:Parco.RegionVerticesMissingException">
<summary>Thrown when a Region2D/3D instance validates itself and  a vertices array member (Parco.Point2D) is nothing.</summary>
</member>
      <member name="M:Parco.RegionVerticesMissingException.#ctor"></member>
      <member name="M:Parco.RegionVerticesMissingException.#ctor(System.String)"></member>
      <member name="M:Parco.RegionVerticesMissingException.#ctor"></member>
      <member name="T:Parco.RegionVerticesOutOfOrderException">
<summary>Thrown when a Region2D/3D instance validates itself and vertices array Item.Number is not equal to its index.</summary>
</member>
      <member name="M:Parco.RegionVerticesOutOfOrderException.#ctor"></member>
      <member name="M:Parco.RegionVerticesOutOfOrderException.#ctor(System.String)"></member>
      <member name="M:Parco.RegionVerticesOutOfOrderException.#ctor"></member>
      <member name="T:Parco.RegionInvalidException">
<summary>Thrown when the Region3D.ContainsPoint method is called and and its region is not valid.</summary>
</member>
      <member name="M:Parco.RegionInvalidException.#ctor"></member>
      <member name="M:Parco.RegionInvalidException.#ctor(System.String)"></member>
      <member name="M:Parco.RegionInvalidException.#ctor"></member>
      <member name="T:Parco.RegionInvalidShapeException">
<summary>Future use for shape checking.</summary>
</member>
      <member name="M:Parco.RegionInvalidShapeException.#ctor"></member>
      <member name="M:Parco.RegionInvalidShapeException.#ctor(System.String)"></member>
      <member name="M:Parco.RegionInvalidShapeException.#ctor"></member>
      <member name="T:Parco.Region3DInvalidZException">
<summary>Thrown when a  Region3D.ContainsPoint is called and ZTop is less than ZBottom AND the point is of type Point3D or the Z value is specified.</summary>
</member>
      <member name="M:Parco.Region3DInvalidZException.#ctor"></member>
      <member name="M:Parco.Region3DInvalidZException.#ctor(System.String)"></member>
      <member name="M:Parco.Region3DInvalidZException.#ctor"></member>
      <member name="T:Parco.HistoryNotLoadedException">
<summary>Thrown when the History.Start or History.Pause methods are called and the dataset is not Loaded or has 0 records.</summary>
</member>
      <member name="M:Parco.HistoryNotLoadedException.#ctor"></member>
      <member name="M:Parco.HistoryNotLoadedException.#ctor(System.String)"></member>
      <member name="M:Parco.HistoryNotLoadedException.#ctor"></member>
      <member name="T:Parco.HistoryPlayModeException">
<summary>Thrown when the History.Load method is called and the playmode property is missing or is invalid.</summary>
</member>
      <member name="M:Parco.HistoryPlayModeException.#ctor"></member>
      <member name="M:Parco.HistoryPlayModeException.#ctor(System.String)"></member>
      <member name="M:Parco.HistoryPlayModeException.#ctor"></member>
      <member name="T:Parco.HistoryPlayException">
<summary>Thrown when the History.Start method is called and already playing, Pause Method called and not playing or paused, or
setting any Playmode Property or DateTime property while Playing or Paused.</summary>
</member>
      <member name="M:Parco.HistoryPlayException.#ctor"></member>
      <member name="M:Parco.HistoryPlayException.#ctor(System.String)"></member>
      <member name="M:Parco.HistoryPlayException.#ctor"></member>
      <member name="T:Parco.HistoryPlayRateException">
<summary>Thrown when the History.Playrate property is set to a value of 0 or less</summary>
</member>
      <member name="M:Parco.HistoryPlayRateException.#ctor"></member>
      <member name="M:Parco.HistoryPlayRateException.#ctor(System.String)"></member>
      <member name="M:Parco.HistoryPlayRateException.#ctor"></member>
      <member name="T:Parco.HistoryDateException">
<summary>Thrown when the History.EndDate property is less than BeginDate property and the Load method is called.</summary>
</member>
      <member name="M:Parco.HistoryDateException.#ctor"></member>
      <member name="M:Parco.HistoryDateException.#ctor(System.String)"></member>
      <member name="M:Parco.HistoryDateException.#ctor"></member>
      <member name="T:Parco.HistoryPropertySetException">
<summary>Thrown when the Target,  Property, or DateTime property  is set while PlayState is not NotReady</summary>
</member>
      <member name="M:Parco.HistoryPropertySetException.#ctor"></member>
      <member name="M:Parco.HistoryPropertySetException.#ctor(System.String)"></member>
      <member name="M:Parco.HistoryPropertySetException.#ctor"></member>
      <member name="T:Parco.DataSearchException">
<summary>Thrown when Passing a SQL string argument which contains Insert, Update, or Delete commands to the Search, HistorySearch, or DataSearch methods.</summary>
</member>
      <member name="M:Parco.DataSearchException.#ctor"></member>
      <member name="M:Parco.DataSearchException.#ctor(System.String)"></member>
      <member name="M:Parco.DataSearchException.#ctor"></member>
      <member name="T:Parco.DataException">
<summary>Thrown when a generic Parco.Dataservice data access error occurs.</summary>
</member>
      <member name="M:Parco.DataException.#ctor"></member>
      <member name="M:Parco.DataException.#ctor(System.String)"></member>
      <member name="M:Parco.DataException.#ctor"></member>
      <member name="T:Parco.NotConnectedException">
<summary>Thrown when calling a DataStream method while the underlying socket is not open</summary>
</member>
      <member name="M:Parco.NotConnectedException.#ctor"></member>
      <member name="M:Parco.NotConnectedException.#ctor(System.String)"></member>
      <member name="M:Parco.NotConnectedException.#ctor"></member>
      <member name="T:Parco.ConnectionException">
<summary>Thrown when a DataStream TCPIP address or port properties are modified while the underlying socket is open.</summary>
</member>
      <member name="M:Parco.ConnectionException.#ctor"></member>
      <member name="M:Parco.ConnectionException.#ctor(System.String)"></member>
      <member name="M:Parco.ConnectionException.#ctor"></member>
      <member name="T:Parco.InvalidRequestException">
<summary>Thrown when the DataStream AddDevice or RemoveDevice method is called without specifying the device(s)</summary>
</member>
      <member name="M:Parco.InvalidRequestException.#ctor"></member>
      <member name="M:Parco.InvalidRequestException.#ctor(System.String)"></member>
      <member name="M:Parco.InvalidRequestException.#ctor"></member>
      <member name="T:Parco.InvalidCredentialException">
<summary>Thrown when the DataStream SetCredential method or a constructor is called with empty UserID or Password strings.</summary>
</member>
      <member name="M:Parco.InvalidCredentialException.#ctor"></member>
      <member name="M:Parco.InvalidCredentialException.#ctor(System.String)"></member>
      <member name="M:Parco.InvalidCredentialException.#ctor"></member>
      <member name="T:Parco.History">
<summary>
The history player is a virtual VCR for timed playback of Parco historical data. Data is supplied by the HistoryData event and is in the same format 
as streaming data. 
</summary>
<remarks>An asynchronous data retrieval mode is available. The OnLoad event fires when the data retrieval is complete.</remarks>
</member>
      <member name="T:Parco.History.PlayMode">
<summary>Enumerated contants for specifying the PlayMode of the history player.</summary>
</member>
      <member name="F:Parco.History.PlayMode.NotSet"></member>
      <member name="F:Parco.History.PlayMode.ByRegion"></member>
      <member name="F:Parco.History.PlayMode.ByRegions"></member>
      <member name="F:Parco.History.PlayMode.ByTag"></member>
      <member name="F:Parco.History.PlayMode.ByTags"></member>
      <member name="T:Parco.History.PlayState">
<summary>Enumerated contants for determining the PlayState of the history player.</summary>
</member>
      <member name="F:Parco.History.PlayState.NotReady"></member>
      <member name="F:Parco.History.PlayState.Ready"></member>
      <member name="F:Parco.History.PlayState.Playing"></member>
      <member name="F:Parco.History.PlayState.Paused"></member>
      <member name="M:Parco.History.GetTag(System.Data.DataRow)"></member>
      <member name="M:Parco.History.Interval"></member>
      <member name="M:Parco.History.GetData">
<summary>Delegate for asynchronous data retrieval.</summary>
</member>
      <member name="M:Parco.History.#ctor"></member>
      <member name="M:Parco.History.#ctor"></member>
      <member name="M:Parco.History.#ctor"></member>
      <member name="M:Parco.History.#ctor"></member>
      <member name="M:Parco.History.#ctor"></member>
      <member name="M:Parco.History.#ctor"></member>
      <member name="M:Parco.History.Load">
<summary>Begins sychronous data retrieval based on the property settings of the instance.</summary>
<returns>void</returns>
<remarks>The OnLoad event is raised when data retrieval is complete. The Done event is immediatly raised if the dataset record count is 0.</remarks>
</member>
      <member name="M:Parco.History.BeginLoad">
<summary>Begins asychronous data retrieval based on the property settings of the instance.</summary>
<returns>void</returns>
<remarks>The OnLoad event is raised when data retrieval is complete. The Done event is immediatly raised if the dataset record count is 0.</remarks>
</member>
      <member name="M:Parco.History.EndLoad"></member>
      <member name="M:Parco.History.Play">
<summary>Begins playback of the history data.</summary>
<returns>void</returns>
<remarks>A HistoryPlayException is thrown if the PlayState is Playing.
 A HistoryNotLoadedException if the PlayState is NotReady or if IsLoaded is false.</remarks>
</member>
      <member name="M:Parco.History.Pause">
<summary>Pauses playback of the history data at the current record.</summary>
<returns>void</returns>
<remarks>A HistoryPlayException is thrown if the PlayState is Ready or NotReady.</remarks>
</member>
      <member name="M:Parco.History.Quit">
<summary>Stops playback of the history data and resets the record cursor to the first record in the dataset.</summary>
<returns>void</returns>
<remarks>Raised a Done event when completed.</remarks>
</member>
      <member name="M:Parco.History.ErrorCheck"></member>
      <member name="M:Parco.History.GetDataset"></member>
      <member name="M:Parco.History.InitTimer"></member>
      <member name="M:Parco.History.Reset"></member>
      <member name="M:Parco.History.mTimer_Elapsed">
The timer is enabled when the play method is called 
Put all raiseevnets in a Try Catch block to keep errors in the event handlers from killing the timer thread.
</member>
      <member name="E:Parco.History.OnLoad">
<summary>The OnLoad event is raised when the dataset has been retrieved from the Parco data service</summary>
</member>
      <member name="E:Parco.History.HistoryData">
<summary>The HistoryData event is raised for each row of device data based on the TimeStamp of the record and the PlayRate.</summary>
<remarks>The HistoryData event has the same signature as the DataStream.Stream and Trigger.TriggerEvent events. As such, you may use the same
event handler for all three events.</remarks>
</member>
      <member name="E:Parco.History.Done">
<summary>The Done event is raised when all of the requested data has been played back.</summary>
</member>
      <member name="P:Parco.History.Name">
<summary>String, user defined name for differentiating history player instances.</summary>
<value>String, user defined name for differentiating history player instances.</value>
</member>
      <member name="P:Parco.History.PlayRate">
<summary>Single, multiplication factor for play back, 1 is real time.</summary>
<value>Single, multiplication factor for play back, 1 is real time.</value>
<remarks>A HistoryPlayRateException is thrown if the value is set to 0 or less.</remarks>
</member>
      <member name="P:Parco.History.BeginDateUTC">
<summary>DateTime, the begin DateTime in UTC for record retrieval.</summary>
<value>DateTime, the begin DateTime in UTC for record retrieval.</value>
<remarks>A HistoryPropertySetException is thrown if the property is set and the PlayState is NotReady</remarks>
</member>
      <member name="P:Parco.History.EndDateUTC">
<summary>DateTime, the end DateTime in UTC for record retrieval.</summary>
<value>DateTime, the end DateTime in UTC for record retrieval.</value>
<remarks>A HistoryPropertySetException is thrown if the property is set and the PlayState is NotReady</remarks>
</member>
      <member name="P:Parco.History.ePlayMode">
<summary>Readonly PlayMode enum, the PlayMode set upon instantiation.</summary>
<value>Readonly PlayMode enum, the PlayMode set upon instantiation.</value>
</member>
      <member name="P:Parco.History.HistoryDatabase">
<summary> HistoryDatabase enum, the value determines which Parco RTLS History Database to connect to.
The propery defaults to DataService.HistoryType.RandTData upon object creation.</summary>
<value>HistoryDatabase enum, the value determines which Parco RTLS Database to connect to.
The propery defaults to DataService.HistoryType.RandTData upon object creation.</value>
</member>
      <member name="P:Parco.History.Tag">
<summary>Tag, the tag to use for record retrieval when PlayMode.ByTag is specified.</summary>
<value>DTag, the tag to use for record retrieval when PlayMode.ByTag is specified.</value>
<remarks>A HistoryPropertySetException is thrown if the property is set and the PlayState is NotReady</remarks>
</member>
      <member name="P:Parco.History.Tags">
<summary>Tag collection, tags for record retrieval when PlayMode.ByTags is chosen.</summary>
<value>Tag collection, tags for record retrieval when PlayMode.ByTags is chosen.</value>
<remarks>A HistoryPropertySetException is thrown if the property is set and the PlayState is NotReady</remarks>
</member>
      <member name="P:Parco.History.Region">
<summary>Region3D, region for record retrieval when PlayMode.ByRegion is chosen.</summary>
<value>Region3D, region for record retrieval when PlayMode.ByRegion is chosen.</value>
<remarks>A HistoryPropertySetException is thrown if the property is set and the PlayState is NotReady</remarks>
</member>
      <member name="P:Parco.History.Regions">
<summary>Region3D collection, regions for record retrieval when PlayMode.ByRegions is chosen.</summary>
<value>Region3D collection, regions for record retrieval when PlayMode.ByRegions is chosen.</value>
<remarks>A HistoryPropertySetException is thrown if the property is set and the PlayState is NotReady</remarks>
</member>
      <member name="P:Parco.History.IsLoaded">
<summary>ReadOnly Boolean, returns true if the playback recordset has been retrieved from the Parco data service.</summary>
<value>ReadOnly Boolean, returns true if the playback recordset has been retrieved from the Parco data service.</value>
</member>
      <member name="P:Parco.History.Playing">
<summary>ReadOnly PlayState, returns the PlayState enumeration value for the current instance.</summary>
<value>ReadOnly PlayState, returns the PlayState enumeration value for the current instance.</value>
</member>
      <member name="P:Parco.History.Data">
<summary>Parco.Data, sets or gets the instance of the Parco.Data object for data retrieval.</summary>
<value>Parco.Data, sets or gets the instance of the Parco.Data object for data retrieval.</value>
</member>
      <member name="T:Parco.Map">
<summary>
The Map class is the represention of a Map in the context of the ParcoRTLSMaint Database.
</summary>
<remarks></remarks>
</member>
      <member name="P:Parco.Map.I_MAP">
<summary>
The I_Map represents the database key of the Map instance the ParcoRTLSMaint Database.
</summary>
<remarks>The I_MAP value defaults to -1 if not set.</remarks>
</member>
      <member name="P:Parco.Map.Image">
<summary>
The System.Drawing.Image for the Map.
</summary>
</member>
      <member name="P:Parco.Map.IsCurrentMap">
<summary>
Denotes if this Map is the current map selected in the Zone Builder.
</summary>
</member>
      <member name="P:Parco.Map.Name">
<summary>
The user friendly name for the map.
</summary>
<remarks>The name field (X_MAP) must be unique in the database.</remarks>
</member>
      <member name="P:Parco.Map.Size">
<summary>
The System.Drawing.SizeF for the Map. The height and width specify the height and width of the map.
</summary>
</member>
      <member name="P:Parco.Map.Origin">
<summary>
The Origin specified by a System.Drawing.SizeF for the Map. The height is the Y origin value and width is the X origin value.
</summary>
</member>
      <member name="P:Parco.Map.ParentZoneKey">
<summary>
The Parent Zone database key for map. The key specifies the parent for the map and is used to retrieve the children Zones for the Map.
</summary>
</member>
      <member name="P:Parco.Map.ZTopDefault">
<summary>
The Zone Top value to use when creating zones in the Zone Builder.
</summary>
</member>
      <member name="P:Parco.Map.ZBottomDefault">
<summary>
The Zone Bottom value to use when creating zones in the Zone Builder.
</summary>
</member>
      <member name="T:Parco.MapCollection">
<summary>
A type-safe collection of Map objects. 
</summary>
</member>
      <member name="M:Parco.MapCollection.Add(Parco.Map)">
 <summary>
 Adds a Map instance to the collection.
 </summary>
</member>
      <member name="M:Parco.MapCollection.IndexOf(Parco.Map)">
 <summary>
 Returns the index of a Map instance from within the collection.
 </summary>
</member>
      <member name="M:Parco.MapCollection.Contains(Parco.Map)">
 <summary>
 Returns True if the collection contains the Map instance.
 </summary>
</member>
      <member name="M:Parco.MapCollection.Insert(System.Int32,Parco.Map)">
 <summary>
 Inserts a Map instance at the specified index.
 </summary>
</member>
      <member name="M:Parco.MapCollection.Remove(Parco.Map)">
 <summary>
 Removes a Map instance from the collection.
 </summary>
</member>
      <member name="M:Parco.MapCollection.OnInsert(System.Int32,System.Object)"></member>
      <member name="M:Parco.MapCollection.OnRemove(System.Int32,System.Object)"></member>
      <member name="M:Parco.MapCollection.OnSet(System.Int32,System.Object,System.Object)"></member>
      <member name="M:Parco.MapCollection.OnValidate(System.Object)"></member>
      <member name="P:Parco.MapCollection.Item(System.Int32)">
 <summary>
 Returns or sets a Map instance of the collection with the specified index.
 </summary>
</member>
      <member name="T:Parco.ParcoMsg.Request">
<summary>
The request class is to request data from stream resource. The request must be formatted
for the type of resource that the DataStream instance is connected to. FullStream resources
will return a response error if an AddTag or RemoveTag request is sent. AddTag and Remove
Tag request are used when accessing Subscription resources. All AddTag
and RemoveTag requests must contain a Tags collection containing 1 or more Tag instances.
Only the Tag's ID property needs to be populated for requests. You must supply each request
with a request id of your choosing. The request id allows you to match corresponding reply messages
from the resource. If you do not recieve a corresponding reply for each request, you must assume that
the request was not received.
</summary>
</member>
      <member name="M:Parco.ParcoMsg.Request.ToXML">
<summary>
ToXML serializes the request into a Parco XML message.
</summary>
<returns>String, serialized parco XML request message</returns>
<remarks>This method is used by the Parco systems and services. Parco reserves the right to modify the message format at any time.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.Request.ToBytes">
<summary>
ToXML serializes the request instance into a byte array.
</summary>
<returns>byte array, serialized parco XML request message.</returns>
</member>
      <member name="M:Parco.ParcoMsg.Request.#ctor"></member>
      <member name="M:Parco.ParcoMsg.Request.#ctor(Parco.ParcoMsg.RequestType,System.String)"></member>
      <member name="M:Parco.ParcoMsg.Request.#ctor(Parco.ParcoMsg.RequestType,System.String,System.String)"></member>
      <member name="M:Parco.ParcoMsg.Request.#ctor(Parco.ParcoMsg.RequestType,Parco.Tag,System.String)"></member>
      <member name="M:Parco.ParcoMsg.Request.#ctor(Parco.ParcoMsg.RequestType,Parco.Tag,System.String)"></member>
      <member name="M:Parco.ParcoMsg.Request.ParseMsg(System.String,System.Xml.XmlParserContext)">
<summary>
ParseMsg deserializes the request and populates the instance properties.
</summary>
<param name="xmlMsg">A complete request xml message, String</param>
<param name="xmlCont">An XmlParser context for parsing the Xml</param>
<remarks>An instance of an xmlParserContext is available from the GetParserContext method.
Use a module level parser context instance for improved performance.</remarks>
</member>
      <member name="P:Parco.ParcoMsg.Request.ReqType">
<summary>
The request type for the message. Allowable values are: BgnStrm, EndStrm, AddTag, RemTag
</summary>
<value>The request type for the message. Allowable values are: BgnStrm, EndStrm, AddTag, RemTag</value>
</member>
      <member name="P:Parco.ParcoMsg.Request.ReqID">
<summary>
The request identifier supplied by the requester. The id is used by the message sender to differentiate messages sent to the resource.
The response id will contain the id supplied with the request.
</summary>
<value>String, the request identifier supplied by the requester.</value>
</member>
      <member name="P:Parco.ParcoMsg.Request.Tags">
<summary>
The Tags collection to create the request for.
</summary>
<value>The Tags collection to create the request for.</value>
</member>
      <member name="T:Parco.ParcoMsg.Response">
<summary>
The response class is used for acknowleging a request sent to a Parco resource. The response contains the
original request id. The presence of a message indicates that the request was not completed. The message property
contains the failure reason. A response is returned for each request sent. 
</summary>
<remarks>If a response is not received from the resource, then your code should assume that
the request did not make it to the resource.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.Response.ToXML">
<summary>
ToXML serializes the response into a Parco XML message.
</summary>
<returns>String, serialized parco XML response message.</returns>
<remarks>This method is used by the Parco systems and services. Parco reserves the right to modify the message format at any time.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.Response.ToBytes">
<summary>
ToXML serializes the response instance into a byte array.
</summary>
<returns>Byte array, serialized parco XML response message.</returns>
</member>
      <member name="M:Parco.ParcoMsg.Response.#ctor"></member>
      <member name="M:Parco.ParcoMsg.Response.#ctor(System.String,Parco.ParcoMsg.ResponseType,System.String)"></member>
      <member name="M:Parco.ParcoMsg.Response.ParseMsg(System.String,System.Xml.XmlParserContext)">
<summary>
ParseMsg deserializes the response message and populates the instance properties.
</summary>
<param name="xmlMsg">A complete response xml message.</param>
<param name="xmlCont">An xmlparser context for message parsing.</param>
<remarks>An instance of an xmlParserContext is available from the GetParserContext method.
Use a module level parser context instance for improved performance.</remarks>
</member>
      <member name="P:Parco.ParcoMsg.Response.ResponseType">
<summary>
The response type for the message. Allowable values are: BgnStrm, EndStrm, AddTag, RemTag
</summary>
<value>The response type for the message. Allowable values are: BgnStrm, EndStrm, AddTag, RemTag</value>
</member>
      <member name="P:Parco.ParcoMsg.Response.Message">
<summary>
 The response message for a request. The message will be an empty string for processed requests and will 
contain the error message for denied requests or failure to respond to heartbeats.
</summary>
<value>A message is present if a request was not processed for any reason. 
The message contains the text describing the reason why the request was not completed.</value>
</member>
      <member name="P:Parco.ParcoMsg.Response.ReqID">
<summary>
The request identifier supplied by the requester. The id is used by the message sender to differentiate messages sent to the resource.
The response id is set to the request ID value contained in the initiating request.
</summary>
<value>The request identifier supplied by the requester.</value>
</member>
      <member name="T:Parco.ParcoMsg.GISData">
<summary>
GISData is used as the internal message format within the Parco system and components. This is Parco's tag position data format message.
</summary>
<remarks>This class is considered a system resource. As such, Parco reserves the right to modify this class at any time.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.GISData.ToXML">
<summary>
ToXML serializes the instance into a Parco XML message.
</summary>
<returns>String, serialized parco XML GISData message.</returns>
<remarks>This method is used by the Parco systems and services. Parco reserves the right to modify the message format at any time.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.GISData.ToBytes">
<summary>
ToXML serializes the GISData instance into a byte array.
</summary>
<returns>Byte array, serialized parco XML GISData message.</returns>
</member>
      <member name="M:Parco.ParcoMsg.GISData.#ctor"></member>
      <member name="M:Parco.ParcoMsg.GISData.#ctor"></member>
      <member name="M:Parco.ParcoMsg.GISData.#ctor"></member>
      <member name="M:Parco.ParcoMsg.GISData.#ctor"></member>
      <member name="M:Parco.ParcoMsg.GISData.ParseMsg(System.String,System.Xml.XmlParserContext)">
<summary>
ParseMsg deserializes the GISData message and populates the instance properties.
</summary>
<param name="xmlMsg">A complete GISData xml message.</param>
<param name="xmlCont">An xmlparser context for message parsing.</param>
<remarks>An instance of an xmlParserContext is available from the GetParserContext method.
Use a module level parser context instance for improved performance.</remarks>
</member>
      <member name="P:Parco.ParcoMsg.GISData.ID">
<summary>
The unique Parco Tag ID.
</summary>
<value>The unique Parco Tag ID.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.Type">
<summary>
Parco Tag Data Type. Values may include R,T,O,P,Sim and others. This value indicates the 
the granualarity of the data. R is 3 dimensional, T is 2 dimensional with a fixed Z, O is Omnidirectional presence,
P is Single receiver proximity, Sim is simulated data.
</summary>
<value>Values may include R,T,O,P,Sim and others. This value indicates the 
the granualarity of the data. R is 3 dimensional, T is 2 dimensional with a fixed Z, O is Omnidirectional presence,
P is Single receiver proximity, Sim is simulated data.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.TS">
<summary>
Timestamp for the data message.
</summary>
<value>Timestamps are in UTC (Universal Coordinate Time).</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.X">
<summary>
The reported tag position in the X coordinate.
</summary>
<value>The reported tag position in the X coordinate.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.Y">
<summary>
The reported tag position in the Y coordinate.
</summary>
<value>The reported tag position in the Y coordinate.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.Z">
<summary>
The reported tag position in the Z coordinate.
</summary>
<value>The reported tag position in the Z coordinate.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.CNF">
<summary>
The tag position confidence factor. The larger the number, the lower the confidence of the calculated position. A value of -1 if non wa supplied.
</summary>
<value>The tag position confidence factor. The larger the number, the lower the confidence of the calculated position. A value of -1 if non was supplied.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.GWID">
<summary>
The Parco gateway identifier.
</summary>
<value>The origin of the tag position information.</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.Bat">
<summary>
The tag battery indicator. An Int32 value of 0 through 15 if present , -1 if not.
</summary>
<value>The battery indicator for the tag. The value will be -1 if the tag is not battery powered or the value is not present.
</value>
</member>
      <member name="P:Parco.ParcoMsg.GISData.Data">
<summary>
The tags transmitted data.
</summary>
<value>For future use. The value will be an empty string if the tag did not transmit data.
</value>
</member>
      <member name="T:Parco.ParcoMsg.HeartBeat">
<summary>
HeartBeat is used as an internal message format within the Parco system and components. This message is used for verifying client connectivity. 
</summary>
<remarks>This class is considered a system resource. As such, Parco reserves the right to modify this class at any time.
All clients which receive a heartbeat message must relay it back to the sender in a timely manner.
TCP client connections which do not respond in a timely manner are sent and EndStream message and then disconnected. Parco.Datastream instances return the heartbeat and raise a Heartbeat event
so that the coder can track the network connectivity response.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.HeartBeat.ToXML">
<summary>
ToXML serializes the instance into a Parco XML message.
</summary>
<returns>String, serialized parco XML GISData message.</returns>
<remarks>This method is used by the Parco systems and services. Parco reserves the right to modify the message format at any time.</remarks>
</member>
      <member name="M:Parco.ParcoMsg.HeartBeat.ToBytes">
<summary>
ToXML serializes the GISData instance into a byte array.
</summary>
<returns>Byte array, serialized parco XML GISData message.</returns>
</member>
      <member name="M:Parco.ParcoMsg.HeartBeat.ParseMsg(System.String,System.Xml.XmlParserContext)">
<summary>
ParseMsg deserializes the Heartbeat message and populates the instance properties.
</summary>
<param name="xmlMsg">A complete GISData xml message.</param>
<param name="xmlCont">An xmlparser context for message parsing.</param>
<remarks>An instance of an xmlParserContext is available from the GetParserContext method.
Use a module level parser context instance for improved performance.</remarks>
</member>
      <member name="P:Parco.ParcoMsg.HeartBeat.Ticks">
<summary>
The timestamp in ticks of when the heartbeat was sent from the server.
</summary>
<value>The timestamp in ticks when the TCP/IP server created the message
</value>
</member>
      <member name="T:Parco.ParcoMsg.MessageUtilities">
<summary>MessageUtilities contains the utilities and contstants for Parco system messaging.
The tag constants should be used as module level variables for increased performance as they are Interned. GetParserContext returns
an XmlParserContext which should also be used as a module level instance.</summary>
</member>
      <member name="M:Parco.ParcoMsg.MessageUtilities.GetParserContext">
<summary>GetParserContext returns an instance of an XmlParserContext for message processing.</summary>
<remarks>Using a module level parser context for message processing will improve performance.</remarks>
</member>
      <member name="T:Parco.ParcoMsg.RequestType">
<summary>RequestTypes are used to differentiate request messages.</summary>
</member>
      <member name="F:Parco.ParcoMsg.RequestType.BeginStream"></member>
      <member name="F:Parco.ParcoMsg.RequestType.EndStream"></member>
      <member name="F:Parco.ParcoMsg.RequestType.AddTag"></member>
      <member name="F:Parco.ParcoMsg.RequestType.RemoveTag"></member>
      <member name="T:Parco.ParcoMsg.ResponseType">
<summary>ResponseTypes are used to differentiate response messages. 
The response type will match the corresponding Request Type.
</summary>
</member>
      <member name="F:Parco.ParcoMsg.ResponseType.BeginStream"></member>
      <member name="F:Parco.ParcoMsg.ResponseType.EndStream"></member>
      <member name="F:Parco.ParcoMsg.ResponseType.AddTag"></member>
      <member name="F:Parco.ParcoMsg.ResponseType.RemoveTag"></member>
      <member name="T:Parco.ParcoTCP"></member>
      <member name="M:Parco.ParcoTCP.ConnectionState">
<summary>Returns the connection state of the socket. </summary>
</member>
      <member name="P:Parco.ParcoTCP.Active">
<summary>Determine if a connection attempt has succeeded. It does not monitor the ongoing connection state of TcpClient.
 If the remote host closes the connection, Active will not be updated. </summary>
</member>
      <member name="P:Parco.ParcoTCP.Client">
<summary>Returns a readonly reference to the raw socket for checking the socket state and performing socket methods.
</summary>
</member>
      <member name="T:Parco.Point2D">
<summary>
This class holds 2 dimensional point (vertex) info in variables of the Single type.
The number property is used when contructing an array of verteces.
The overloaded Equals functions compares Point2D objects or X/Y values to the instances X and Y members.
The ToString method provides a graphical representation of a cartesian point (X,Y) from the members of an instance.
</summary>
</member>
      <member name="M:Parco.Point2D.Equals(Parco.Point2D)">
<summary>
Compares the X and Y members of this instance to the Point2D instance in the parameter.
</summary>
<param name="pt">Point2D, instance to compare.</param>
<returns>Boolean</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Point2D.Equals(System.Single,System.Single)">
<summary>
Compares the members of this instance to the parameters.
</summary>
<param name="X">Single, value of X to compare.</param>
<param name="Y">Single, value of Y to compare.</param>
<returns>Boolean</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Point2D.ToString">
<summary>
Provides a graphical representation of a cartesian point (X,Y) based on the instance members.
</summary>
<returns>String, (X,Y)</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Point2D.#ctor"></member>
      <member name="M:Parco.Point2D.#ctor(System.Single,System.Single)"></member>
      <member name="M:Parco.Point2D.#ctor(System.Single,System.Single,System.Int32)"></member>
      <member name="P:Parco.Point2D.X">
<summary>
The single representing the points X coordinate.
</summary>
<value>The single representing the points X coordinate.</value>
</member>
      <member name="P:Parco.Point2D.Y">
<summary>
The single representing the points Y coordinate.
</summary>
<value>The single representing the points Y coordinate.</value>
</member>
      <member name="P:Parco.Point2D.N_ORD">
<summary>
The N_ORD number identifier for this instance. The order number is used to define the shape of a vertice array.
</summary>
<value>'The N_ORD number identifier for this instance. The order number is used to define the shape of a vertice array.</value>
</member>
      <member name="P:Parco.Point2D.I_RGN">
<summary>
The Int32 key for region that this instance belongs to.
</summary>
<value>The Int32 key for region that this instance belongs to.</value>
</member>
      <member name="P:Parco.Point2D.I_VTX">
<summary>
The Int32 auto number key for vertex that this instance represents.
</summary>
<value>The Int32 auto number key for vertex that this instance represents.</value>
</member>
      <member name="T:Parco.Point3D">
<summary>
This class inherits from the Point2D class holds 3 dimensional point (vertex) info in variables of the Single type.
The number property is used when contructing an array of verteces.
The overloaded Equals functions compares Point3D objects or X/Y/Z values to the X, Y, and Z members.
The ToString method provides a graphical representation of a cartesian point (X,Y,Z) from the members of an instance.
</summary>
</member>
      <member name="M:Parco.Point3D.Equals(System.Single,System.Single,System.Single)">
<summary>
Compares the members of this instance to the parameters.
</summary>
<param name="X">Single, value of X to compare.</param>
<param name="Y">Single, value of Y to compare.</param>
<param name="Z">Single, value of Z to compare.</param>
<returns>Boolean</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Point3D.Equals(Parco.Point3D)">
<summary>
Compares the X, Y, and Z members of this instance to the Point3D instance in the parameter.
</summary>
<param name="pt">Point3D, instance to compare.</param>
<returns>Boolean</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Point3D.ToString">
<summary>
Provides a graphical representation of a cartesian point (X,Y,Z) based on the instance members.
</summary>
<returns>String, (X,Y,Z)</returns>
<remarks></remarks>
</member>
      <member name="M:Parco.Point3D.#ctor"></member>
      <member name="M:Parco.Point3D.#ctor(System.Single,System.Single)"></member>
      <member name="M:Parco.Point3D.#ctor(System.Single,System.Single,System.Single)"></member>
      <member name="M:Parco.Point3D.#ctor(System.Single,System.Single,System.Single,System.Int32)"></member>
      <member name="M:Parco.Point3D.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Int32)"></member>
      <member name="M:Parco.Point3D.#ctor(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32)"></member>
      <member name="P:Parco.Point3D.Z">
<summary>
The single representing the point's Z coordinate.
</summary>
<value>The single representing the point's Z coordinate.</value>
</member>
      <member name="T:Parco.Region2D">
<summary>
A valid region requires the polygon to be regular or convex and must contain at least 3 points (verticies).
The vertices must be in order (N_ORD = vertice array index) and are 0 based. By Parco's convention, a polygon's vertices are defined in increasing order
in a in clockwise rotation looking down upon the shape. Valid polygons have legs that do not cross over other legs. 
</summary>
</member>
      <member name="T:Parco.Region2D.eIntersect">
Intersection Enums to describe what kind of intersection we have
between a point and a line (two vertices)
</member>
      <member name="F:Parco.Region2D.eIntersect.None"></member>
      <member name="F:Parco.Region2D.eIntersect.BetweenYs"></member>
      <member name="F:Parco.Region2D.eIntersect.CurVertex"></member>
      <member name="F:Parco.Region2D.eIntersect.NextVert"></member>
      <member name="F:Parco.Region2D.eIntersect.OnLine"></member>
      <member name="F:Parco.Region2D.eIntersect.LeftOfHorzLine"></member>
      <member name="M:Parco.Region2D.BoxCentroid">
<summary>The BoxCentroid method the centroid of box which surrounds the internal polygonal shape.
The return value is calculated from the Region's Max and Min values.
</summary>
<returns>Point2D containing the values for X and Y</returns>
<remarks>A RegionInvalidException is thrown if the underyling vertice array is not valid.</remarks>
</member>
      <member name="M:Parco.Region2D.ContainsPoint(System.Single,System.Single)">
<overloads>ContainsPoint has two overloads.</overloads>
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of the polygon.</summary>
<param name="X">Single, the X coordinate to check.</param>
<param name="Y">Single, the Y coordinate to check.</param>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region2D.ContainsPoint(Parco.Point2D)">
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of the polygon.</summary>
<param name="pt">Point2D, the point containing the coordinates to check.</param>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region2D.Contains(Parco.Point2D)">
<summary>Contains returns true if the point defined by the parameters is inside or on the boundry of the polygon.</summary>
<param name="pt">Point2D, the point containing the coordinates to check.</param>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region2D.Intersects(Parco.Point2D,Parco.Point2D,Parco.Point2D)"></member>
      <member name="M:Parco.Region2D.IsIntVert(Parco.Point2D,Parco.Point2D,Parco.Point2D)"></member>
      <member name="M:Parco.Region2D.IsBetweenYs(Parco.Point2D,Parco.Point2D,Parco.Point2D)"></member>
      <member name="M:Parco.Region2D.SetMinMaxForTranslate(System.Single,System.Single)"></member>
      <member name="M:Parco.Region2D.#ctor"></member>
      <member name="M:Parco.Region2D.#ctor(Parco.Point2D[])"></member>
      <member name="M:Parco.Region2D.#ctor(System.String,System.Int32,Parco.Point2D[])"></member>
      <member name="M:Parco.Region2D.Translate(System.Single,System.Single)"></member>
      <member name="M:Parco.Region2D.MoveBy(System.Single,System.Single)">
<summary>The MoveBy method "moves" the region by the amount specified by the parameters. The underlying vertice array values
are translated and then the min and max values are recalculated.</summary>
<param name="deltaX">Single, the amount to move in the X direction.</param>
<param name="deltaY">Single, the amount to move in the Y direction.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underyling vertice array is not valid.</remarks>
</member>
      <member name="M:Parco.Region2D.MoveTo(System.Single,System.Single)">
<summary>The MoveTo method "moves" the region so that the new bounding box's center is at the new coordinates. The underlying vertice array values
are moved and then the min and max values are recalculated.</summary>
<param name="absoluteX">Single, the position to move to in the X dimension.</param>
<param name="absoluteY">Single, the position to move to in the Y dimension.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underyling vertice array is not valid.</remarks>
</member>
      <member name="M:Parco.Region2D.SetMinMax"></member>
      <member name="M:Parco.Region2D.Validate">
<summary>Validate checks the vertice to ensure the Region is valid. If it is, the IsValid property is set to True.</summary>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains less than 3 points.</remarks>
</member>
      <member name="M:Parco.Region2D.ResetBounds"></member>
      <member name="P:Parco.Region2D.Vertices">
<summary>The underlying Point2D array.</summary>
<value>The underlying Point2D array.</value>
</member>
      <member name="P:Parco.Region2D.Name">
<summary>String, the Region's Name. A user friendly name for the Region</summary>
<value>String, the Region's Name. A user friendly name for the Region</value>
</member>
      <member name="P:Parco.Region2D.I_RGN">
<summary>Int32, the I_RGN auto number key from the database.</summary>
<value>Int32, the I_RGN auto number key from the database.</value>
</member>
      <member name="P:Parco.Region2D.XMax">
<summary>Single, the maximum X coordinate as determined by the Vertices array.</summary>
<value>Single, the maximum X coordinate as determined by the Vertices array.</value>
</member>
      <member name="P:Parco.Region2D.Xmin">
<summary>Single, the minimum X coordinate as determined by the Vertices array.</summary>
<value>Single, the minimum X coordinate as determined by the Vertices array.</value>
</member>
      <member name="P:Parco.Region2D.YMax">
<summary>Single, the maximum Y coordinate as determined by the Vertices array.</summary>
<value>Single, the maximum Ycoordinate as determined by the Vertices array.</value>
</member>
      <member name="P:Parco.Region2D.Ymin">
<summary>Single, the minimum Y coordinate as determined by the Vertices array.</summary>
<value>Single, the minimum Y coordinate as determined by the Vertices array.</value>
</member>
      <member name="P:Parco.Region2D.IsValid">
<summary>Boolean, returns true if the regions shape is valid.</summary>
<value>Boolean, returns true if the regions shape is valid.</value>
</member>
      <member name="P:Parco.Region2D.I_ZN">
<summary>Int32, the Zone ID if the region belongs to a Zone else -1.</summary>
<value>Int32, the Zone ID if the region belongs to a Zone else -1.</value>
</member>
      <member name="P:Parco.Region2D.I_TRG">
<summary>Int32, the trigger key (I_TRG) if the region belongs to a Trigger else -1.</summary>
<value>Int32, the trigger key (I_TRG) if the region belongs to a Trigger else -1.</value>
</member>
      <member name="T:Parco.Region3D">
<summary>
A valid region requires the polygon to be regular or convex and must contain at least 3 points (verticies) and a Z.
The vertices must be in order (N_ORD = vertice array index) and are 0 based. By Parco's convention, a polygon's vertices are defined in increasing order
in a in clockwise rotation looking down upon the shape. Valid polygons have legs that do not cross over other legs. 
</summary>
</member>
      <member name="M:Parco.Region3D.BoxCentroid">
<summary>The BoxCentroid method returns the centroid of box which surrounds the internal polygonal shape.
The return value is calculated from the Region's Max and Min values.
</summary>
<returns>Point3D containing the values for X, Y, and Z</returns>
<remarks>A RegionInvalidException is thrown if the underyling vertice array is not valid or the Z values are not valid.</remarks>
</member>
      <member name="M:Parco.Region3D.ContainsPoint(Parco.Point3D)">
<overloads>Contains point has two overloads</overloads>
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of the polygon.</summary>
<param name="pt">Point3D, the point containing the coordinates to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are invalid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region3D.ContainsPoint(System.Single,System.Single,System.Single)">
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of the polygon.</summary>
<param name="X">Single, the X coordinate to check.</param>
<param name="Y">Single, the Y coordinate to check.</param>
<param name="Z">Single, the Z coordinate to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region3D.ContainsPointIn2D(Parco.Point3D)">
<overloads>ContainsPointIn2D point has two overloads</overloads>
<summary>ContainsPoint2D returns true if the point defined by the parameters is inside or on the boundry of the polygon while ignoring the height (z) dimension.</summary>
<param name="pt">Point3D, the point containing the coordinates to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionVerticesMinimumException is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region3D.ContainsPointIn2D(Parco.Point2D)">
<summary>ContainsPointIn2D returns true if the point defined by the parameters is inside or on the boundry of the polygon while ignoring the height (z) dimension.</summary>
<param name="pt">Point2D, the point containing the coordinates to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionVerticesMinimumException is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region3D.ContainsPointIn2D(System.Single,System.Single)">
<summary>ContainsPointIn2D returns true if the point defined by the parameters is inside or on the boundry of the polygon while ignoring the height (z) dimension.</summary>
<param name="X">Single, the X coordinate to check.</param>
<param name="Y">Single, the Y coordinate to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionVerticesMinimumException is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Region3D.#ctor"></member>
      <member name="M:Parco.Region3D.#ctor(Parco.Point2D[])"></member>
      <member name="M:Parco.Region3D.#ctor(Parco.Point3D[])"></member>
      <member name="M:Parco.Region3D.#ctor(System.String,System.Int32,Parco.Point2D[])"></member>
      <member name="M:Parco.Region3D.#ctor(System.String,System.Int32,Parco.Point3D[])"></member>
      <member name="M:Parco.Region3D.#ctor(System.String,System.Int32,Parco.Point2D[],System.Single,System.Single)"></member>
      <member name="M:Parco.Region3D.#ctor(System.String,System.Int32,Parco.Point3D[],System.Single,System.Single)"></member>
      <member name="M:Parco.Region3D.Translate(System.Single,System.Single,System.Single)"></member>
      <member name="M:Parco.Region3D.MoveBy(System.Single,System.Single,System.Single)">
<summary>The MoveBy method "moves" the region by the amount specified by the parameters. The underlying vertice array values
are translated and then the min and max values are recalculated.</summary>
<param name="deltaX">Single, the amount to move in the X direction.</param>
<param name="deltaY">Single, the amount to move in the Y direction.</param>
<param name="deltaZ">Single, the amount to move in the Z direction.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underyling vertice array is not valid or the Z values are not valid.</remarks>
</member>
      <member name="M:Parco.Region3D.MoveTo(System.Single,System.Single,System.Single)">
<summary>The MoveTo method "moves" the region so that the new bounding box's center is at the new coordinates. The underlying vertice array values
are moved and then the min and max values are recalculated.</summary>
<param name="absoluteX">Single, the position to move to in the X dimension.</param>
<param name="absoluteY">Single, the position to move to in the Y dimension.</param>
<param name="absoluteZ">Single, the position to move to in the Z dimension.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underyling vertice array is not valid or the Z values are not valid.</remarks>
</member>
      <member name="M:Parco.Region3D.Validate">
<summary>Validate checks the vertice array and Z members to ensure the Region is valid. If it is, the IsValid property is set to True.</summary>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid. A Region3DInvalidZException is thrown if the ZBottom and ZTop members are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains less than 3 points.</remarks>
</member>
      <member name="M:Parco.Region3D.ResetBounds">
<summary>ResetBounds sets the Bounding Box values from the vertice array and validates the Region. If it is valid, the IsValid property is set to True.</summary>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid. A Region3DInvalidZException is thrown if the ZBottom and ZTop members are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains less than 3 points. If a vertice is edited, the user must call this method to reset the Xmin, Xmax, Ymin, Ymax, Zmin, and ZMax properties.
This method does not need to be called if the vertice3D property is set to a new Point3D array.</remarks>
</member>
      <member name="P:Parco.Region3D.ZTop">
<summary>Single, the maximum Y coordinate as determined by the Vertices array.</summary>
<value>Single, the maximum Ycoordinate as determined by the Vertices array.</value>
<remarks>Sets the upper bound for SQL database queries.</remarks>
</member>
      <member name="P:Parco.Region3D.ZBottom">
<summary>Single, the maximum Y coordinate as determined by the Vertices array.</summary>
<value>Single, the maximum Ycoordinate as determined by the Vertices array.</value>
<remarks>Sets the upper bound for SQL database queries.</remarks>
</member>
      <member name="P:Parco.Region3D.Vertices3D">
<summary>The underlying Point3D array that defines the shape of the region.</summary>
<value>The underlying Point3D array that defines the shape of the region.</value>
<remarks>Setting the Vertices3D property to an array of Point3D instances causes the region to
populate the Xmax, Xmin, Ymax, and Ymin members based on the Point3D array. The Z properties for 
the array's points should be the Zbottom value for shape as a matter of convention.
The Ztop and ZBottom values must be set "manually"</remarks>
</member>
      <member name="T:Parco.Resource">
<summary>
The Resource class holds the properties pertaining to a Manager Resource.
</summary>
</member>
      <member name="M:Parco.Resource.#ctor"></member>
      <member name="M:Parco.Resource.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Boolean)"></member>
      <member name="P:Parco.Resource.I_RES">
<summary>The I_RES auto number database key for the resource.</summary>
<value>The I_RES auto number database key for the resource.</value> 
</member>
      <member name="P:Parco.Resource.TCPIP">
<summary>The tcpip address of the resource.</summary>
<value>The tcpip address of the resource.</value> 
</member>
      <member name="P:Parco.Resource.Port">
<summary>The Port of the resource.</summary>
<value>The Port of the resource.</value> 
</member>
      <member name="P:Parco.Resource.Name">
<summary>The common name of the resource.</summary>
<value>The common name of the resource.</value> 
</member>
      <member name="P:Parco.Resource.Type">
<summary>The resource type key.</summary>
<value>The resource type key.</value> 
</member>
      <member name="P:Parco.Resource.TypeDescription">
<summary>The resource type description.</summary>
<value>The resource type description.</value> 
</member>
      <member name="P:Parco.Resource.IsAveraged">
<summary>IsAveraged indicates if the resource tag data is averaged or raw.</summary>
<value>IsAveraged indicates if the resource tag data is averaged or raw.</value>
</member>
      <member name="P:Parco.Resource.IsFullstream">
<summary>IsFullstream indicates if the resource is a Full Stream or Subscription based.</summary>
<value>IsFullstream indicates if the resource is a Full Stream or Subscription based.</value>
</member>
      <member name="P:Parco.Resource.Rank">
<summary>Rank indicates how busy a resource is where a higher number indicates a busier resource. Rank is used for load balencing Managers where multiple managers of the same type exist. </summary>
<value>Rank indicates how busy a resource is where a higher number indicates a busier resource. Rank is used for load balencing Managers where multiple managers of the same type exist. </value>
</member>
      <member name="T:Parco.Tag">
<summary>
The Tag class holds the tag id, coordinates, timestamp and other information pertaining to
a tag beacon event from the Parco Services Suite.
</summary>
</member>
      <member name="M:Parco.Tag.Point3D">
<summary>Returns a Parco.Point3D object based on the X, Y, and Z properties</summary>
<value>Returns a Parco.Point3D object based on the X, Y, and Z properties</value> 
</member>
      <member name="M:Parco.Tag.ToString">
<summary>Returns a formatted string containing the ID and the X, Y, and Z properties for GUI display.</summary>
<value>Returns a formatted string containing the ID and the X, Y, and Z properties for GUI display.</value> 
</member>
      <member name="M:Parco.Tag.#ctor"></member>
      <member name="M:Parco.Tag.#ctor(System.String)"></member>
      <member name="M:Parco.Tag.#ctor(System.String,System.Int32)"></member>
      <member name="M:Parco.Tag.#ctor"></member>
      <member name="M:Parco.Tag.#ctor"></member>
      <member name="P:Parco.Tag.ID">
<summary>A unique string identifier transmitted by the Tag.</summary>
<value>A unique string identifier transmitted by the Tag.</value> 
</member>
      <member name="P:Parco.Tag.X">
<summary>The X coordinate transmitted by the Tag.</summary>
<value>The X coordinate transmitted by the Tag.</value> 
</member>
      <member name="P:Parco.Tag.Y">
<summary>The Y coordinate transmitted by the Tag.</summary>
<value>The Y coordinate transmitted by the Tag.</value> 
</member>
      <member name="P:Parco.Tag.Z">
<summary>The Z coordinate transmitted by the Tag.</summary>
<value>The Z coordinate transmitted by the Tag.</value> 
</member>
      <member name="P:Parco.Tag.TimeStampUTC">
<summary>DateTime, the time in UTC when the tags beacon event was registered.</summary>
<value>DateTime, the time in UTC when the tags beacon event was registered.</value>
</member>
      <member name="P:Parco.Tag.Battery">
<summary>Int32, values are normally from a through 0 to 15 where 15 is full voltage. -1 indicates that a battery indicator is not supplied.</summary>
<value>Int32, values are normally from a through 0 to 15 where 15 is full voltage. -1 indicates that a battery indicator is not supplied.</value>
</member>
      <member name="P:Parco.Tag.MsgType">
<summary>The String message type from which the tag data originated such as R,T,O,P,and Sim.</summary>
<value>The String message type from which the tag data originated such as R,T,O,P,and Sim.</value> 
</member>
      <member name="P:Parco.Tag.ConfFactor">
<summary>The Confidence Factor for the calculated coordinates (X,Y,Z). Smaller the numbers indicate a higher conficence in the calculated position for the beacon event. The value will be -1 if the confidence factor is not known.</summary>
<value>The Confidence Factor for the calculated coordinates (X,Y,Z). Smaller the numbers indicate a higher conficence in the calculated position for the beacon event. The value will be -1 if the confidence factor is not known.</value> 
</member>
      <member name="P:Parco.Tag.GWID">
<summary>The Gate Way ID of receiver or zone that sent the coordinates.</summary>
<value>The Gate Way ID of receiver or zone that sent the coordinates.</value> 
</member>
      <member name="P:Parco.Tag.Data">
<summary>The Payload Data transmitted by the Tag. - for future use.</summary>
<value>The Payload Data transmitted by the Tag. - for future use.</value> 
</member>
      <member name="P:Parco.Tag.HasData">
<summary>Boolean property to dertemine if the Tag instance contains transmitted data.</summary>
<value>Boolean property to dertemine if the Tag instance contains transmitted data.</value> 
</member>
      <member name="P:Parco.Tag.SendPayloadData">
<summary>Boolean property to specify if a Manager should send transmitted data. - future use with the ParcoMSG.Request.</summary>
<value>Boolean property to specify if a Manager should send transmitted data. - future use with the ParcoMSG.Request.</value> 
</member>
      <member name="T:Parco.Trigger">
<summary>
The Trigger class provides event notification based on a device's position relative to the trigger's shape and the direction.
The trigger direction defines how the trigger responds in relation to a tag's position. WhileIn raises events if the tag's
position is on the edge or contained in any region. WhileOut raises events if the device is outside of all regions. The
OnEnter, OnExit, and OnCross directions maintain the positional state of the device and report only when the tags change state. The first time
a tag is checked with the trigger, it's state is saved. An event is raised if the initial state meets the triggers settings. Since the WhileIn and WhileOut
directions do not maintain device state, they may be more performant. Each instance can be set to ignore devices by setting the IngnoreUnknowns member
to true. CheckTag will return false and an event will not be raised if the tag is not contained in the TAgs collection regardless of the trigger
direction or tag position. Triggers are portable and can be moved in any direction. Each movement moves all underlying Region3D instances by the amount specified.
</summary>
</member>
      <member name="T:Parco.Trigger.Directions">
<summary>
Enumerated constants for defining a trigger's direction. The values must match the values contained in the ParcoRTLS.tlkTrigDirections table.
</summary>
</member>
      <member name="F:Parco.Trigger.Directions.NotSet"></member>
      <member name="F:Parco.Trigger.Directions.WhileIn"></member>
      <member name="F:Parco.Trigger.Directions.WhileOut"></member>
      <member name="F:Parco.Trigger.Directions.OnCross"></member>
      <member name="F:Parco.Trigger.Directions.OnEnter"></member>
      <member name="F:Parco.Trigger.Directions.OnExit"></member>
      <member name="T:Parco.Trigger.State">
<summary>
Enumerated constants for defining a tags last known position state relative to the triggers regions.
</summary>
</member>
      <member name="F:Parco.Trigger.State.NotKnown"></member>
      <member name="F:Parco.Trigger.State.InSide"></member>
      <member name="F:Parco.Trigger.State.OutSide"></member>
      <member name="M:Parco.Trigger.Validate">
<summary>Validate returns true if the triggers Region3DCollection contains 1 or more regions</summary>
<returns>Boolean, true if the trigger contains 1 or more regions.</returns>
<remarks>Trigger.Validate() should be called whenever the triggers existing Regions3D Collection is modified. Setting the 
region collection to a new collection will automatically validate the Trigger instance.</remarks>
</member>
      <member name="M:Parco.Trigger.ContainsPoint(Parco.Point3D)">
<overloads>This method has 2 overloads</overloads>
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of any of the Triggers's regions.</summary>
<param name="pt">Point3D, the Point3D instance to check.</param>
<returns>Boolean, true if the coordinates fall inside on or in one of the regions.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points. A TriggerRegionNotSetException is thrown if the Regions collection count is zero.</remarks>
</member>
      <member name="M:Parco.Trigger.ContainsPoint(System.Single,System.Single,System.Single)">
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of any of the Triggers's regions.</summary>
<param name="X">Single, the X coordinate to check.</param>
<param name="Y">Single, the Y coordinate to check.</param>
<param name="Z">Single, the Z coordinate to check.</param>
<returns>Boolean, true if the coordinates fall inside on or in one of the regions.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points. A TriggerRegionNotSetException is thrown if the Regions collection count is zero.</remarks>
</member>
      <member name="M:Parco.Trigger.CheckTrigger(Parco.Tag)">
<summary>The CheckTrigger checks a tag and raises a event if the tag meets the conditions set for the trigger.
</summary>
<param name="oTag">Tag, the tag instance containing the position information to check.</param>
<returns>Boolean</returns>
<remarks>A RegionInvalidException is thrown if any region's underyling vertice arrays are not valid or the ZBottom and ZTop values are not valid.
A TriggerRegionNotSetException is thrown if the trigger direction is not set. A TriggerRegionNotSetException is thrown if the trigger is not valid.
</remarks>
</member>
      <member name="M:Parco.Trigger.PointState(Parco.Point3D)"></member>
      <member name="M:Parco.Trigger.GetState(System.String)"></member>
      <member name="M:Parco.Trigger.Contains(Parco.Point3D)"></member>
      <member name="M:Parco.Trigger.#ctor"></member>
      <member name="M:Parco.Trigger.#ctor(System.Int32,System.String,Parco.Trigger.Directions)"></member>
      <member name="M:Parco.Trigger.#ctor(System.Int32,System.String,Parco.Trigger.Directions,Parco.Region3DCollection,System.Boolean)"></member>
      <member name="M:Parco.Trigger.#ctor(System.Int32,System.String,Parco.Trigger.Directions,Parco.Region3DCollection,System.Boolean,Parco.TagCollection)"></member>
      <member name="M:Parco.Trigger.MoveBy(System.Single,System.Single,System.Single)">
<summary>The MoveBy method "moves" the regions by the amount specified by the parameters. The underlying vertice array values
are translated and then the min and max values are recalculated for the resultant move.</summary>
<param name="deltaX">Single, the amount to move in the X direction.</param>
<param name="deltaY">Single, the amount to move in the Y direction.</param>
<param name="deltaZ">Single, the amount to move in the Z direction.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if any region's underyling vertice arrays are not valid or the ZBottom and ZTop values are not valid.
</remarks>
</member>
      <member name="M:Parco.Trigger.MoveTo(System.Single,System.Single,System.Single)">
<summary>The MoveTo method "moves" the regions to the location specified by the parameters. The spacial relationship
between the underlying Regions is maintained. The Composite BoxCentroid of all of the regions is used as the positing point for the move 
</summary>
<param name="absoluteX">Single, the position to move to in the X dimension.</param>
<param name="absoluteY">Single, the position to move to in the Y dimension.</param>
<param name="absoluteZ">Single, the position to move to in the Z dimension.</param>
<returns>Void</returns>
<remarks>A RegionInvalidException is thrown if any region's underyling vertice arrays are not valid or the ZBottom and ZTop values are not valid.
</remarks>
</member>
      <member name="E:Parco.Trigger.TriggerEvent">
<summary>
The TriggerEvent is raised when the CheckTrigger method is called and device's position meets the constraints defined by the instance members.
</summary>
<remarks>The trigger event has the same signature as the DataStream.Stream and History.HistoryData events. As such, you may use the same
event handler for all three events.</remarks>
</member>
      <member name="P:Parco.Trigger.I_TRG">
<summary>Int32, the I_TRG auto number key for the trigger.</summary>
<value>Int32, the I_TRG auto number key for the trigger.</value>
</member>
      <member name="P:Parco.Trigger.Key">
<summary>Object, a user supplied key for object instances which are not derived from the database.</summary>
<value>Object, a user supplied key for object instances which are not derived from the database.</value>
</member>
      <member name="P:Parco.Trigger.Name">
<summary>String, a user friendly name describing the trigger.</summary>
<value>String, a user friendly name describing the trigger.</value>
</member>
      <member name="P:Parco.Trigger.Direction">
<summary>Direction(Int32), an enumerated constant describing the "direction" of the trigger.</summary>
<value>Direction(Int32), an enumerated constant describing the "direction" of the trigger.</value>
</member>
      <member name="P:Parco.Trigger.IgnoreUnknowns">
<summary>Boolean, if true the instance ignores (does not raise events) for tags which are not contained in the Tags collection.</summary>
<value>Boolean, if true the instance ignores (does not raise events) for tags which are not contained in the Tags collection.</value>
</member>
      <member name="P:Parco.Trigger.Regions">
<summary>Collection, the Region3D instances defining the trigger's shape.</summary>
<value>Collection, the Region3D instances defining the trigger's shape.</value>
</member>
      <member name="P:Parco.Trigger.Tags">
<summary>Collection, the Tag instances for the trigger to check if the IgnoreUnknows member is true.</summary>
<value>Collection, the Tag instances for the trigger to check if the IgnoreUnknows member is true.</value>
</member>
      <member name="P:Parco.Trigger.IsValid">
<summary>Boolean, set to true if the Regions collection contains 1 or more Region3D instances.</summary>
<value>Boolean, set to true if the Regions collection contains 1 or more Region3D instances.</value>
</member>
      <member name="P:Parco.Trigger.RaiseEventOnFirstEncounter">
<summary>If set to true, the trigger will raise a trigger event on the first encounter with a tag for stateful directions.</summary>
<value>If set to true, the trigger will raise a trigger event on the first encounter with a tag fro stateful directions.</value>
</member>
      <member name="T:Parco.TagState">
Device state helper class for use in the hash table
</member>
      <member name="M:Parco.TagState.#ctor"></member>
      <member name="M:Parco.TagState.#ctor(System.String,Parco.Trigger.State)"></member>
      <member name="P:Parco.TagState.State"></member>
      <member name="P:Parco.TagState.ID"></member>
      <member name="T:Parco.DataService.DataV2">
<remarks/>
</member>
      <member name="T:Parco.DataService.DataV2.HistoryType">
<remarks/>
</member>
      <member name="F:Parco.DataService.DataV2.HistoryType."></member>
      <member name="F:Parco.DataService.DataV2.HistoryType.RandTData">
<remarks/>
</member>
      <member name="F:Parco.DataService.DataV2.HistoryType."></member>
      <member name="F:Parco.DataService.DataV2.HistoryType.OProxData">
<remarks/>
</member>
      <member name="F:Parco.DataService.DataV2.HistoryType."></member>
      <member name="F:Parco.DataService.DataV2.HistoryType.PProxData">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceTypeList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceTypeList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceTypeList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceTypeAdd(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceTypeAdd(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceTypeAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceTypeEdit(System.Int32,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceTypeDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityTypeList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityTypeList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityTypeList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityTypeAdd(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityTypeAdd(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityTypeAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityTypeEdit(System.Int32,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityTypeDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneTypeList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneTypeList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneTypeList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneTypeAdd(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneTypeAdd(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneTypeAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneTypeEdit(System.Int32,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneTypeDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignmentReasonList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignmentReasonList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignmentReasonList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignmentReasonAdd(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignmentReasonAdd(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignmentReasonAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignmentReasonEdit(System.Int32,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignmentReasonDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggerDirectionList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggerDirectionList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggerDirectionList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ResourceTypeList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginResourceTypeList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndResourceTypeList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ResourceList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginResourceList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndResourceList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ResourceSelect(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginResourceSelect(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndResourceSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ResourceSelectAll">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginResourceSelectAll(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndResourceSelectAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ResourceSelectByType(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginResourceSelectByType(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndResourceSelectByType(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceAdd(System.String,System.Int32,System.String,System.Single,System.Single,System.Single,System.Boolean,System.DateTime,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceEdit(System.String,System.Int32,System.String,System.Single,System.Single,System.Single,System.Boolean,System.DateTime,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceSetEndDate(System.String,System.DateTime,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceRemoveEndDate(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceDelete(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceSelectByType(System.Int32,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceSelectByType(System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceSelectByType(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceSelectOutofService(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceSelectOutofService(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceSelectOutofService(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceSelectAll(System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceSelectAll(System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceSelectAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceSelectByID(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginDeviceSelectByID(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceSelectByID(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityAdd(System.String,System.Int32,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityEdit(System.String,System.Int32,System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntityDelete(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntitySelectByID(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntitySelectByID(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntitySelectByID(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntitySelectByType(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntitySelectByType(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntitySelectByType(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntitySelectAll">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginEntitySelectAll(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntitySelectAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.SearchRTLS(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginSearchRTLS(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndSearchRTLS(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.SearchHistory(System.String,Parco.DataService.HistoryType)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginSearchHistory(System.String,Parco.DataService.HistoryType,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndSearchHistory(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.SearchData(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginSearchData(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndSearchData(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionAdd(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionAdd(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionEdit(System.Int32,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionSelectByID(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionSelectByID(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionSelectByID(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionsSelectByZone(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionsSelectByZone(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionsSelectByZone(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionsSelectByTrigger(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionsSelectByTrigger(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionsSelectByTrigger(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionsSelect">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionsSelect(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionsSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionsList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginRegionsList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionsList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.VertexAdd(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginVertexAdd(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndVertexAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginVertexEdit(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginVertexDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.VertexSelect(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginVertexSelect(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndVertexSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.VerticiesSelectByRegion(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginVerticiesSelectByRegion(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndVerticiesSelectByRegion(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneAdd(System.Int32,System.String,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneAdd(System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneEdit(System.Int32,System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneSelect(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneSelect(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZonesSelectAll(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZonesSelectAll(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZonesSelectAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZonesSelectByPoint(System.Single,System.Single,System.Single,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZonesSelectByPoint(System.Single,System.Single,System.Single,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZonesSelectByPoint(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZonesList(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZonesList(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZonesList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneParentSelect(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneParentSelect(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneParentSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneChildrenSelect(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginZoneChildrenSelect(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneChildrenSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggerAdd(System.String,System.Int32,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggerAdd(System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggerAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggerEdit(System.Int32,System.String,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggerDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggerSelectByPoint(System.Single,System.Single,System.Single)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggerSelectByPoint(System.Single,System.Single,System.Single,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggerSelectByPoint(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggerSelect(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggerSelect(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggerSelect(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggersSelectAll">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggersSelectAll(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggersSelectAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggersList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginTriggersList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggersList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityAdd(System.String,System.String,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityAdd(System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityEdit(System.Int32,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityEnd(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityListByParent(System.String,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityListByParent(System.String,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityListByParent(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityListByChild(System.String,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityListByChild(System.String,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityListByChild(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityListByID(System.String,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityListByID(System.String,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityListByID(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityListByKey(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityListByKey(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityListByKey(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityListByReason(System.Int32,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityListByReason(System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityListByReason(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityList(System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityList(System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityEndAll(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignEntityDeleteAll(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevAdd(System.String,System.String,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevAdd(System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevEdit(System.Int32,System.String,System.String,System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevEnd(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevList(System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevList(System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevListByID(System.String,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevListByID(System.String,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevListByID(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevListByReason(System.Int32,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevListByReason(System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevListByReason(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevListByEntity(System.String,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevListByEntity(System.String,System.Boolean,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevListByEntity(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevEndAll(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevEndAllByEnt(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevDeleteAll(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginAssignDevDeleteAllByEnt(System.String,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.HistoryByID(System.String,System.DateTime,System.DateTime,Parco.DataService.HistoryType)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginHistoryByID(System.String,System.DateTime,System.DateTime,Parco.DataService.HistoryType,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndHistoryByID(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.HistoryByLocation(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.DateTime,System.DateTime,Parco.DataService.HistoryType)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginHistoryByLocation(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.DateTime,System.DateTime,Parco.DataService.HistoryType,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndHistoryByLocation(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.HistoryLastKnownPosition(System.String,Parco.DataService.HistoryType)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginHistoryLastKnownPosition(System.String,Parco.DataService.HistoryType,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndHistoryLastKnownPosition(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginHistoryDeleteAll(Parco.DataService.HistoryType,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginHistoryDeleteById(System.String,Parco.DataService.HistoryType,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.MapList">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginMapList(System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndMapList(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.MapGet(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginMapGet(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndMapGet(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.MapInsert(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginMapInsert(System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[],System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndMapInsert(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginMapUpdate(System.Int32,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[],System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.BeginMapDelete(System.Int32,System.AsyncCallback,System.Object)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.#ctor">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceTypeEdit(System.Int32,System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceTypeEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceTypeDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceTypeDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityTypeEdit(System.Int32,System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityTypeEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityTypeDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityTypeDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneTypeEdit(System.Int32,System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneTypeEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneTypeDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneTypeDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignmentReasonEdit(System.Int32,System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignmentReasonEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignmentReasonDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignmentReasonDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceAdd(System.String,System.Int32,System.String,System.Single,System.Single,System.Single,System.Boolean,System.DateTime)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceEdit(System.String,System.Int32,System.String,System.Single,System.Single,System.Single,System.Boolean,System.DateTime)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceSetEndDate(System.String,System.DateTime)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceSetEndDate(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceRemoveEndDate(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceRemoveEndDate(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.DeviceDelete(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndDeviceDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityAdd(System.String,System.Int32,System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityAdd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityEdit(System.String,System.Int32,System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EntityDelete(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndEntityDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionEdit(System.Int32,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.RegionDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndRegionDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.VertexEdit(System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndVertexEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.VertexDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndVertexDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneEdit(System.Int32,System.Int32,System.String,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.ZoneDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndZoneDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggerEdit(System.Int32,System.String,System.Int32,System.Boolean)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggerEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.TriggerDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndTriggerDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityEdit(System.Int32,System.String,System.String,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityEnd(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityEnd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityEndAll(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityEndAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignEntityDeleteAll(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignEntityDeleteAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevEdit(System.Int32,System.String,System.String,System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevEdit(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevEnd(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevEnd(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevEndAll(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevEndAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevEndAllByEnt(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevEndAllByEnt(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevDeleteAll(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevDeleteAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.AssignDevDeleteAllByEnt(System.String)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndAssignDevDeleteAllByEnt(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.HistoryDeleteAll(Parco.DataService.HistoryType)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndHistoryDeleteAll(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.HistoryDeleteById(System.String,Parco.DataService.HistoryType)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndHistoryDeleteById(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.MapUpdate(System.Int32,System.String,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndMapUpdate(System.IAsyncResult)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.MapDelete(System.Int32)">
<remarks/>
</member>
      <member name="M:Parco.DataService.DataV2.EndMapDelete(System.IAsyncResult)">
<remarks/>
</member>
      <member name="T:Parco.Zone">
<summary>
The Zone class provides a collection of regions to defines the zone's shape.
All have a zone type to provide positional lookup granularity. Reserved Zone Types are 1 for Campus,
 2 for Building, 3 for Floor, 4 for Wing, 5 for Room, 6 for OData Proximity, 7 for PData Proximity.
Zones can be user defined. User defined zones should have zone type keys greater than or equal to 100.
The Zones provided by Parco are hierarchical in nature with the Campus being at the top of the food chain.
OData Proximity Zones will most likely defined as having either a Floor or Wing as their parent. PData Proximity
Zones may have any of Zone Types Campus through Room as a parent. The architecture and layout of your facility
will determine the hierarchy.
</summary>
</member>
      <member name="M:Parco.Zone.ContainsPoint(Parco.Point3D)">
<overloads>This method has 3 overloads</overloads>
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of any of the Zone's regions.</summary>
<param name="pt">Point3D, the Point3D instance to check.</param>
<returns>Boolean, true if the coordinates fall inside on or in one of the regions.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points. An exception is thrown if the Regions collection count is zero.</remarks>
</member>
      <member name="M:Parco.Zone.ContainsPoint(System.Single,System.Single,System.Single)">
<summary>ContainsPoint returns true if the point defined by the parameters is inside or on the boundry of any of the Zone's regions.</summary>
<param name="X">Single, the X coordinate to check.</param>
<param name="Y">Single, the Y coordinate to check.</param>
<param name="Z">Single, the Z coordinate to check.</param>
<returns>Boolean, true if the coordinates fall inside on or in one of the regions.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points. An exception is thrown if the Regions collection count is zero.</remarks>
</member>
      <member name="M:Parco.Zone.ContainsPointIn2D(Parco.Point3D)">
<summary>ContainsPointIn2D returns true if the point defined by the parameters is inside or on the boundry of the zone while ignoring the height (z) dimension.</summary>
<param name="pt">Point3D, the point containing the coordinates to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionVerticesMinimumException is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Zone.ContainsPointIn2D(Parco.Point2D)">
<summary>ContainsPointIn2D returns true if the point defined by the parameters is inside or on the boundry of the zone while ignoring the height (z) dimension.</summary>
<param name="pt">Point2D, the point containing the coordinates to check.</param>
<returns>Boolean, true if the coordinates fall inside on on the shape.</returns>
<remarks>A RegionVerticesMinimumException is thrown if the vertices array contains 2 or fewer points.</remarks>
</member>
      <member name="M:Parco.Zone.ContainsTag(Parco.Tag)">
<summary>ContainsTag returns true if the point defined by the tag location is inside or on the boundry of any of the Zone's regions.</summary>
<param name="oTag">Tag, the Tag instance to check.</param>
<returns>Boolean, true if the coordinates fall inside on or in one of the regions.</returns>
<remarks>A RegionInvalidException is thrown if the underlying shape is not valid or the Z's are not valid. A RegionVerticesMinimumException
is thrown if the vertices array contains 2 or fewer points. An exception is thrown if the Regions collection count is zero.</remarks>
</member>
      <member name="M:Parco.Zone.Contains(Parco.Point3D)"></member>
      <member name="M:Parco.Zone.Contains2D(Parco.Point2D)"></member>
      <member name="M:Parco.Zone.#ctor"></member>
      <member name="M:Parco.Zone.#ctor(System.Int32)"></member>
      <member name="M:Parco.Zone.#ctor(System.Int32,System.String,System.Int32)"></member>
      <member name="M:Parco.Zone.#ctor(System.Int32,System.String,System.Int32,Parco.Region3DCollection)"></member>
      <member name="P:Parco.Zone.I_ZN">
<summary>Int32, the I_ZN auto number key for the zone.</summary>
<value>Int32, the I_ZN auto number key for the zone.</value>
</member>
      <member name="P:Parco.Zone.Key">
<summary>Object, a user defined key for object instances which are not derived from the database.</summary>
<value>Object, a user defined key for object instances which are not derived from the database.</value>
</member>
      <member name="P:Parco.Zone.Name">
<summary>String, a user friendly name describing the zone.</summary>
<value>String, a user friendly name describing the zone.</value>
</member>
      <member name="P:Parco.Zone.ZoneType">
<summary>Int32, a type describing the zone. The value may correspond to </summary>
<value>String, a a type describing the zone.</value>
</member>
      <member name="P:Parco.Zone.I_PNT_ZN">
<summary>Int32, the I_PNT_ZN database key for the zone's parent zone.</summary>
<value>Int32,  the I_PNT_ZN database key for the zone's parent zone.</value>
</member>
      <member name="P:Parco.Zone.Parent">
<summary>Zone, the parent zone for this instance.</summary>
<value>Zone,  the parent zone for this instance.</value>
</member>
      <member name="P:Parco.Zone.Children">
<summary>ZoneCollection, the children zones for this instance.</summary>
<value>ZoneCollection, the children zones for this instance.</value>
</member>
      <member name="P:Parco.Zone.Regions">
<summary>Region3DCollection, the Region3D instances defining the zone's shape.</summary>
<value>Region3DCollection, the Region3D instances defining the zone's shape.</value>
</member>
      <member name="T:Parco.ZoneType">
<summary>
The ZoneType Enum represent the reserved or system zone types in the Parco RTLS. 
Zone type provides a positional lookup granularity. The system zones are hierarchical and are defined as Campus, Building,
Floor, Wing, Room, OData Proximity, and PData Proximity. Your facility may have some or all of these
zone types defined in the database. Zones may also be user defined. 
User defined zones will have zone type keys with values greater than or equal to 100.
</summary>
</member>
      <member name="F:Parco.ZoneType.All"></member>
      <member name="F:Parco.ZoneType.Campus"></member>
      <member name="F:Parco.ZoneType.Building"></member>
      <member name="F:Parco.ZoneType.Floor"></member>
      <member name="F:Parco.ZoneType.Wing"></member>
      <member name="F:Parco.ZoneType.Room"></member>
      <member name="F:Parco.ZoneType.ODataProximity"></member>
      <member name="F:Parco.ZoneType.PDataProximity"></member>
   </members>
</doc>